
SemestrinisProjektas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d618  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800d6d8  0800d6d8  0000e6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc80  0800dc80  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc80  0800dc80  0000ec80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc88  0800dc88  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc88  0800dc88  0000ec88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dc8c  0800dc8c  0000ec8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800dc90  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  200001e8  0800de78  0000f1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  0800de78  0000f8cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001500e  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d93  00000000  00000000  0002421e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00026fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8b  00000000  00000000  00028258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195ea  00000000  00000000  000290e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001623a  00000000  00000000  000426cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a022c  00000000  00000000  00058907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8b33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005790  00000000  00000000  000f8b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000fe308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e8 	.word	0x200001e8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d6bc 	.word	0x0800d6bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001ec 	.word	0x200001ec
 8000100:	0800d6bc 	.word	0x0800d6bc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fd99 	bl	8001f70 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fcd9 	bl	8001e00 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fd8b 	bl	8001f70 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fd81 	bl	8001f70 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd03 	bl	8001e88 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fcf9 	bl	8001e88 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fab7 	bl	8000a20 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fa37 	bl	8000930 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 faa9 	bl	8000a20 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fa9f 	bl	8000a20 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fa45 	bl	8000980 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fa3b 	bl	8000980 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	@ (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	@ (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f806 	bl	8000558 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__udivmoddi4>:
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	4657      	mov	r7, sl
 800055c:	464e      	mov	r6, r9
 800055e:	4645      	mov	r5, r8
 8000560:	46de      	mov	lr, fp
 8000562:	b5e0      	push	{r5, r6, r7, lr}
 8000564:	0004      	movs	r4, r0
 8000566:	000d      	movs	r5, r1
 8000568:	4692      	mov	sl, r2
 800056a:	4699      	mov	r9, r3
 800056c:	b083      	sub	sp, #12
 800056e:	428b      	cmp	r3, r1
 8000570:	d830      	bhi.n	80005d4 <__udivmoddi4+0x7c>
 8000572:	d02d      	beq.n	80005d0 <__udivmoddi4+0x78>
 8000574:	4649      	mov	r1, r9
 8000576:	4650      	mov	r0, sl
 8000578:	f002 fd6a 	bl	8003050 <__clzdi2>
 800057c:	0029      	movs	r1, r5
 800057e:	0006      	movs	r6, r0
 8000580:	0020      	movs	r0, r4
 8000582:	f002 fd65 	bl	8003050 <__clzdi2>
 8000586:	1a33      	subs	r3, r6, r0
 8000588:	4698      	mov	r8, r3
 800058a:	3b20      	subs	r3, #32
 800058c:	d434      	bmi.n	80005f8 <__udivmoddi4+0xa0>
 800058e:	469b      	mov	fp, r3
 8000590:	4653      	mov	r3, sl
 8000592:	465a      	mov	r2, fp
 8000594:	4093      	lsls	r3, r2
 8000596:	4642      	mov	r2, r8
 8000598:	001f      	movs	r7, r3
 800059a:	4653      	mov	r3, sl
 800059c:	4093      	lsls	r3, r2
 800059e:	001e      	movs	r6, r3
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d83b      	bhi.n	800061c <__udivmoddi4+0xc4>
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d100      	bne.n	80005aa <__udivmoddi4+0x52>
 80005a8:	e079      	b.n	800069e <__udivmoddi4+0x146>
 80005aa:	465b      	mov	r3, fp
 80005ac:	1ba4      	subs	r4, r4, r6
 80005ae:	41bd      	sbcs	r5, r7
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da00      	bge.n	80005b6 <__udivmoddi4+0x5e>
 80005b4:	e076      	b.n	80006a4 <__udivmoddi4+0x14c>
 80005b6:	2200      	movs	r2, #0
 80005b8:	2300      	movs	r3, #0
 80005ba:	9200      	str	r2, [sp, #0]
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2301      	movs	r3, #1
 80005c0:	465a      	mov	r2, fp
 80005c2:	4093      	lsls	r3, r2
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4642      	mov	r2, r8
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	e029      	b.n	8000624 <__udivmoddi4+0xcc>
 80005d0:	4282      	cmp	r2, r0
 80005d2:	d9cf      	bls.n	8000574 <__udivmoddi4+0x1c>
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	9200      	str	r2, [sp, #0]
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <__udivmoddi4+0x8e>
 80005e2:	601c      	str	r4, [r3, #0]
 80005e4:	605d      	str	r5, [r3, #4]
 80005e6:	9800      	ldr	r0, [sp, #0]
 80005e8:	9901      	ldr	r1, [sp, #4]
 80005ea:	b003      	add	sp, #12
 80005ec:	bcf0      	pop	{r4, r5, r6, r7}
 80005ee:	46bb      	mov	fp, r7
 80005f0:	46b2      	mov	sl, r6
 80005f2:	46a9      	mov	r9, r5
 80005f4:	46a0      	mov	r8, r4
 80005f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f8:	4642      	mov	r2, r8
 80005fa:	469b      	mov	fp, r3
 80005fc:	2320      	movs	r3, #32
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	4652      	mov	r2, sl
 8000602:	40da      	lsrs	r2, r3
 8000604:	4641      	mov	r1, r8
 8000606:	0013      	movs	r3, r2
 8000608:	464a      	mov	r2, r9
 800060a:	408a      	lsls	r2, r1
 800060c:	0017      	movs	r7, r2
 800060e:	4642      	mov	r2, r8
 8000610:	431f      	orrs	r7, r3
 8000612:	4653      	mov	r3, sl
 8000614:	4093      	lsls	r3, r2
 8000616:	001e      	movs	r6, r3
 8000618:	42af      	cmp	r7, r5
 800061a:	d9c3      	bls.n	80005a4 <__udivmoddi4+0x4c>
 800061c:	2200      	movs	r2, #0
 800061e:	2300      	movs	r3, #0
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	4643      	mov	r3, r8
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0d8      	beq.n	80005dc <__udivmoddi4+0x84>
 800062a:	07fb      	lsls	r3, r7, #31
 800062c:	0872      	lsrs	r2, r6, #1
 800062e:	431a      	orrs	r2, r3
 8000630:	4646      	mov	r6, r8
 8000632:	087b      	lsrs	r3, r7, #1
 8000634:	e00e      	b.n	8000654 <__udivmoddi4+0xfc>
 8000636:	42ab      	cmp	r3, r5
 8000638:	d101      	bne.n	800063e <__udivmoddi4+0xe6>
 800063a:	42a2      	cmp	r2, r4
 800063c:	d80c      	bhi.n	8000658 <__udivmoddi4+0x100>
 800063e:	1aa4      	subs	r4, r4, r2
 8000640:	419d      	sbcs	r5, r3
 8000642:	2001      	movs	r0, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2100      	movs	r1, #0
 800064a:	3e01      	subs	r6, #1
 800064c:	1824      	adds	r4, r4, r0
 800064e:	414d      	adcs	r5, r1
 8000650:	2e00      	cmp	r6, #0
 8000652:	d006      	beq.n	8000662 <__udivmoddi4+0x10a>
 8000654:	42ab      	cmp	r3, r5
 8000656:	d9ee      	bls.n	8000636 <__udivmoddi4+0xde>
 8000658:	3e01      	subs	r6, #1
 800065a:	1924      	adds	r4, r4, r4
 800065c:	416d      	adcs	r5, r5
 800065e:	2e00      	cmp	r6, #0
 8000660:	d1f8      	bne.n	8000654 <__udivmoddi4+0xfc>
 8000662:	9800      	ldr	r0, [sp, #0]
 8000664:	9901      	ldr	r1, [sp, #4]
 8000666:	465b      	mov	r3, fp
 8000668:	1900      	adds	r0, r0, r4
 800066a:	4169      	adcs	r1, r5
 800066c:	2b00      	cmp	r3, #0
 800066e:	db24      	blt.n	80006ba <__udivmoddi4+0x162>
 8000670:	002b      	movs	r3, r5
 8000672:	465a      	mov	r2, fp
 8000674:	4644      	mov	r4, r8
 8000676:	40d3      	lsrs	r3, r2
 8000678:	002a      	movs	r2, r5
 800067a:	40e2      	lsrs	r2, r4
 800067c:	001c      	movs	r4, r3
 800067e:	465b      	mov	r3, fp
 8000680:	0015      	movs	r5, r2
 8000682:	2b00      	cmp	r3, #0
 8000684:	db2a      	blt.n	80006dc <__udivmoddi4+0x184>
 8000686:	0026      	movs	r6, r4
 8000688:	409e      	lsls	r6, r3
 800068a:	0033      	movs	r3, r6
 800068c:	0026      	movs	r6, r4
 800068e:	4647      	mov	r7, r8
 8000690:	40be      	lsls	r6, r7
 8000692:	0032      	movs	r2, r6
 8000694:	1a80      	subs	r0, r0, r2
 8000696:	4199      	sbcs	r1, r3
 8000698:	9000      	str	r0, [sp, #0]
 800069a:	9101      	str	r1, [sp, #4]
 800069c:	e79e      	b.n	80005dc <__udivmoddi4+0x84>
 800069e:	42a3      	cmp	r3, r4
 80006a0:	d8bc      	bhi.n	800061c <__udivmoddi4+0xc4>
 80006a2:	e782      	b.n	80005aa <__udivmoddi4+0x52>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	2100      	movs	r1, #0
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	2200      	movs	r2, #0
 80006ae:	9100      	str	r1, [sp, #0]
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	2201      	movs	r2, #1
 80006b4:	40da      	lsrs	r2, r3
 80006b6:	9201      	str	r2, [sp, #4]
 80006b8:	e785      	b.n	80005c6 <__udivmoddi4+0x6e>
 80006ba:	4642      	mov	r2, r8
 80006bc:	2320      	movs	r3, #32
 80006be:	1a9b      	subs	r3, r3, r2
 80006c0:	002a      	movs	r2, r5
 80006c2:	4646      	mov	r6, r8
 80006c4:	409a      	lsls	r2, r3
 80006c6:	0023      	movs	r3, r4
 80006c8:	40f3      	lsrs	r3, r6
 80006ca:	4644      	mov	r4, r8
 80006cc:	4313      	orrs	r3, r2
 80006ce:	002a      	movs	r2, r5
 80006d0:	40e2      	lsrs	r2, r4
 80006d2:	001c      	movs	r4, r3
 80006d4:	465b      	mov	r3, fp
 80006d6:	0015      	movs	r5, r2
 80006d8:	2b00      	cmp	r3, #0
 80006da:	dad4      	bge.n	8000686 <__udivmoddi4+0x12e>
 80006dc:	4642      	mov	r2, r8
 80006de:	002f      	movs	r7, r5
 80006e0:	2320      	movs	r3, #32
 80006e2:	0026      	movs	r6, r4
 80006e4:	4097      	lsls	r7, r2
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	40de      	lsrs	r6, r3
 80006ea:	003b      	movs	r3, r7
 80006ec:	4333      	orrs	r3, r6
 80006ee:	e7cd      	b.n	800068c <__udivmoddi4+0x134>

080006f0 <__aeabi_fdiv>:
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f2:	464f      	mov	r7, r9
 80006f4:	4646      	mov	r6, r8
 80006f6:	46d6      	mov	lr, sl
 80006f8:	0244      	lsls	r4, r0, #9
 80006fa:	b5c0      	push	{r6, r7, lr}
 80006fc:	0047      	lsls	r7, r0, #1
 80006fe:	1c0e      	adds	r6, r1, #0
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	0e3f      	lsrs	r7, r7, #24
 8000704:	0fc5      	lsrs	r5, r0, #31
 8000706:	2f00      	cmp	r7, #0
 8000708:	d03c      	beq.n	8000784 <__aeabi_fdiv+0x94>
 800070a:	2fff      	cmp	r7, #255	@ 0xff
 800070c:	d042      	beq.n	8000794 <__aeabi_fdiv+0xa4>
 800070e:	2300      	movs	r3, #0
 8000710:	2280      	movs	r2, #128	@ 0x80
 8000712:	4699      	mov	r9, r3
 8000714:	469a      	mov	sl, r3
 8000716:	00e4      	lsls	r4, r4, #3
 8000718:	04d2      	lsls	r2, r2, #19
 800071a:	4314      	orrs	r4, r2
 800071c:	3f7f      	subs	r7, #127	@ 0x7f
 800071e:	0273      	lsls	r3, r6, #9
 8000720:	0a5b      	lsrs	r3, r3, #9
 8000722:	4698      	mov	r8, r3
 8000724:	0073      	lsls	r3, r6, #1
 8000726:	0e1b      	lsrs	r3, r3, #24
 8000728:	0ff6      	lsrs	r6, r6, #31
 800072a:	2b00      	cmp	r3, #0
 800072c:	d01b      	beq.n	8000766 <__aeabi_fdiv+0x76>
 800072e:	2bff      	cmp	r3, #255	@ 0xff
 8000730:	d013      	beq.n	800075a <__aeabi_fdiv+0x6a>
 8000732:	4642      	mov	r2, r8
 8000734:	2180      	movs	r1, #128	@ 0x80
 8000736:	00d2      	lsls	r2, r2, #3
 8000738:	04c9      	lsls	r1, r1, #19
 800073a:	4311      	orrs	r1, r2
 800073c:	4688      	mov	r8, r1
 800073e:	2000      	movs	r0, #0
 8000740:	3b7f      	subs	r3, #127	@ 0x7f
 8000742:	0029      	movs	r1, r5
 8000744:	1aff      	subs	r7, r7, r3
 8000746:	464b      	mov	r3, r9
 8000748:	4071      	eors	r1, r6
 800074a:	b2c9      	uxtb	r1, r1
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d900      	bls.n	8000752 <__aeabi_fdiv+0x62>
 8000750:	e0b5      	b.n	80008be <__aeabi_fdiv+0x1ce>
 8000752:	4a74      	ldr	r2, [pc, #464]	@ (8000924 <__aeabi_fdiv+0x234>)
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	58d3      	ldr	r3, [r2, r3]
 8000758:	469f      	mov	pc, r3
 800075a:	4643      	mov	r3, r8
 800075c:	2b00      	cmp	r3, #0
 800075e:	d13f      	bne.n	80007e0 <__aeabi_fdiv+0xf0>
 8000760:	3fff      	subs	r7, #255	@ 0xff
 8000762:	3302      	adds	r3, #2
 8000764:	e003      	b.n	800076e <__aeabi_fdiv+0x7e>
 8000766:	4643      	mov	r3, r8
 8000768:	2b00      	cmp	r3, #0
 800076a:	d12d      	bne.n	80007c8 <__aeabi_fdiv+0xd8>
 800076c:	2301      	movs	r3, #1
 800076e:	0029      	movs	r1, r5
 8000770:	464a      	mov	r2, r9
 8000772:	4071      	eors	r1, r6
 8000774:	b2c9      	uxtb	r1, r1
 8000776:	431a      	orrs	r2, r3
 8000778:	2a0e      	cmp	r2, #14
 800077a:	d838      	bhi.n	80007ee <__aeabi_fdiv+0xfe>
 800077c:	486a      	ldr	r0, [pc, #424]	@ (8000928 <__aeabi_fdiv+0x238>)
 800077e:	0092      	lsls	r2, r2, #2
 8000780:	5882      	ldr	r2, [r0, r2]
 8000782:	4697      	mov	pc, r2
 8000784:	2c00      	cmp	r4, #0
 8000786:	d113      	bne.n	80007b0 <__aeabi_fdiv+0xc0>
 8000788:	2304      	movs	r3, #4
 800078a:	4699      	mov	r9, r3
 800078c:	3b03      	subs	r3, #3
 800078e:	2700      	movs	r7, #0
 8000790:	469a      	mov	sl, r3
 8000792:	e7c4      	b.n	800071e <__aeabi_fdiv+0x2e>
 8000794:	2c00      	cmp	r4, #0
 8000796:	d105      	bne.n	80007a4 <__aeabi_fdiv+0xb4>
 8000798:	2308      	movs	r3, #8
 800079a:	4699      	mov	r9, r3
 800079c:	3b06      	subs	r3, #6
 800079e:	27ff      	movs	r7, #255	@ 0xff
 80007a0:	469a      	mov	sl, r3
 80007a2:	e7bc      	b.n	800071e <__aeabi_fdiv+0x2e>
 80007a4:	230c      	movs	r3, #12
 80007a6:	4699      	mov	r9, r3
 80007a8:	3b09      	subs	r3, #9
 80007aa:	27ff      	movs	r7, #255	@ 0xff
 80007ac:	469a      	mov	sl, r3
 80007ae:	e7b6      	b.n	800071e <__aeabi_fdiv+0x2e>
 80007b0:	0020      	movs	r0, r4
 80007b2:	f002 fc2f 	bl	8003014 <__clzsi2>
 80007b6:	2776      	movs	r7, #118	@ 0x76
 80007b8:	1f43      	subs	r3, r0, #5
 80007ba:	409c      	lsls	r4, r3
 80007bc:	2300      	movs	r3, #0
 80007be:	427f      	negs	r7, r7
 80007c0:	4699      	mov	r9, r3
 80007c2:	469a      	mov	sl, r3
 80007c4:	1a3f      	subs	r7, r7, r0
 80007c6:	e7aa      	b.n	800071e <__aeabi_fdiv+0x2e>
 80007c8:	4640      	mov	r0, r8
 80007ca:	f002 fc23 	bl	8003014 <__clzsi2>
 80007ce:	4642      	mov	r2, r8
 80007d0:	1f43      	subs	r3, r0, #5
 80007d2:	409a      	lsls	r2, r3
 80007d4:	2376      	movs	r3, #118	@ 0x76
 80007d6:	425b      	negs	r3, r3
 80007d8:	1a1b      	subs	r3, r3, r0
 80007da:	4690      	mov	r8, r2
 80007dc:	2000      	movs	r0, #0
 80007de:	e7b0      	b.n	8000742 <__aeabi_fdiv+0x52>
 80007e0:	2303      	movs	r3, #3
 80007e2:	464a      	mov	r2, r9
 80007e4:	431a      	orrs	r2, r3
 80007e6:	4691      	mov	r9, r2
 80007e8:	2003      	movs	r0, #3
 80007ea:	33fc      	adds	r3, #252	@ 0xfc
 80007ec:	e7a9      	b.n	8000742 <__aeabi_fdiv+0x52>
 80007ee:	000d      	movs	r5, r1
 80007f0:	20ff      	movs	r0, #255	@ 0xff
 80007f2:	2200      	movs	r2, #0
 80007f4:	05c0      	lsls	r0, r0, #23
 80007f6:	07ed      	lsls	r5, r5, #31
 80007f8:	4310      	orrs	r0, r2
 80007fa:	4328      	orrs	r0, r5
 80007fc:	bce0      	pop	{r5, r6, r7}
 80007fe:	46ba      	mov	sl, r7
 8000800:	46b1      	mov	r9, r6
 8000802:	46a8      	mov	r8, r5
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000806:	000d      	movs	r5, r1
 8000808:	2000      	movs	r0, #0
 800080a:	2200      	movs	r2, #0
 800080c:	e7f2      	b.n	80007f4 <__aeabi_fdiv+0x104>
 800080e:	4653      	mov	r3, sl
 8000810:	2b02      	cmp	r3, #2
 8000812:	d0ed      	beq.n	80007f0 <__aeabi_fdiv+0x100>
 8000814:	2b03      	cmp	r3, #3
 8000816:	d033      	beq.n	8000880 <__aeabi_fdiv+0x190>
 8000818:	46a0      	mov	r8, r4
 800081a:	2b01      	cmp	r3, #1
 800081c:	d105      	bne.n	800082a <__aeabi_fdiv+0x13a>
 800081e:	2000      	movs	r0, #0
 8000820:	2200      	movs	r2, #0
 8000822:	e7e7      	b.n	80007f4 <__aeabi_fdiv+0x104>
 8000824:	0035      	movs	r5, r6
 8000826:	2803      	cmp	r0, #3
 8000828:	d07a      	beq.n	8000920 <__aeabi_fdiv+0x230>
 800082a:	003b      	movs	r3, r7
 800082c:	337f      	adds	r3, #127	@ 0x7f
 800082e:	2b00      	cmp	r3, #0
 8000830:	dd2d      	ble.n	800088e <__aeabi_fdiv+0x19e>
 8000832:	4642      	mov	r2, r8
 8000834:	0752      	lsls	r2, r2, #29
 8000836:	d007      	beq.n	8000848 <__aeabi_fdiv+0x158>
 8000838:	220f      	movs	r2, #15
 800083a:	4641      	mov	r1, r8
 800083c:	400a      	ands	r2, r1
 800083e:	2a04      	cmp	r2, #4
 8000840:	d002      	beq.n	8000848 <__aeabi_fdiv+0x158>
 8000842:	2204      	movs	r2, #4
 8000844:	4694      	mov	ip, r2
 8000846:	44e0      	add	r8, ip
 8000848:	4642      	mov	r2, r8
 800084a:	0112      	lsls	r2, r2, #4
 800084c:	d505      	bpl.n	800085a <__aeabi_fdiv+0x16a>
 800084e:	4642      	mov	r2, r8
 8000850:	4b36      	ldr	r3, [pc, #216]	@ (800092c <__aeabi_fdiv+0x23c>)
 8000852:	401a      	ands	r2, r3
 8000854:	003b      	movs	r3, r7
 8000856:	4690      	mov	r8, r2
 8000858:	3380      	adds	r3, #128	@ 0x80
 800085a:	2bfe      	cmp	r3, #254	@ 0xfe
 800085c:	dcc8      	bgt.n	80007f0 <__aeabi_fdiv+0x100>
 800085e:	4642      	mov	r2, r8
 8000860:	0192      	lsls	r2, r2, #6
 8000862:	0a52      	lsrs	r2, r2, #9
 8000864:	b2d8      	uxtb	r0, r3
 8000866:	e7c5      	b.n	80007f4 <__aeabi_fdiv+0x104>
 8000868:	2280      	movs	r2, #128	@ 0x80
 800086a:	2500      	movs	r5, #0
 800086c:	20ff      	movs	r0, #255	@ 0xff
 800086e:	03d2      	lsls	r2, r2, #15
 8000870:	e7c0      	b.n	80007f4 <__aeabi_fdiv+0x104>
 8000872:	2280      	movs	r2, #128	@ 0x80
 8000874:	03d2      	lsls	r2, r2, #15
 8000876:	4214      	tst	r4, r2
 8000878:	d002      	beq.n	8000880 <__aeabi_fdiv+0x190>
 800087a:	4643      	mov	r3, r8
 800087c:	4213      	tst	r3, r2
 800087e:	d049      	beq.n	8000914 <__aeabi_fdiv+0x224>
 8000880:	2280      	movs	r2, #128	@ 0x80
 8000882:	03d2      	lsls	r2, r2, #15
 8000884:	4322      	orrs	r2, r4
 8000886:	0252      	lsls	r2, r2, #9
 8000888:	20ff      	movs	r0, #255	@ 0xff
 800088a:	0a52      	lsrs	r2, r2, #9
 800088c:	e7b2      	b.n	80007f4 <__aeabi_fdiv+0x104>
 800088e:	2201      	movs	r2, #1
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	2b1b      	cmp	r3, #27
 8000894:	dcc3      	bgt.n	800081e <__aeabi_fdiv+0x12e>
 8000896:	4642      	mov	r2, r8
 8000898:	40da      	lsrs	r2, r3
 800089a:	4643      	mov	r3, r8
 800089c:	379e      	adds	r7, #158	@ 0x9e
 800089e:	40bb      	lsls	r3, r7
 80008a0:	1e59      	subs	r1, r3, #1
 80008a2:	418b      	sbcs	r3, r1
 80008a4:	431a      	orrs	r2, r3
 80008a6:	0753      	lsls	r3, r2, #29
 80008a8:	d004      	beq.n	80008b4 <__aeabi_fdiv+0x1c4>
 80008aa:	230f      	movs	r3, #15
 80008ac:	4013      	ands	r3, r2
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fdiv+0x1c4>
 80008b2:	3204      	adds	r2, #4
 80008b4:	0153      	lsls	r3, r2, #5
 80008b6:	d529      	bpl.n	800090c <__aeabi_fdiv+0x21c>
 80008b8:	2001      	movs	r0, #1
 80008ba:	2200      	movs	r2, #0
 80008bc:	e79a      	b.n	80007f4 <__aeabi_fdiv+0x104>
 80008be:	4642      	mov	r2, r8
 80008c0:	0163      	lsls	r3, r4, #5
 80008c2:	0155      	lsls	r5, r2, #5
 80008c4:	42ab      	cmp	r3, r5
 80008c6:	d215      	bcs.n	80008f4 <__aeabi_fdiv+0x204>
 80008c8:	201b      	movs	r0, #27
 80008ca:	2200      	movs	r2, #0
 80008cc:	3f01      	subs	r7, #1
 80008ce:	2601      	movs	r6, #1
 80008d0:	001c      	movs	r4, r3
 80008d2:	0052      	lsls	r2, r2, #1
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	2c00      	cmp	r4, #0
 80008d8:	db01      	blt.n	80008de <__aeabi_fdiv+0x1ee>
 80008da:	429d      	cmp	r5, r3
 80008dc:	d801      	bhi.n	80008e2 <__aeabi_fdiv+0x1f2>
 80008de:	1b5b      	subs	r3, r3, r5
 80008e0:	4332      	orrs	r2, r6
 80008e2:	3801      	subs	r0, #1
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d1f3      	bne.n	80008d0 <__aeabi_fdiv+0x1e0>
 80008e8:	1e58      	subs	r0, r3, #1
 80008ea:	4183      	sbcs	r3, r0
 80008ec:	4313      	orrs	r3, r2
 80008ee:	4698      	mov	r8, r3
 80008f0:	000d      	movs	r5, r1
 80008f2:	e79a      	b.n	800082a <__aeabi_fdiv+0x13a>
 80008f4:	201a      	movs	r0, #26
 80008f6:	2201      	movs	r2, #1
 80008f8:	1b5b      	subs	r3, r3, r5
 80008fa:	e7e8      	b.n	80008ce <__aeabi_fdiv+0x1de>
 80008fc:	3b02      	subs	r3, #2
 80008fe:	425a      	negs	r2, r3
 8000900:	4153      	adcs	r3, r2
 8000902:	425b      	negs	r3, r3
 8000904:	0035      	movs	r5, r6
 8000906:	2200      	movs	r2, #0
 8000908:	b2d8      	uxtb	r0, r3
 800090a:	e773      	b.n	80007f4 <__aeabi_fdiv+0x104>
 800090c:	0192      	lsls	r2, r2, #6
 800090e:	2000      	movs	r0, #0
 8000910:	0a52      	lsrs	r2, r2, #9
 8000912:	e76f      	b.n	80007f4 <__aeabi_fdiv+0x104>
 8000914:	431a      	orrs	r2, r3
 8000916:	0252      	lsls	r2, r2, #9
 8000918:	0035      	movs	r5, r6
 800091a:	20ff      	movs	r0, #255	@ 0xff
 800091c:	0a52      	lsrs	r2, r2, #9
 800091e:	e769      	b.n	80007f4 <__aeabi_fdiv+0x104>
 8000920:	4644      	mov	r4, r8
 8000922:	e7ad      	b.n	8000880 <__aeabi_fdiv+0x190>
 8000924:	0800d7cc 	.word	0x0800d7cc
 8000928:	0800d80c 	.word	0x0800d80c
 800092c:	f7ffffff 	.word	0xf7ffffff

08000930 <__eqsf2>:
 8000930:	b570      	push	{r4, r5, r6, lr}
 8000932:	0042      	lsls	r2, r0, #1
 8000934:	024e      	lsls	r6, r1, #9
 8000936:	004c      	lsls	r4, r1, #1
 8000938:	0245      	lsls	r5, r0, #9
 800093a:	0a6d      	lsrs	r5, r5, #9
 800093c:	0e12      	lsrs	r2, r2, #24
 800093e:	0fc3      	lsrs	r3, r0, #31
 8000940:	0a76      	lsrs	r6, r6, #9
 8000942:	0e24      	lsrs	r4, r4, #24
 8000944:	0fc9      	lsrs	r1, r1, #31
 8000946:	2aff      	cmp	r2, #255	@ 0xff
 8000948:	d010      	beq.n	800096c <__eqsf2+0x3c>
 800094a:	2cff      	cmp	r4, #255	@ 0xff
 800094c:	d00c      	beq.n	8000968 <__eqsf2+0x38>
 800094e:	2001      	movs	r0, #1
 8000950:	42a2      	cmp	r2, r4
 8000952:	d10a      	bne.n	800096a <__eqsf2+0x3a>
 8000954:	42b5      	cmp	r5, r6
 8000956:	d108      	bne.n	800096a <__eqsf2+0x3a>
 8000958:	428b      	cmp	r3, r1
 800095a:	d00f      	beq.n	800097c <__eqsf2+0x4c>
 800095c:	2a00      	cmp	r2, #0
 800095e:	d104      	bne.n	800096a <__eqsf2+0x3a>
 8000960:	0028      	movs	r0, r5
 8000962:	1e43      	subs	r3, r0, #1
 8000964:	4198      	sbcs	r0, r3
 8000966:	e000      	b.n	800096a <__eqsf2+0x3a>
 8000968:	2001      	movs	r0, #1
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	2001      	movs	r0, #1
 800096e:	2cff      	cmp	r4, #255	@ 0xff
 8000970:	d1fb      	bne.n	800096a <__eqsf2+0x3a>
 8000972:	4335      	orrs	r5, r6
 8000974:	d1f9      	bne.n	800096a <__eqsf2+0x3a>
 8000976:	404b      	eors	r3, r1
 8000978:	0018      	movs	r0, r3
 800097a:	e7f6      	b.n	800096a <__eqsf2+0x3a>
 800097c:	2000      	movs	r0, #0
 800097e:	e7f4      	b.n	800096a <__eqsf2+0x3a>

08000980 <__gesf2>:
 8000980:	b530      	push	{r4, r5, lr}
 8000982:	0042      	lsls	r2, r0, #1
 8000984:	0244      	lsls	r4, r0, #9
 8000986:	024d      	lsls	r5, r1, #9
 8000988:	0fc3      	lsrs	r3, r0, #31
 800098a:	0048      	lsls	r0, r1, #1
 800098c:	0a64      	lsrs	r4, r4, #9
 800098e:	0e12      	lsrs	r2, r2, #24
 8000990:	0a6d      	lsrs	r5, r5, #9
 8000992:	0e00      	lsrs	r0, r0, #24
 8000994:	0fc9      	lsrs	r1, r1, #31
 8000996:	2aff      	cmp	r2, #255	@ 0xff
 8000998:	d019      	beq.n	80009ce <__gesf2+0x4e>
 800099a:	28ff      	cmp	r0, #255	@ 0xff
 800099c:	d00b      	beq.n	80009b6 <__gesf2+0x36>
 800099e:	2a00      	cmp	r2, #0
 80009a0:	d11e      	bne.n	80009e0 <__gesf2+0x60>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d10b      	bne.n	80009be <__gesf2+0x3e>
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	d027      	beq.n	80009fa <__gesf2+0x7a>
 80009aa:	2c00      	cmp	r4, #0
 80009ac:	d134      	bne.n	8000a18 <__gesf2+0x98>
 80009ae:	2900      	cmp	r1, #0
 80009b0:	d02f      	beq.n	8000a12 <__gesf2+0x92>
 80009b2:	0008      	movs	r0, r1
 80009b4:	bd30      	pop	{r4, r5, pc}
 80009b6:	2d00      	cmp	r5, #0
 80009b8:	d128      	bne.n	8000a0c <__gesf2+0x8c>
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d101      	bne.n	80009c2 <__gesf2+0x42>
 80009be:	2c00      	cmp	r4, #0
 80009c0:	d0f5      	beq.n	80009ae <__gesf2+0x2e>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d107      	bne.n	80009d6 <__gesf2+0x56>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d023      	beq.n	8000a12 <__gesf2+0x92>
 80009ca:	0018      	movs	r0, r3
 80009cc:	e7f2      	b.n	80009b4 <__gesf2+0x34>
 80009ce:	2c00      	cmp	r4, #0
 80009d0:	d11c      	bne.n	8000a0c <__gesf2+0x8c>
 80009d2:	28ff      	cmp	r0, #255	@ 0xff
 80009d4:	d014      	beq.n	8000a00 <__gesf2+0x80>
 80009d6:	1e58      	subs	r0, r3, #1
 80009d8:	2302      	movs	r3, #2
 80009da:	4018      	ands	r0, r3
 80009dc:	3801      	subs	r0, #1
 80009de:	e7e9      	b.n	80009b4 <__gesf2+0x34>
 80009e0:	2800      	cmp	r0, #0
 80009e2:	d0f8      	beq.n	80009d6 <__gesf2+0x56>
 80009e4:	428b      	cmp	r3, r1
 80009e6:	d1f6      	bne.n	80009d6 <__gesf2+0x56>
 80009e8:	4282      	cmp	r2, r0
 80009ea:	dcf4      	bgt.n	80009d6 <__gesf2+0x56>
 80009ec:	dbeb      	blt.n	80009c6 <__gesf2+0x46>
 80009ee:	42ac      	cmp	r4, r5
 80009f0:	d8f1      	bhi.n	80009d6 <__gesf2+0x56>
 80009f2:	2000      	movs	r0, #0
 80009f4:	42ac      	cmp	r4, r5
 80009f6:	d2dd      	bcs.n	80009b4 <__gesf2+0x34>
 80009f8:	e7e5      	b.n	80009c6 <__gesf2+0x46>
 80009fa:	2c00      	cmp	r4, #0
 80009fc:	d0da      	beq.n	80009b4 <__gesf2+0x34>
 80009fe:	e7ea      	b.n	80009d6 <__gesf2+0x56>
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d103      	bne.n	8000a0c <__gesf2+0x8c>
 8000a04:	428b      	cmp	r3, r1
 8000a06:	d1e6      	bne.n	80009d6 <__gesf2+0x56>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e7d3      	b.n	80009b4 <__gesf2+0x34>
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	4240      	negs	r0, r0
 8000a10:	e7d0      	b.n	80009b4 <__gesf2+0x34>
 8000a12:	2001      	movs	r0, #1
 8000a14:	4240      	negs	r0, r0
 8000a16:	e7cd      	b.n	80009b4 <__gesf2+0x34>
 8000a18:	428b      	cmp	r3, r1
 8000a1a:	d0e8      	beq.n	80009ee <__gesf2+0x6e>
 8000a1c:	e7db      	b.n	80009d6 <__gesf2+0x56>
 8000a1e:	46c0      	nop			@ (mov r8, r8)

08000a20 <__lesf2>:
 8000a20:	b530      	push	{r4, r5, lr}
 8000a22:	0042      	lsls	r2, r0, #1
 8000a24:	0244      	lsls	r4, r0, #9
 8000a26:	024d      	lsls	r5, r1, #9
 8000a28:	0fc3      	lsrs	r3, r0, #31
 8000a2a:	0048      	lsls	r0, r1, #1
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e12      	lsrs	r2, r2, #24
 8000a30:	0a6d      	lsrs	r5, r5, #9
 8000a32:	0e00      	lsrs	r0, r0, #24
 8000a34:	0fc9      	lsrs	r1, r1, #31
 8000a36:	2aff      	cmp	r2, #255	@ 0xff
 8000a38:	d01a      	beq.n	8000a70 <__lesf2+0x50>
 8000a3a:	28ff      	cmp	r0, #255	@ 0xff
 8000a3c:	d00e      	beq.n	8000a5c <__lesf2+0x3c>
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	d11e      	bne.n	8000a80 <__lesf2+0x60>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d10e      	bne.n	8000a64 <__lesf2+0x44>
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d02a      	beq.n	8000aa0 <__lesf2+0x80>
 8000a4a:	2c00      	cmp	r4, #0
 8000a4c:	d00c      	beq.n	8000a68 <__lesf2+0x48>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d01d      	beq.n	8000a8e <__lesf2+0x6e>
 8000a52:	1e58      	subs	r0, r3, #1
 8000a54:	2302      	movs	r3, #2
 8000a56:	4018      	ands	r0, r3
 8000a58:	3801      	subs	r0, #1
 8000a5a:	e010      	b.n	8000a7e <__lesf2+0x5e>
 8000a5c:	2d00      	cmp	r5, #0
 8000a5e:	d10d      	bne.n	8000a7c <__lesf2+0x5c>
 8000a60:	2a00      	cmp	r2, #0
 8000a62:	d120      	bne.n	8000aa6 <__lesf2+0x86>
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d11e      	bne.n	8000aa6 <__lesf2+0x86>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	d023      	beq.n	8000ab4 <__lesf2+0x94>
 8000a6c:	0008      	movs	r0, r1
 8000a6e:	e006      	b.n	8000a7e <__lesf2+0x5e>
 8000a70:	2c00      	cmp	r4, #0
 8000a72:	d103      	bne.n	8000a7c <__lesf2+0x5c>
 8000a74:	28ff      	cmp	r0, #255	@ 0xff
 8000a76:	d1ec      	bne.n	8000a52 <__lesf2+0x32>
 8000a78:	2d00      	cmp	r5, #0
 8000a7a:	d017      	beq.n	8000aac <__lesf2+0x8c>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	bd30      	pop	{r4, r5, pc}
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d0e6      	beq.n	8000a52 <__lesf2+0x32>
 8000a84:	428b      	cmp	r3, r1
 8000a86:	d1e4      	bne.n	8000a52 <__lesf2+0x32>
 8000a88:	4282      	cmp	r2, r0
 8000a8a:	dce2      	bgt.n	8000a52 <__lesf2+0x32>
 8000a8c:	db04      	blt.n	8000a98 <__lesf2+0x78>
 8000a8e:	42ac      	cmp	r4, r5
 8000a90:	d8df      	bhi.n	8000a52 <__lesf2+0x32>
 8000a92:	2000      	movs	r0, #0
 8000a94:	42ac      	cmp	r4, r5
 8000a96:	d2f2      	bcs.n	8000a7e <__lesf2+0x5e>
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d00b      	beq.n	8000ab4 <__lesf2+0x94>
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	e7ee      	b.n	8000a7e <__lesf2+0x5e>
 8000aa0:	2c00      	cmp	r4, #0
 8000aa2:	d0ec      	beq.n	8000a7e <__lesf2+0x5e>
 8000aa4:	e7d5      	b.n	8000a52 <__lesf2+0x32>
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d1d3      	bne.n	8000a52 <__lesf2+0x32>
 8000aaa:	e7f5      	b.n	8000a98 <__lesf2+0x78>
 8000aac:	2000      	movs	r0, #0
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d0e5      	beq.n	8000a7e <__lesf2+0x5e>
 8000ab2:	e7ce      	b.n	8000a52 <__lesf2+0x32>
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	4240      	negs	r0, r0
 8000ab8:	e7e1      	b.n	8000a7e <__lesf2+0x5e>
 8000aba:	46c0      	nop			@ (mov r8, r8)

08000abc <__aeabi_fmul>:
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	464f      	mov	r7, r9
 8000ac0:	4646      	mov	r6, r8
 8000ac2:	46d6      	mov	lr, sl
 8000ac4:	0243      	lsls	r3, r0, #9
 8000ac6:	0a5b      	lsrs	r3, r3, #9
 8000ac8:	0045      	lsls	r5, r0, #1
 8000aca:	b5c0      	push	{r6, r7, lr}
 8000acc:	4699      	mov	r9, r3
 8000ace:	1c0f      	adds	r7, r1, #0
 8000ad0:	0e2d      	lsrs	r5, r5, #24
 8000ad2:	0fc6      	lsrs	r6, r0, #31
 8000ad4:	2d00      	cmp	r5, #0
 8000ad6:	d100      	bne.n	8000ada <__aeabi_fmul+0x1e>
 8000ad8:	e088      	b.n	8000bec <__aeabi_fmul+0x130>
 8000ada:	2dff      	cmp	r5, #255	@ 0xff
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_fmul+0x24>
 8000ade:	e08d      	b.n	8000bfc <__aeabi_fmul+0x140>
 8000ae0:	2280      	movs	r2, #128	@ 0x80
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	04d2      	lsls	r2, r2, #19
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4691      	mov	r9, r2
 8000aec:	4698      	mov	r8, r3
 8000aee:	469a      	mov	sl, r3
 8000af0:	3d7f      	subs	r5, #127	@ 0x7f
 8000af2:	027c      	lsls	r4, r7, #9
 8000af4:	007b      	lsls	r3, r7, #1
 8000af6:	0a64      	lsrs	r4, r4, #9
 8000af8:	0e1b      	lsrs	r3, r3, #24
 8000afa:	0fff      	lsrs	r7, r7, #31
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d068      	beq.n	8000bd2 <__aeabi_fmul+0x116>
 8000b00:	2bff      	cmp	r3, #255	@ 0xff
 8000b02:	d021      	beq.n	8000b48 <__aeabi_fmul+0x8c>
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	00e4      	lsls	r4, r4, #3
 8000b08:	04d2      	lsls	r2, r2, #19
 8000b0a:	4314      	orrs	r4, r2
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	3b7f      	subs	r3, #127	@ 0x7f
 8000b10:	195b      	adds	r3, r3, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	1c5d      	adds	r5, r3, #1
 8000b16:	2a0a      	cmp	r2, #10
 8000b18:	dc2e      	bgt.n	8000b78 <__aeabi_fmul+0xbc>
 8000b1a:	407e      	eors	r6, r7
 8000b1c:	4642      	mov	r2, r8
 8000b1e:	2a02      	cmp	r2, #2
 8000b20:	dc23      	bgt.n	8000b6a <__aeabi_fmul+0xae>
 8000b22:	3a01      	subs	r2, #1
 8000b24:	2a01      	cmp	r2, #1
 8000b26:	d900      	bls.n	8000b2a <__aeabi_fmul+0x6e>
 8000b28:	e0bd      	b.n	8000ca6 <__aeabi_fmul+0x1ea>
 8000b2a:	2902      	cmp	r1, #2
 8000b2c:	d06e      	beq.n	8000c0c <__aeabi_fmul+0x150>
 8000b2e:	2901      	cmp	r1, #1
 8000b30:	d12c      	bne.n	8000b8c <__aeabi_fmul+0xd0>
 8000b32:	2000      	movs	r0, #0
 8000b34:	2200      	movs	r2, #0
 8000b36:	05c0      	lsls	r0, r0, #23
 8000b38:	07f6      	lsls	r6, r6, #31
 8000b3a:	4310      	orrs	r0, r2
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	bce0      	pop	{r5, r6, r7}
 8000b40:	46ba      	mov	sl, r7
 8000b42:	46b1      	mov	r9, r6
 8000b44:	46a8      	mov	r8, r5
 8000b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b48:	002b      	movs	r3, r5
 8000b4a:	33ff      	adds	r3, #255	@ 0xff
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	d065      	beq.n	8000c1c <__aeabi_fmul+0x160>
 8000b50:	2203      	movs	r2, #3
 8000b52:	4641      	mov	r1, r8
 8000b54:	4311      	orrs	r1, r2
 8000b56:	0032      	movs	r2, r6
 8000b58:	3501      	adds	r5, #1
 8000b5a:	4688      	mov	r8, r1
 8000b5c:	407a      	eors	r2, r7
 8000b5e:	35ff      	adds	r5, #255	@ 0xff
 8000b60:	290a      	cmp	r1, #10
 8000b62:	dd00      	ble.n	8000b66 <__aeabi_fmul+0xaa>
 8000b64:	e0d8      	b.n	8000d18 <__aeabi_fmul+0x25c>
 8000b66:	0016      	movs	r6, r2
 8000b68:	2103      	movs	r1, #3
 8000b6a:	4640      	mov	r0, r8
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4082      	lsls	r2, r0
 8000b70:	20a6      	movs	r0, #166	@ 0xa6
 8000b72:	00c0      	lsls	r0, r0, #3
 8000b74:	4202      	tst	r2, r0
 8000b76:	d020      	beq.n	8000bba <__aeabi_fmul+0xfe>
 8000b78:	4653      	mov	r3, sl
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d046      	beq.n	8000c0c <__aeabi_fmul+0x150>
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fmul+0xc8>
 8000b82:	e0bb      	b.n	8000cfc <__aeabi_fmul+0x240>
 8000b84:	4651      	mov	r1, sl
 8000b86:	464c      	mov	r4, r9
 8000b88:	2901      	cmp	r1, #1
 8000b8a:	d0d2      	beq.n	8000b32 <__aeabi_fmul+0x76>
 8000b8c:	002b      	movs	r3, r5
 8000b8e:	337f      	adds	r3, #127	@ 0x7f
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	dd70      	ble.n	8000c76 <__aeabi_fmul+0x1ba>
 8000b94:	0762      	lsls	r2, r4, #29
 8000b96:	d004      	beq.n	8000ba2 <__aeabi_fmul+0xe6>
 8000b98:	220f      	movs	r2, #15
 8000b9a:	4022      	ands	r2, r4
 8000b9c:	2a04      	cmp	r2, #4
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_fmul+0xe6>
 8000ba0:	3404      	adds	r4, #4
 8000ba2:	0122      	lsls	r2, r4, #4
 8000ba4:	d503      	bpl.n	8000bae <__aeabi_fmul+0xf2>
 8000ba6:	4b63      	ldr	r3, [pc, #396]	@ (8000d34 <__aeabi_fmul+0x278>)
 8000ba8:	401c      	ands	r4, r3
 8000baa:	002b      	movs	r3, r5
 8000bac:	3380      	adds	r3, #128	@ 0x80
 8000bae:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bb0:	dc2c      	bgt.n	8000c0c <__aeabi_fmul+0x150>
 8000bb2:	01a2      	lsls	r2, r4, #6
 8000bb4:	0a52      	lsrs	r2, r2, #9
 8000bb6:	b2d8      	uxtb	r0, r3
 8000bb8:	e7bd      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000bba:	2090      	movs	r0, #144	@ 0x90
 8000bbc:	0080      	lsls	r0, r0, #2
 8000bbe:	4202      	tst	r2, r0
 8000bc0:	d127      	bne.n	8000c12 <__aeabi_fmul+0x156>
 8000bc2:	38b9      	subs	r0, #185	@ 0xb9
 8000bc4:	38ff      	subs	r0, #255	@ 0xff
 8000bc6:	4210      	tst	r0, r2
 8000bc8:	d06d      	beq.n	8000ca6 <__aeabi_fmul+0x1ea>
 8000bca:	003e      	movs	r6, r7
 8000bcc:	46a1      	mov	r9, r4
 8000bce:	468a      	mov	sl, r1
 8000bd0:	e7d2      	b.n	8000b78 <__aeabi_fmul+0xbc>
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	d141      	bne.n	8000c5a <__aeabi_fmul+0x19e>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	4642      	mov	r2, r8
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	4690      	mov	r8, r2
 8000bde:	002b      	movs	r3, r5
 8000be0:	4642      	mov	r2, r8
 8000be2:	2101      	movs	r1, #1
 8000be4:	1c5d      	adds	r5, r3, #1
 8000be6:	2a0a      	cmp	r2, #10
 8000be8:	dd97      	ble.n	8000b1a <__aeabi_fmul+0x5e>
 8000bea:	e7c5      	b.n	8000b78 <__aeabi_fmul+0xbc>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d126      	bne.n	8000c3e <__aeabi_fmul+0x182>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	4698      	mov	r8, r3
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	e77a      	b.n	8000af2 <__aeabi_fmul+0x36>
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d118      	bne.n	8000c32 <__aeabi_fmul+0x176>
 8000c00:	2308      	movs	r3, #8
 8000c02:	4698      	mov	r8, r3
 8000c04:	3b06      	subs	r3, #6
 8000c06:	25ff      	movs	r5, #255	@ 0xff
 8000c08:	469a      	mov	sl, r3
 8000c0a:	e772      	b.n	8000af2 <__aeabi_fmul+0x36>
 8000c0c:	20ff      	movs	r0, #255	@ 0xff
 8000c0e:	2200      	movs	r2, #0
 8000c10:	e791      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000c12:	2280      	movs	r2, #128	@ 0x80
 8000c14:	2600      	movs	r6, #0
 8000c16:	20ff      	movs	r0, #255	@ 0xff
 8000c18:	03d2      	lsls	r2, r2, #15
 8000c1a:	e78c      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000c1c:	4641      	mov	r1, r8
 8000c1e:	2202      	movs	r2, #2
 8000c20:	3501      	adds	r5, #1
 8000c22:	4311      	orrs	r1, r2
 8000c24:	4688      	mov	r8, r1
 8000c26:	35ff      	adds	r5, #255	@ 0xff
 8000c28:	290a      	cmp	r1, #10
 8000c2a:	dca5      	bgt.n	8000b78 <__aeabi_fmul+0xbc>
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	407e      	eors	r6, r7
 8000c30:	e774      	b.n	8000b1c <__aeabi_fmul+0x60>
 8000c32:	230c      	movs	r3, #12
 8000c34:	4698      	mov	r8, r3
 8000c36:	3b09      	subs	r3, #9
 8000c38:	25ff      	movs	r5, #255	@ 0xff
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	e759      	b.n	8000af2 <__aeabi_fmul+0x36>
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f002 f9e8 	bl	8003014 <__clzsi2>
 8000c44:	464a      	mov	r2, r9
 8000c46:	1f43      	subs	r3, r0, #5
 8000c48:	2576      	movs	r5, #118	@ 0x76
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	426d      	negs	r5, r5
 8000c50:	4691      	mov	r9, r2
 8000c52:	4698      	mov	r8, r3
 8000c54:	469a      	mov	sl, r3
 8000c56:	1a2d      	subs	r5, r5, r0
 8000c58:	e74b      	b.n	8000af2 <__aeabi_fmul+0x36>
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	f002 f9da 	bl	8003014 <__clzsi2>
 8000c60:	4642      	mov	r2, r8
 8000c62:	1f43      	subs	r3, r0, #5
 8000c64:	409c      	lsls	r4, r3
 8000c66:	1a2b      	subs	r3, r5, r0
 8000c68:	3b76      	subs	r3, #118	@ 0x76
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	1c5d      	adds	r5, r3, #1
 8000c6e:	2a0a      	cmp	r2, #10
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fmul+0x1b8>
 8000c72:	e752      	b.n	8000b1a <__aeabi_fmul+0x5e>
 8000c74:	e780      	b.n	8000b78 <__aeabi_fmul+0xbc>
 8000c76:	2201      	movs	r2, #1
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b1b      	cmp	r3, #27
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_fmul+0x1c4>
 8000c7e:	e758      	b.n	8000b32 <__aeabi_fmul+0x76>
 8000c80:	359e      	adds	r5, #158	@ 0x9e
 8000c82:	0022      	movs	r2, r4
 8000c84:	40ac      	lsls	r4, r5
 8000c86:	40da      	lsrs	r2, r3
 8000c88:	1e63      	subs	r3, r4, #1
 8000c8a:	419c      	sbcs	r4, r3
 8000c8c:	4322      	orrs	r2, r4
 8000c8e:	0753      	lsls	r3, r2, #29
 8000c90:	d004      	beq.n	8000c9c <__aeabi_fmul+0x1e0>
 8000c92:	230f      	movs	r3, #15
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	d000      	beq.n	8000c9c <__aeabi_fmul+0x1e0>
 8000c9a:	3204      	adds	r2, #4
 8000c9c:	0153      	lsls	r3, r2, #5
 8000c9e:	d537      	bpl.n	8000d10 <__aeabi_fmul+0x254>
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	e747      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000ca6:	0c21      	lsrs	r1, r4, #16
 8000ca8:	464a      	mov	r2, r9
 8000caa:	0424      	lsls	r4, r4, #16
 8000cac:	0c24      	lsrs	r4, r4, #16
 8000cae:	0027      	movs	r7, r4
 8000cb0:	0c10      	lsrs	r0, r2, #16
 8000cb2:	0412      	lsls	r2, r2, #16
 8000cb4:	0c12      	lsrs	r2, r2, #16
 8000cb6:	4344      	muls	r4, r0
 8000cb8:	4357      	muls	r7, r2
 8000cba:	4348      	muls	r0, r1
 8000cbc:	4351      	muls	r1, r2
 8000cbe:	0c3a      	lsrs	r2, r7, #16
 8000cc0:	1909      	adds	r1, r1, r4
 8000cc2:	1852      	adds	r2, r2, r1
 8000cc4:	4294      	cmp	r4, r2
 8000cc6:	d903      	bls.n	8000cd0 <__aeabi_fmul+0x214>
 8000cc8:	2180      	movs	r1, #128	@ 0x80
 8000cca:	0249      	lsls	r1, r1, #9
 8000ccc:	468c      	mov	ip, r1
 8000cce:	4460      	add	r0, ip
 8000cd0:	043f      	lsls	r7, r7, #16
 8000cd2:	0411      	lsls	r1, r2, #16
 8000cd4:	0c3f      	lsrs	r7, r7, #16
 8000cd6:	19c9      	adds	r1, r1, r7
 8000cd8:	018c      	lsls	r4, r1, #6
 8000cda:	1e67      	subs	r7, r4, #1
 8000cdc:	41bc      	sbcs	r4, r7
 8000cde:	0c12      	lsrs	r2, r2, #16
 8000ce0:	0e89      	lsrs	r1, r1, #26
 8000ce2:	1812      	adds	r2, r2, r0
 8000ce4:	430c      	orrs	r4, r1
 8000ce6:	0192      	lsls	r2, r2, #6
 8000ce8:	4314      	orrs	r4, r2
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	d50e      	bpl.n	8000d0c <__aeabi_fmul+0x250>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	0862      	lsrs	r2, r4, #1
 8000cf2:	401c      	ands	r4, r3
 8000cf4:	4314      	orrs	r4, r2
 8000cf6:	e749      	b.n	8000b8c <__aeabi_fmul+0xd0>
 8000cf8:	003e      	movs	r6, r7
 8000cfa:	46a1      	mov	r9, r4
 8000cfc:	2280      	movs	r2, #128	@ 0x80
 8000cfe:	464b      	mov	r3, r9
 8000d00:	03d2      	lsls	r2, r2, #15
 8000d02:	431a      	orrs	r2, r3
 8000d04:	0252      	lsls	r2, r2, #9
 8000d06:	20ff      	movs	r0, #255	@ 0xff
 8000d08:	0a52      	lsrs	r2, r2, #9
 8000d0a:	e714      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000d0c:	001d      	movs	r5, r3
 8000d0e:	e73d      	b.n	8000b8c <__aeabi_fmul+0xd0>
 8000d10:	0192      	lsls	r2, r2, #6
 8000d12:	2000      	movs	r0, #0
 8000d14:	0a52      	lsrs	r2, r2, #9
 8000d16:	e70e      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000d18:	290f      	cmp	r1, #15
 8000d1a:	d1ed      	bne.n	8000cf8 <__aeabi_fmul+0x23c>
 8000d1c:	2280      	movs	r2, #128	@ 0x80
 8000d1e:	464b      	mov	r3, r9
 8000d20:	03d2      	lsls	r2, r2, #15
 8000d22:	4213      	tst	r3, r2
 8000d24:	d0ea      	beq.n	8000cfc <__aeabi_fmul+0x240>
 8000d26:	4214      	tst	r4, r2
 8000d28:	d1e8      	bne.n	8000cfc <__aeabi_fmul+0x240>
 8000d2a:	003e      	movs	r6, r7
 8000d2c:	20ff      	movs	r0, #255	@ 0xff
 8000d2e:	4322      	orrs	r2, r4
 8000d30:	e701      	b.n	8000b36 <__aeabi_fmul+0x7a>
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	f7ffffff 	.word	0xf7ffffff

08000d38 <__aeabi_fsub>:
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	4647      	mov	r7, r8
 8000d3c:	46ce      	mov	lr, r9
 8000d3e:	024e      	lsls	r6, r1, #9
 8000d40:	0243      	lsls	r3, r0, #9
 8000d42:	0045      	lsls	r5, r0, #1
 8000d44:	0a72      	lsrs	r2, r6, #9
 8000d46:	0fc4      	lsrs	r4, r0, #31
 8000d48:	0048      	lsls	r0, r1, #1
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	4694      	mov	ip, r2
 8000d4e:	0a5f      	lsrs	r7, r3, #9
 8000d50:	0e2d      	lsrs	r5, r5, #24
 8000d52:	099b      	lsrs	r3, r3, #6
 8000d54:	0e00      	lsrs	r0, r0, #24
 8000d56:	0fc9      	lsrs	r1, r1, #31
 8000d58:	09b6      	lsrs	r6, r6, #6
 8000d5a:	28ff      	cmp	r0, #255	@ 0xff
 8000d5c:	d024      	beq.n	8000da8 <__aeabi_fsub+0x70>
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4051      	eors	r1, r2
 8000d62:	1a2a      	subs	r2, r5, r0
 8000d64:	428c      	cmp	r4, r1
 8000d66:	d00f      	beq.n	8000d88 <__aeabi_fsub+0x50>
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	dc00      	bgt.n	8000d6e <__aeabi_fsub+0x36>
 8000d6c:	e16a      	b.n	8001044 <__aeabi_fsub+0x30c>
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	d135      	bne.n	8000dde <__aeabi_fsub+0xa6>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x40>
 8000d76:	e0a2      	b.n	8000ebe <__aeabi_fsub+0x186>
 8000d78:	1e51      	subs	r1, r2, #1
 8000d7a:	2a01      	cmp	r2, #1
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_fsub+0x48>
 8000d7e:	e124      	b.n	8000fca <__aeabi_fsub+0x292>
 8000d80:	2aff      	cmp	r2, #255	@ 0xff
 8000d82:	d021      	beq.n	8000dc8 <__aeabi_fsub+0x90>
 8000d84:	000a      	movs	r2, r1
 8000d86:	e02f      	b.n	8000de8 <__aeabi_fsub+0xb0>
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_fsub+0x56>
 8000d8c:	e167      	b.n	800105e <__aeabi_fsub+0x326>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d05e      	beq.n	8000e50 <__aeabi_fsub+0x118>
 8000d92:	2dff      	cmp	r5, #255	@ 0xff
 8000d94:	d018      	beq.n	8000dc8 <__aeabi_fsub+0x90>
 8000d96:	2180      	movs	r1, #128	@ 0x80
 8000d98:	04c9      	lsls	r1, r1, #19
 8000d9a:	430e      	orrs	r6, r1
 8000d9c:	2a1b      	cmp	r2, #27
 8000d9e:	dc00      	bgt.n	8000da2 <__aeabi_fsub+0x6a>
 8000da0:	e076      	b.n	8000e90 <__aeabi_fsub+0x158>
 8000da2:	002a      	movs	r2, r5
 8000da4:	3301      	adds	r3, #1
 8000da6:	e032      	b.n	8000e0e <__aeabi_fsub+0xd6>
 8000da8:	002a      	movs	r2, r5
 8000daa:	3aff      	subs	r2, #255	@ 0xff
 8000dac:	4691      	mov	r9, r2
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d042      	beq.n	8000e38 <__aeabi_fsub+0x100>
 8000db2:	428c      	cmp	r4, r1
 8000db4:	d055      	beq.n	8000e62 <__aeabi_fsub+0x12a>
 8000db6:	464a      	mov	r2, r9
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_fsub+0x86>
 8000dbc:	e09c      	b.n	8000ef8 <__aeabi_fsub+0x1c0>
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_fsub+0x8c>
 8000dc2:	e077      	b.n	8000eb4 <__aeabi_fsub+0x17c>
 8000dc4:	000c      	movs	r4, r1
 8000dc6:	0033      	movs	r3, r6
 8000dc8:	08db      	lsrs	r3, r3, #3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_fsub+0x98>
 8000dce:	e06e      	b.n	8000eae <__aeabi_fsub+0x176>
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	03d2      	lsls	r2, r2, #15
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	025b      	lsls	r3, r3, #9
 8000dd8:	20ff      	movs	r0, #255	@ 0xff
 8000dda:	0a5b      	lsrs	r3, r3, #9
 8000ddc:	e024      	b.n	8000e28 <__aeabi_fsub+0xf0>
 8000dde:	2dff      	cmp	r5, #255	@ 0xff
 8000de0:	d0f2      	beq.n	8000dc8 <__aeabi_fsub+0x90>
 8000de2:	2180      	movs	r1, #128	@ 0x80
 8000de4:	04c9      	lsls	r1, r1, #19
 8000de6:	430e      	orrs	r6, r1
 8000de8:	2101      	movs	r1, #1
 8000dea:	2a1b      	cmp	r2, #27
 8000dec:	dc08      	bgt.n	8000e00 <__aeabi_fsub+0xc8>
 8000dee:	0031      	movs	r1, r6
 8000df0:	2020      	movs	r0, #32
 8000df2:	40d1      	lsrs	r1, r2
 8000df4:	1a82      	subs	r2, r0, r2
 8000df6:	4096      	lsls	r6, r2
 8000df8:	0032      	movs	r2, r6
 8000dfa:	1e50      	subs	r0, r2, #1
 8000dfc:	4182      	sbcs	r2, r0
 8000dfe:	4311      	orrs	r1, r2
 8000e00:	1a5b      	subs	r3, r3, r1
 8000e02:	015a      	lsls	r2, r3, #5
 8000e04:	d460      	bmi.n	8000ec8 <__aeabi_fsub+0x190>
 8000e06:	2107      	movs	r1, #7
 8000e08:	002a      	movs	r2, r5
 8000e0a:	4019      	ands	r1, r3
 8000e0c:	d057      	beq.n	8000ebe <__aeabi_fsub+0x186>
 8000e0e:	210f      	movs	r1, #15
 8000e10:	4019      	ands	r1, r3
 8000e12:	2904      	cmp	r1, #4
 8000e14:	d000      	beq.n	8000e18 <__aeabi_fsub+0xe0>
 8000e16:	3304      	adds	r3, #4
 8000e18:	0159      	lsls	r1, r3, #5
 8000e1a:	d550      	bpl.n	8000ebe <__aeabi_fsub+0x186>
 8000e1c:	1c50      	adds	r0, r2, #1
 8000e1e:	2afe      	cmp	r2, #254	@ 0xfe
 8000e20:	d045      	beq.n	8000eae <__aeabi_fsub+0x176>
 8000e22:	019b      	lsls	r3, r3, #6
 8000e24:	b2c0      	uxtb	r0, r0
 8000e26:	0a5b      	lsrs	r3, r3, #9
 8000e28:	05c0      	lsls	r0, r0, #23
 8000e2a:	4318      	orrs	r0, r3
 8000e2c:	07e4      	lsls	r4, r4, #31
 8000e2e:	4320      	orrs	r0, r4
 8000e30:	bcc0      	pop	{r6, r7}
 8000e32:	46b9      	mov	r9, r7
 8000e34:	46b0      	mov	r8, r6
 8000e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4051      	eors	r1, r2
 8000e3c:	428c      	cmp	r4, r1
 8000e3e:	d1ba      	bne.n	8000db6 <__aeabi_fsub+0x7e>
 8000e40:	464a      	mov	r2, r9
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d010      	beq.n	8000e68 <__aeabi_fsub+0x130>
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d100      	bne.n	8000e4c <__aeabi_fsub+0x114>
 8000e4a:	e098      	b.n	8000f7e <__aeabi_fsub+0x246>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e7bb      	b.n	8000dc8 <__aeabi_fsub+0x90>
 8000e50:	2e00      	cmp	r6, #0
 8000e52:	d034      	beq.n	8000ebe <__aeabi_fsub+0x186>
 8000e54:	1e51      	subs	r1, r2, #1
 8000e56:	2a01      	cmp	r2, #1
 8000e58:	d06e      	beq.n	8000f38 <__aeabi_fsub+0x200>
 8000e5a:	2aff      	cmp	r2, #255	@ 0xff
 8000e5c:	d0b4      	beq.n	8000dc8 <__aeabi_fsub+0x90>
 8000e5e:	000a      	movs	r2, r1
 8000e60:	e79c      	b.n	8000d9c <__aeabi_fsub+0x64>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	d000      	beq.n	8000e68 <__aeabi_fsub+0x130>
 8000e66:	e088      	b.n	8000f7a <__aeabi_fsub+0x242>
 8000e68:	20fe      	movs	r0, #254	@ 0xfe
 8000e6a:	1c6a      	adds	r2, r5, #1
 8000e6c:	4210      	tst	r0, r2
 8000e6e:	d000      	beq.n	8000e72 <__aeabi_fsub+0x13a>
 8000e70:	e092      	b.n	8000f98 <__aeabi_fsub+0x260>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d000      	beq.n	8000e78 <__aeabi_fsub+0x140>
 8000e76:	e0a4      	b.n	8000fc2 <__aeabi_fsub+0x28a>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_fsub+0x146>
 8000e7c:	e0cb      	b.n	8001016 <__aeabi_fsub+0x2de>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d000      	beq.n	8000e84 <__aeabi_fsub+0x14c>
 8000e82:	e0ca      	b.n	800101a <__aeabi_fsub+0x2e2>
 8000e84:	2200      	movs	r2, #0
 8000e86:	08db      	lsrs	r3, r3, #3
 8000e88:	025b      	lsls	r3, r3, #9
 8000e8a:	0a5b      	lsrs	r3, r3, #9
 8000e8c:	b2d0      	uxtb	r0, r2
 8000e8e:	e7cb      	b.n	8000e28 <__aeabi_fsub+0xf0>
 8000e90:	0031      	movs	r1, r6
 8000e92:	2020      	movs	r0, #32
 8000e94:	40d1      	lsrs	r1, r2
 8000e96:	1a82      	subs	r2, r0, r2
 8000e98:	4096      	lsls	r6, r2
 8000e9a:	0032      	movs	r2, r6
 8000e9c:	1e50      	subs	r0, r2, #1
 8000e9e:	4182      	sbcs	r2, r0
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	189b      	adds	r3, r3, r2
 8000ea4:	015a      	lsls	r2, r3, #5
 8000ea6:	d5ae      	bpl.n	8000e06 <__aeabi_fsub+0xce>
 8000ea8:	1c6a      	adds	r2, r5, #1
 8000eaa:	2dfe      	cmp	r5, #254	@ 0xfe
 8000eac:	d14a      	bne.n	8000f44 <__aeabi_fsub+0x20c>
 8000eae:	20ff      	movs	r0, #255	@ 0xff
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e7b9      	b.n	8000e28 <__aeabi_fsub+0xf0>
 8000eb4:	22ff      	movs	r2, #255	@ 0xff
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d14b      	bne.n	8000f52 <__aeabi_fsub+0x21a>
 8000eba:	000c      	movs	r4, r1
 8000ebc:	0033      	movs	r3, r6
 8000ebe:	08db      	lsrs	r3, r3, #3
 8000ec0:	2aff      	cmp	r2, #255	@ 0xff
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x18e>
 8000ec4:	e781      	b.n	8000dca <__aeabi_fsub+0x92>
 8000ec6:	e7df      	b.n	8000e88 <__aeabi_fsub+0x150>
 8000ec8:	019f      	lsls	r7, r3, #6
 8000eca:	09bf      	lsrs	r7, r7, #6
 8000ecc:	0038      	movs	r0, r7
 8000ece:	f002 f8a1 	bl	8003014 <__clzsi2>
 8000ed2:	3805      	subs	r0, #5
 8000ed4:	4087      	lsls	r7, r0
 8000ed6:	4285      	cmp	r5, r0
 8000ed8:	dc21      	bgt.n	8000f1e <__aeabi_fsub+0x1e6>
 8000eda:	003b      	movs	r3, r7
 8000edc:	2120      	movs	r1, #32
 8000ede:	1b42      	subs	r2, r0, r5
 8000ee0:	3201      	adds	r2, #1
 8000ee2:	40d3      	lsrs	r3, r2
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	4097      	lsls	r7, r2
 8000ee8:	1e7a      	subs	r2, r7, #1
 8000eea:	4197      	sbcs	r7, r2
 8000eec:	2200      	movs	r2, #0
 8000eee:	433b      	orrs	r3, r7
 8000ef0:	0759      	lsls	r1, r3, #29
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_fsub+0x1be>
 8000ef4:	e78b      	b.n	8000e0e <__aeabi_fsub+0xd6>
 8000ef6:	e78f      	b.n	8000e18 <__aeabi_fsub+0xe0>
 8000ef8:	20fe      	movs	r0, #254	@ 0xfe
 8000efa:	1c6a      	adds	r2, r5, #1
 8000efc:	4210      	tst	r0, r2
 8000efe:	d112      	bne.n	8000f26 <__aeabi_fsub+0x1ee>
 8000f00:	2d00      	cmp	r5, #0
 8000f02:	d152      	bne.n	8000faa <__aeabi_fsub+0x272>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d07c      	beq.n	8001002 <__aeabi_fsub+0x2ca>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d0bb      	beq.n	8000e84 <__aeabi_fsub+0x14c>
 8000f0c:	1b9a      	subs	r2, r3, r6
 8000f0e:	0150      	lsls	r0, r2, #5
 8000f10:	d400      	bmi.n	8000f14 <__aeabi_fsub+0x1dc>
 8000f12:	e08b      	b.n	800102c <__aeabi_fsub+0x2f4>
 8000f14:	2401      	movs	r4, #1
 8000f16:	2200      	movs	r2, #0
 8000f18:	1af3      	subs	r3, r6, r3
 8000f1a:	400c      	ands	r4, r1
 8000f1c:	e7e8      	b.n	8000ef0 <__aeabi_fsub+0x1b8>
 8000f1e:	4b56      	ldr	r3, [pc, #344]	@ (8001078 <__aeabi_fsub+0x340>)
 8000f20:	1a2a      	subs	r2, r5, r0
 8000f22:	403b      	ands	r3, r7
 8000f24:	e7e4      	b.n	8000ef0 <__aeabi_fsub+0x1b8>
 8000f26:	1b9f      	subs	r7, r3, r6
 8000f28:	017a      	lsls	r2, r7, #5
 8000f2a:	d446      	bmi.n	8000fba <__aeabi_fsub+0x282>
 8000f2c:	2f00      	cmp	r7, #0
 8000f2e:	d1cd      	bne.n	8000ecc <__aeabi_fsub+0x194>
 8000f30:	2400      	movs	r4, #0
 8000f32:	2000      	movs	r0, #0
 8000f34:	2300      	movs	r3, #0
 8000f36:	e777      	b.n	8000e28 <__aeabi_fsub+0xf0>
 8000f38:	199b      	adds	r3, r3, r6
 8000f3a:	2501      	movs	r5, #1
 8000f3c:	3201      	adds	r2, #1
 8000f3e:	0159      	lsls	r1, r3, #5
 8000f40:	d400      	bmi.n	8000f44 <__aeabi_fsub+0x20c>
 8000f42:	e760      	b.n	8000e06 <__aeabi_fsub+0xce>
 8000f44:	2101      	movs	r1, #1
 8000f46:	484d      	ldr	r0, [pc, #308]	@ (800107c <__aeabi_fsub+0x344>)
 8000f48:	4019      	ands	r1, r3
 8000f4a:	085b      	lsrs	r3, r3, #1
 8000f4c:	4003      	ands	r3, r0
 8000f4e:	430b      	orrs	r3, r1
 8000f50:	e7ce      	b.n	8000ef0 <__aeabi_fsub+0x1b8>
 8000f52:	1e57      	subs	r7, r2, #1
 8000f54:	2a01      	cmp	r2, #1
 8000f56:	d05a      	beq.n	800100e <__aeabi_fsub+0x2d6>
 8000f58:	000c      	movs	r4, r1
 8000f5a:	2aff      	cmp	r2, #255	@ 0xff
 8000f5c:	d033      	beq.n	8000fc6 <__aeabi_fsub+0x28e>
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2f1b      	cmp	r7, #27
 8000f62:	dc07      	bgt.n	8000f74 <__aeabi_fsub+0x23c>
 8000f64:	2120      	movs	r1, #32
 8000f66:	1bc9      	subs	r1, r1, r7
 8000f68:	001a      	movs	r2, r3
 8000f6a:	408b      	lsls	r3, r1
 8000f6c:	40fa      	lsrs	r2, r7
 8000f6e:	1e59      	subs	r1, r3, #1
 8000f70:	418b      	sbcs	r3, r1
 8000f72:	431a      	orrs	r2, r3
 8000f74:	0005      	movs	r5, r0
 8000f76:	1ab3      	subs	r3, r6, r2
 8000f78:	e743      	b.n	8000e02 <__aeabi_fsub+0xca>
 8000f7a:	2d00      	cmp	r5, #0
 8000f7c:	d123      	bne.n	8000fc6 <__aeabi_fsub+0x28e>
 8000f7e:	22ff      	movs	r2, #255	@ 0xff
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d09b      	beq.n	8000ebc <__aeabi_fsub+0x184>
 8000f84:	1e51      	subs	r1, r2, #1
 8000f86:	2a01      	cmp	r2, #1
 8000f88:	d0d6      	beq.n	8000f38 <__aeabi_fsub+0x200>
 8000f8a:	2aff      	cmp	r2, #255	@ 0xff
 8000f8c:	d01b      	beq.n	8000fc6 <__aeabi_fsub+0x28e>
 8000f8e:	291b      	cmp	r1, #27
 8000f90:	dd2c      	ble.n	8000fec <__aeabi_fsub+0x2b4>
 8000f92:	0002      	movs	r2, r0
 8000f94:	1c73      	adds	r3, r6, #1
 8000f96:	e73a      	b.n	8000e0e <__aeabi_fsub+0xd6>
 8000f98:	2aff      	cmp	r2, #255	@ 0xff
 8000f9a:	d088      	beq.n	8000eae <__aeabi_fsub+0x176>
 8000f9c:	199b      	adds	r3, r3, r6
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	0759      	lsls	r1, r3, #29
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_fsub+0x26e>
 8000fa4:	e733      	b.n	8000e0e <__aeabi_fsub+0xd6>
 8000fa6:	08db      	lsrs	r3, r3, #3
 8000fa8:	e76e      	b.n	8000e88 <__aeabi_fsub+0x150>
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d110      	bne.n	8000fd0 <__aeabi_fsub+0x298>
 8000fae:	2e00      	cmp	r6, #0
 8000fb0:	d043      	beq.n	800103a <__aeabi_fsub+0x302>
 8000fb2:	2401      	movs	r4, #1
 8000fb4:	0033      	movs	r3, r6
 8000fb6:	400c      	ands	r4, r1
 8000fb8:	e706      	b.n	8000dc8 <__aeabi_fsub+0x90>
 8000fba:	2401      	movs	r4, #1
 8000fbc:	1af7      	subs	r7, r6, r3
 8000fbe:	400c      	ands	r4, r1
 8000fc0:	e784      	b.n	8000ecc <__aeabi_fsub+0x194>
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d104      	bne.n	8000fd0 <__aeabi_fsub+0x298>
 8000fc6:	0033      	movs	r3, r6
 8000fc8:	e6fe      	b.n	8000dc8 <__aeabi_fsub+0x90>
 8000fca:	2501      	movs	r5, #1
 8000fcc:	1b9b      	subs	r3, r3, r6
 8000fce:	e718      	b.n	8000e02 <__aeabi_fsub+0xca>
 8000fd0:	2e00      	cmp	r6, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_fsub+0x29e>
 8000fd4:	e6f8      	b.n	8000dc8 <__aeabi_fsub+0x90>
 8000fd6:	2280      	movs	r2, #128	@ 0x80
 8000fd8:	03d2      	lsls	r2, r2, #15
 8000fda:	4297      	cmp	r7, r2
 8000fdc:	d304      	bcc.n	8000fe8 <__aeabi_fsub+0x2b0>
 8000fde:	4594      	cmp	ip, r2
 8000fe0:	d202      	bcs.n	8000fe8 <__aeabi_fsub+0x2b0>
 8000fe2:	2401      	movs	r4, #1
 8000fe4:	0033      	movs	r3, r6
 8000fe6:	400c      	ands	r4, r1
 8000fe8:	08db      	lsrs	r3, r3, #3
 8000fea:	e6f1      	b.n	8000dd0 <__aeabi_fsub+0x98>
 8000fec:	001a      	movs	r2, r3
 8000fee:	2520      	movs	r5, #32
 8000ff0:	40ca      	lsrs	r2, r1
 8000ff2:	1a69      	subs	r1, r5, r1
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	1e59      	subs	r1, r3, #1
 8000ff8:	418b      	sbcs	r3, r1
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	0005      	movs	r5, r0
 8000ffe:	199b      	adds	r3, r3, r6
 8001000:	e750      	b.n	8000ea4 <__aeabi_fsub+0x16c>
 8001002:	2e00      	cmp	r6, #0
 8001004:	d094      	beq.n	8000f30 <__aeabi_fsub+0x1f8>
 8001006:	2401      	movs	r4, #1
 8001008:	0033      	movs	r3, r6
 800100a:	400c      	ands	r4, r1
 800100c:	e73a      	b.n	8000e84 <__aeabi_fsub+0x14c>
 800100e:	000c      	movs	r4, r1
 8001010:	2501      	movs	r5, #1
 8001012:	1af3      	subs	r3, r6, r3
 8001014:	e6f5      	b.n	8000e02 <__aeabi_fsub+0xca>
 8001016:	0033      	movs	r3, r6
 8001018:	e734      	b.n	8000e84 <__aeabi_fsub+0x14c>
 800101a:	199b      	adds	r3, r3, r6
 800101c:	2200      	movs	r2, #0
 800101e:	0159      	lsls	r1, r3, #5
 8001020:	d5c1      	bpl.n	8000fa6 <__aeabi_fsub+0x26e>
 8001022:	4a15      	ldr	r2, [pc, #84]	@ (8001078 <__aeabi_fsub+0x340>)
 8001024:	4013      	ands	r3, r2
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	2201      	movs	r2, #1
 800102a:	e72d      	b.n	8000e88 <__aeabi_fsub+0x150>
 800102c:	2a00      	cmp	r2, #0
 800102e:	d100      	bne.n	8001032 <__aeabi_fsub+0x2fa>
 8001030:	e77e      	b.n	8000f30 <__aeabi_fsub+0x1f8>
 8001032:	0013      	movs	r3, r2
 8001034:	2200      	movs	r2, #0
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	e726      	b.n	8000e88 <__aeabi_fsub+0x150>
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	2400      	movs	r4, #0
 800103e:	20ff      	movs	r0, #255	@ 0xff
 8001040:	03db      	lsls	r3, r3, #15
 8001042:	e6f1      	b.n	8000e28 <__aeabi_fsub+0xf0>
 8001044:	2a00      	cmp	r2, #0
 8001046:	d100      	bne.n	800104a <__aeabi_fsub+0x312>
 8001048:	e756      	b.n	8000ef8 <__aeabi_fsub+0x1c0>
 800104a:	1b47      	subs	r7, r0, r5
 800104c:	003a      	movs	r2, r7
 800104e:	2d00      	cmp	r5, #0
 8001050:	d100      	bne.n	8001054 <__aeabi_fsub+0x31c>
 8001052:	e730      	b.n	8000eb6 <__aeabi_fsub+0x17e>
 8001054:	2280      	movs	r2, #128	@ 0x80
 8001056:	04d2      	lsls	r2, r2, #19
 8001058:	000c      	movs	r4, r1
 800105a:	4313      	orrs	r3, r2
 800105c:	e77f      	b.n	8000f5e <__aeabi_fsub+0x226>
 800105e:	2a00      	cmp	r2, #0
 8001060:	d100      	bne.n	8001064 <__aeabi_fsub+0x32c>
 8001062:	e701      	b.n	8000e68 <__aeabi_fsub+0x130>
 8001064:	1b41      	subs	r1, r0, r5
 8001066:	2d00      	cmp	r5, #0
 8001068:	d101      	bne.n	800106e <__aeabi_fsub+0x336>
 800106a:	000a      	movs	r2, r1
 800106c:	e788      	b.n	8000f80 <__aeabi_fsub+0x248>
 800106e:	2280      	movs	r2, #128	@ 0x80
 8001070:	04d2      	lsls	r2, r2, #19
 8001072:	4313      	orrs	r3, r2
 8001074:	e78b      	b.n	8000f8e <__aeabi_fsub+0x256>
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	fbffffff 	.word	0xfbffffff
 800107c:	7dffffff 	.word	0x7dffffff

08001080 <__aeabi_ui2f>:
 8001080:	b570      	push	{r4, r5, r6, lr}
 8001082:	1e04      	subs	r4, r0, #0
 8001084:	d00e      	beq.n	80010a4 <__aeabi_ui2f+0x24>
 8001086:	f001 ffc5 	bl	8003014 <__clzsi2>
 800108a:	239e      	movs	r3, #158	@ 0x9e
 800108c:	0001      	movs	r1, r0
 800108e:	1a1b      	subs	r3, r3, r0
 8001090:	2b96      	cmp	r3, #150	@ 0x96
 8001092:	dc0c      	bgt.n	80010ae <__aeabi_ui2f+0x2e>
 8001094:	2808      	cmp	r0, #8
 8001096:	d02f      	beq.n	80010f8 <__aeabi_ui2f+0x78>
 8001098:	3908      	subs	r1, #8
 800109a:	408c      	lsls	r4, r1
 800109c:	0264      	lsls	r4, r4, #9
 800109e:	0a64      	lsrs	r4, r4, #9
 80010a0:	b2d8      	uxtb	r0, r3
 80010a2:	e001      	b.n	80010a8 <__aeabi_ui2f+0x28>
 80010a4:	2000      	movs	r0, #0
 80010a6:	2400      	movs	r4, #0
 80010a8:	05c0      	lsls	r0, r0, #23
 80010aa:	4320      	orrs	r0, r4
 80010ac:	bd70      	pop	{r4, r5, r6, pc}
 80010ae:	2b99      	cmp	r3, #153	@ 0x99
 80010b0:	dc16      	bgt.n	80010e0 <__aeabi_ui2f+0x60>
 80010b2:	1f42      	subs	r2, r0, #5
 80010b4:	2805      	cmp	r0, #5
 80010b6:	d000      	beq.n	80010ba <__aeabi_ui2f+0x3a>
 80010b8:	4094      	lsls	r4, r2
 80010ba:	0022      	movs	r2, r4
 80010bc:	4810      	ldr	r0, [pc, #64]	@ (8001100 <__aeabi_ui2f+0x80>)
 80010be:	4002      	ands	r2, r0
 80010c0:	0765      	lsls	r5, r4, #29
 80010c2:	d009      	beq.n	80010d8 <__aeabi_ui2f+0x58>
 80010c4:	250f      	movs	r5, #15
 80010c6:	402c      	ands	r4, r5
 80010c8:	2c04      	cmp	r4, #4
 80010ca:	d005      	beq.n	80010d8 <__aeabi_ui2f+0x58>
 80010cc:	3204      	adds	r2, #4
 80010ce:	0154      	lsls	r4, r2, #5
 80010d0:	d502      	bpl.n	80010d8 <__aeabi_ui2f+0x58>
 80010d2:	239f      	movs	r3, #159	@ 0x9f
 80010d4:	4002      	ands	r2, r0
 80010d6:	1a5b      	subs	r3, r3, r1
 80010d8:	0192      	lsls	r2, r2, #6
 80010da:	0a54      	lsrs	r4, r2, #9
 80010dc:	b2d8      	uxtb	r0, r3
 80010de:	e7e3      	b.n	80010a8 <__aeabi_ui2f+0x28>
 80010e0:	0002      	movs	r2, r0
 80010e2:	0020      	movs	r0, r4
 80010e4:	321b      	adds	r2, #27
 80010e6:	4090      	lsls	r0, r2
 80010e8:	0002      	movs	r2, r0
 80010ea:	1e50      	subs	r0, r2, #1
 80010ec:	4182      	sbcs	r2, r0
 80010ee:	2005      	movs	r0, #5
 80010f0:	1a40      	subs	r0, r0, r1
 80010f2:	40c4      	lsrs	r4, r0
 80010f4:	4314      	orrs	r4, r2
 80010f6:	e7e0      	b.n	80010ba <__aeabi_ui2f+0x3a>
 80010f8:	0264      	lsls	r4, r4, #9
 80010fa:	2096      	movs	r0, #150	@ 0x96
 80010fc:	0a64      	lsrs	r4, r4, #9
 80010fe:	e7d3      	b.n	80010a8 <__aeabi_ui2f+0x28>
 8001100:	fbffffff 	.word	0xfbffffff

08001104 <__aeabi_dadd>:
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	4657      	mov	r7, sl
 8001108:	464e      	mov	r6, r9
 800110a:	4645      	mov	r5, r8
 800110c:	46de      	mov	lr, fp
 800110e:	b5e0      	push	{r5, r6, r7, lr}
 8001110:	b083      	sub	sp, #12
 8001112:	9000      	str	r0, [sp, #0]
 8001114:	9101      	str	r1, [sp, #4]
 8001116:	030c      	lsls	r4, r1, #12
 8001118:	004f      	lsls	r7, r1, #1
 800111a:	0fce      	lsrs	r6, r1, #31
 800111c:	0a61      	lsrs	r1, r4, #9
 800111e:	9c00      	ldr	r4, [sp, #0]
 8001120:	031d      	lsls	r5, r3, #12
 8001122:	0f64      	lsrs	r4, r4, #29
 8001124:	430c      	orrs	r4, r1
 8001126:	9900      	ldr	r1, [sp, #0]
 8001128:	9200      	str	r2, [sp, #0]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	00c8      	lsls	r0, r1, #3
 800112e:	0059      	lsls	r1, r3, #1
 8001130:	0d4b      	lsrs	r3, r1, #21
 8001132:	4699      	mov	r9, r3
 8001134:	9a00      	ldr	r2, [sp, #0]
 8001136:	9b01      	ldr	r3, [sp, #4]
 8001138:	0a6d      	lsrs	r5, r5, #9
 800113a:	0fd9      	lsrs	r1, r3, #31
 800113c:	0f53      	lsrs	r3, r2, #29
 800113e:	432b      	orrs	r3, r5
 8001140:	469a      	mov	sl, r3
 8001142:	9b00      	ldr	r3, [sp, #0]
 8001144:	0d7f      	lsrs	r7, r7, #21
 8001146:	00da      	lsls	r2, r3, #3
 8001148:	4694      	mov	ip, r2
 800114a:	464a      	mov	r2, r9
 800114c:	46b0      	mov	r8, r6
 800114e:	1aba      	subs	r2, r7, r2
 8001150:	428e      	cmp	r6, r1
 8001152:	d100      	bne.n	8001156 <__aeabi_dadd+0x52>
 8001154:	e0b0      	b.n	80012b8 <__aeabi_dadd+0x1b4>
 8001156:	2a00      	cmp	r2, #0
 8001158:	dc00      	bgt.n	800115c <__aeabi_dadd+0x58>
 800115a:	e078      	b.n	800124e <__aeabi_dadd+0x14a>
 800115c:	4649      	mov	r1, r9
 800115e:	2900      	cmp	r1, #0
 8001160:	d100      	bne.n	8001164 <__aeabi_dadd+0x60>
 8001162:	e0e9      	b.n	8001338 <__aeabi_dadd+0x234>
 8001164:	49c9      	ldr	r1, [pc, #804]	@ (800148c <__aeabi_dadd+0x388>)
 8001166:	428f      	cmp	r7, r1
 8001168:	d100      	bne.n	800116c <__aeabi_dadd+0x68>
 800116a:	e195      	b.n	8001498 <__aeabi_dadd+0x394>
 800116c:	2501      	movs	r5, #1
 800116e:	2a38      	cmp	r2, #56	@ 0x38
 8001170:	dc16      	bgt.n	80011a0 <__aeabi_dadd+0x9c>
 8001172:	2180      	movs	r1, #128	@ 0x80
 8001174:	4653      	mov	r3, sl
 8001176:	0409      	lsls	r1, r1, #16
 8001178:	430b      	orrs	r3, r1
 800117a:	469a      	mov	sl, r3
 800117c:	2a1f      	cmp	r2, #31
 800117e:	dd00      	ble.n	8001182 <__aeabi_dadd+0x7e>
 8001180:	e1e7      	b.n	8001552 <__aeabi_dadd+0x44e>
 8001182:	2120      	movs	r1, #32
 8001184:	4655      	mov	r5, sl
 8001186:	1a8b      	subs	r3, r1, r2
 8001188:	4661      	mov	r1, ip
 800118a:	409d      	lsls	r5, r3
 800118c:	40d1      	lsrs	r1, r2
 800118e:	430d      	orrs	r5, r1
 8001190:	4661      	mov	r1, ip
 8001192:	4099      	lsls	r1, r3
 8001194:	1e4b      	subs	r3, r1, #1
 8001196:	4199      	sbcs	r1, r3
 8001198:	4653      	mov	r3, sl
 800119a:	40d3      	lsrs	r3, r2
 800119c:	430d      	orrs	r5, r1
 800119e:	1ae4      	subs	r4, r4, r3
 80011a0:	1b45      	subs	r5, r0, r5
 80011a2:	42a8      	cmp	r0, r5
 80011a4:	4180      	sbcs	r0, r0
 80011a6:	4240      	negs	r0, r0
 80011a8:	1a24      	subs	r4, r4, r0
 80011aa:	0223      	lsls	r3, r4, #8
 80011ac:	d400      	bmi.n	80011b0 <__aeabi_dadd+0xac>
 80011ae:	e10f      	b.n	80013d0 <__aeabi_dadd+0x2cc>
 80011b0:	0264      	lsls	r4, r4, #9
 80011b2:	0a64      	lsrs	r4, r4, #9
 80011b4:	2c00      	cmp	r4, #0
 80011b6:	d100      	bne.n	80011ba <__aeabi_dadd+0xb6>
 80011b8:	e139      	b.n	800142e <__aeabi_dadd+0x32a>
 80011ba:	0020      	movs	r0, r4
 80011bc:	f001 ff2a 	bl	8003014 <__clzsi2>
 80011c0:	0003      	movs	r3, r0
 80011c2:	3b08      	subs	r3, #8
 80011c4:	2120      	movs	r1, #32
 80011c6:	0028      	movs	r0, r5
 80011c8:	1aca      	subs	r2, r1, r3
 80011ca:	40d0      	lsrs	r0, r2
 80011cc:	409c      	lsls	r4, r3
 80011ce:	0002      	movs	r2, r0
 80011d0:	409d      	lsls	r5, r3
 80011d2:	4322      	orrs	r2, r4
 80011d4:	429f      	cmp	r7, r3
 80011d6:	dd00      	ble.n	80011da <__aeabi_dadd+0xd6>
 80011d8:	e173      	b.n	80014c2 <__aeabi_dadd+0x3be>
 80011da:	1bd8      	subs	r0, r3, r7
 80011dc:	3001      	adds	r0, #1
 80011de:	1a09      	subs	r1, r1, r0
 80011e0:	002c      	movs	r4, r5
 80011e2:	408d      	lsls	r5, r1
 80011e4:	40c4      	lsrs	r4, r0
 80011e6:	1e6b      	subs	r3, r5, #1
 80011e8:	419d      	sbcs	r5, r3
 80011ea:	0013      	movs	r3, r2
 80011ec:	40c2      	lsrs	r2, r0
 80011ee:	408b      	lsls	r3, r1
 80011f0:	4325      	orrs	r5, r4
 80011f2:	2700      	movs	r7, #0
 80011f4:	0014      	movs	r4, r2
 80011f6:	431d      	orrs	r5, r3
 80011f8:	076b      	lsls	r3, r5, #29
 80011fa:	d009      	beq.n	8001210 <__aeabi_dadd+0x10c>
 80011fc:	230f      	movs	r3, #15
 80011fe:	402b      	ands	r3, r5
 8001200:	2b04      	cmp	r3, #4
 8001202:	d005      	beq.n	8001210 <__aeabi_dadd+0x10c>
 8001204:	1d2b      	adds	r3, r5, #4
 8001206:	42ab      	cmp	r3, r5
 8001208:	41ad      	sbcs	r5, r5
 800120a:	426d      	negs	r5, r5
 800120c:	1964      	adds	r4, r4, r5
 800120e:	001d      	movs	r5, r3
 8001210:	0223      	lsls	r3, r4, #8
 8001212:	d400      	bmi.n	8001216 <__aeabi_dadd+0x112>
 8001214:	e12d      	b.n	8001472 <__aeabi_dadd+0x36e>
 8001216:	4a9d      	ldr	r2, [pc, #628]	@ (800148c <__aeabi_dadd+0x388>)
 8001218:	3701      	adds	r7, #1
 800121a:	4297      	cmp	r7, r2
 800121c:	d100      	bne.n	8001220 <__aeabi_dadd+0x11c>
 800121e:	e0d3      	b.n	80013c8 <__aeabi_dadd+0x2c4>
 8001220:	4646      	mov	r6, r8
 8001222:	499b      	ldr	r1, [pc, #620]	@ (8001490 <__aeabi_dadd+0x38c>)
 8001224:	08ed      	lsrs	r5, r5, #3
 8001226:	4021      	ands	r1, r4
 8001228:	074a      	lsls	r2, r1, #29
 800122a:	432a      	orrs	r2, r5
 800122c:	057c      	lsls	r4, r7, #21
 800122e:	024d      	lsls	r5, r1, #9
 8001230:	0b2d      	lsrs	r5, r5, #12
 8001232:	0d64      	lsrs	r4, r4, #21
 8001234:	0524      	lsls	r4, r4, #20
 8001236:	432c      	orrs	r4, r5
 8001238:	07f6      	lsls	r6, r6, #31
 800123a:	4334      	orrs	r4, r6
 800123c:	0010      	movs	r0, r2
 800123e:	0021      	movs	r1, r4
 8001240:	b003      	add	sp, #12
 8001242:	bcf0      	pop	{r4, r5, r6, r7}
 8001244:	46bb      	mov	fp, r7
 8001246:	46b2      	mov	sl, r6
 8001248:	46a9      	mov	r9, r5
 800124a:	46a0      	mov	r8, r4
 800124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124e:	2a00      	cmp	r2, #0
 8001250:	d100      	bne.n	8001254 <__aeabi_dadd+0x150>
 8001252:	e084      	b.n	800135e <__aeabi_dadd+0x25a>
 8001254:	464a      	mov	r2, r9
 8001256:	1bd2      	subs	r2, r2, r7
 8001258:	2f00      	cmp	r7, #0
 800125a:	d000      	beq.n	800125e <__aeabi_dadd+0x15a>
 800125c:	e16d      	b.n	800153a <__aeabi_dadd+0x436>
 800125e:	0025      	movs	r5, r4
 8001260:	4305      	orrs	r5, r0
 8001262:	d100      	bne.n	8001266 <__aeabi_dadd+0x162>
 8001264:	e127      	b.n	80014b6 <__aeabi_dadd+0x3b2>
 8001266:	1e56      	subs	r6, r2, #1
 8001268:	2a01      	cmp	r2, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x16a>
 800126c:	e23b      	b.n	80016e6 <__aeabi_dadd+0x5e2>
 800126e:	4d87      	ldr	r5, [pc, #540]	@ (800148c <__aeabi_dadd+0x388>)
 8001270:	42aa      	cmp	r2, r5
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x172>
 8001274:	e26a      	b.n	800174c <__aeabi_dadd+0x648>
 8001276:	2501      	movs	r5, #1
 8001278:	2e38      	cmp	r6, #56	@ 0x38
 800127a:	dc12      	bgt.n	80012a2 <__aeabi_dadd+0x19e>
 800127c:	0032      	movs	r2, r6
 800127e:	2a1f      	cmp	r2, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x180>
 8001282:	e1f8      	b.n	8001676 <__aeabi_dadd+0x572>
 8001284:	2620      	movs	r6, #32
 8001286:	0025      	movs	r5, r4
 8001288:	1ab6      	subs	r6, r6, r2
 800128a:	0007      	movs	r7, r0
 800128c:	4653      	mov	r3, sl
 800128e:	40b0      	lsls	r0, r6
 8001290:	40d4      	lsrs	r4, r2
 8001292:	40b5      	lsls	r5, r6
 8001294:	40d7      	lsrs	r7, r2
 8001296:	1e46      	subs	r6, r0, #1
 8001298:	41b0      	sbcs	r0, r6
 800129a:	1b1b      	subs	r3, r3, r4
 800129c:	469a      	mov	sl, r3
 800129e:	433d      	orrs	r5, r7
 80012a0:	4305      	orrs	r5, r0
 80012a2:	4662      	mov	r2, ip
 80012a4:	1b55      	subs	r5, r2, r5
 80012a6:	45ac      	cmp	ip, r5
 80012a8:	4192      	sbcs	r2, r2
 80012aa:	4653      	mov	r3, sl
 80012ac:	4252      	negs	r2, r2
 80012ae:	000e      	movs	r6, r1
 80012b0:	464f      	mov	r7, r9
 80012b2:	4688      	mov	r8, r1
 80012b4:	1a9c      	subs	r4, r3, r2
 80012b6:	e778      	b.n	80011aa <__aeabi_dadd+0xa6>
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	dc00      	bgt.n	80012be <__aeabi_dadd+0x1ba>
 80012bc:	e08e      	b.n	80013dc <__aeabi_dadd+0x2d8>
 80012be:	4649      	mov	r1, r9
 80012c0:	2900      	cmp	r1, #0
 80012c2:	d175      	bne.n	80013b0 <__aeabi_dadd+0x2ac>
 80012c4:	4661      	mov	r1, ip
 80012c6:	4653      	mov	r3, sl
 80012c8:	4319      	orrs	r1, r3
 80012ca:	d100      	bne.n	80012ce <__aeabi_dadd+0x1ca>
 80012cc:	e0f6      	b.n	80014bc <__aeabi_dadd+0x3b8>
 80012ce:	1e51      	subs	r1, r2, #1
 80012d0:	2a01      	cmp	r2, #1
 80012d2:	d100      	bne.n	80012d6 <__aeabi_dadd+0x1d2>
 80012d4:	e191      	b.n	80015fa <__aeabi_dadd+0x4f6>
 80012d6:	4d6d      	ldr	r5, [pc, #436]	@ (800148c <__aeabi_dadd+0x388>)
 80012d8:	42aa      	cmp	r2, r5
 80012da:	d100      	bne.n	80012de <__aeabi_dadd+0x1da>
 80012dc:	e0dc      	b.n	8001498 <__aeabi_dadd+0x394>
 80012de:	2501      	movs	r5, #1
 80012e0:	2938      	cmp	r1, #56	@ 0x38
 80012e2:	dc14      	bgt.n	800130e <__aeabi_dadd+0x20a>
 80012e4:	000a      	movs	r2, r1
 80012e6:	2a1f      	cmp	r2, #31
 80012e8:	dd00      	ble.n	80012ec <__aeabi_dadd+0x1e8>
 80012ea:	e1a2      	b.n	8001632 <__aeabi_dadd+0x52e>
 80012ec:	2120      	movs	r1, #32
 80012ee:	4653      	mov	r3, sl
 80012f0:	1a89      	subs	r1, r1, r2
 80012f2:	408b      	lsls	r3, r1
 80012f4:	001d      	movs	r5, r3
 80012f6:	4663      	mov	r3, ip
 80012f8:	40d3      	lsrs	r3, r2
 80012fa:	431d      	orrs	r5, r3
 80012fc:	4663      	mov	r3, ip
 80012fe:	408b      	lsls	r3, r1
 8001300:	0019      	movs	r1, r3
 8001302:	1e4b      	subs	r3, r1, #1
 8001304:	4199      	sbcs	r1, r3
 8001306:	4653      	mov	r3, sl
 8001308:	40d3      	lsrs	r3, r2
 800130a:	430d      	orrs	r5, r1
 800130c:	18e4      	adds	r4, r4, r3
 800130e:	182d      	adds	r5, r5, r0
 8001310:	4285      	cmp	r5, r0
 8001312:	4180      	sbcs	r0, r0
 8001314:	4240      	negs	r0, r0
 8001316:	1824      	adds	r4, r4, r0
 8001318:	0223      	lsls	r3, r4, #8
 800131a:	d559      	bpl.n	80013d0 <__aeabi_dadd+0x2cc>
 800131c:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <__aeabi_dadd+0x388>)
 800131e:	3701      	adds	r7, #1
 8001320:	429f      	cmp	r7, r3
 8001322:	d051      	beq.n	80013c8 <__aeabi_dadd+0x2c4>
 8001324:	2101      	movs	r1, #1
 8001326:	4b5a      	ldr	r3, [pc, #360]	@ (8001490 <__aeabi_dadd+0x38c>)
 8001328:	086a      	lsrs	r2, r5, #1
 800132a:	401c      	ands	r4, r3
 800132c:	4029      	ands	r1, r5
 800132e:	430a      	orrs	r2, r1
 8001330:	07e5      	lsls	r5, r4, #31
 8001332:	4315      	orrs	r5, r2
 8001334:	0864      	lsrs	r4, r4, #1
 8001336:	e75f      	b.n	80011f8 <__aeabi_dadd+0xf4>
 8001338:	4661      	mov	r1, ip
 800133a:	4653      	mov	r3, sl
 800133c:	4319      	orrs	r1, r3
 800133e:	d100      	bne.n	8001342 <__aeabi_dadd+0x23e>
 8001340:	e0bc      	b.n	80014bc <__aeabi_dadd+0x3b8>
 8001342:	1e51      	subs	r1, r2, #1
 8001344:	2a01      	cmp	r2, #1
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x246>
 8001348:	e164      	b.n	8001614 <__aeabi_dadd+0x510>
 800134a:	4d50      	ldr	r5, [pc, #320]	@ (800148c <__aeabi_dadd+0x388>)
 800134c:	42aa      	cmp	r2, r5
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x24e>
 8001350:	e16a      	b.n	8001628 <__aeabi_dadd+0x524>
 8001352:	2501      	movs	r5, #1
 8001354:	2938      	cmp	r1, #56	@ 0x38
 8001356:	dd00      	ble.n	800135a <__aeabi_dadd+0x256>
 8001358:	e722      	b.n	80011a0 <__aeabi_dadd+0x9c>
 800135a:	000a      	movs	r2, r1
 800135c:	e70e      	b.n	800117c <__aeabi_dadd+0x78>
 800135e:	4a4d      	ldr	r2, [pc, #308]	@ (8001494 <__aeabi_dadd+0x390>)
 8001360:	1c7d      	adds	r5, r7, #1
 8001362:	4215      	tst	r5, r2
 8001364:	d000      	beq.n	8001368 <__aeabi_dadd+0x264>
 8001366:	e0d0      	b.n	800150a <__aeabi_dadd+0x406>
 8001368:	0025      	movs	r5, r4
 800136a:	4662      	mov	r2, ip
 800136c:	4653      	mov	r3, sl
 800136e:	4305      	orrs	r5, r0
 8001370:	431a      	orrs	r2, r3
 8001372:	2f00      	cmp	r7, #0
 8001374:	d000      	beq.n	8001378 <__aeabi_dadd+0x274>
 8001376:	e137      	b.n	80015e8 <__aeabi_dadd+0x4e4>
 8001378:	2d00      	cmp	r5, #0
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x27a>
 800137c:	e1a8      	b.n	80016d0 <__aeabi_dadd+0x5cc>
 800137e:	2a00      	cmp	r2, #0
 8001380:	d100      	bne.n	8001384 <__aeabi_dadd+0x280>
 8001382:	e16a      	b.n	800165a <__aeabi_dadd+0x556>
 8001384:	4663      	mov	r3, ip
 8001386:	1ac5      	subs	r5, r0, r3
 8001388:	4653      	mov	r3, sl
 800138a:	1ae2      	subs	r2, r4, r3
 800138c:	42a8      	cmp	r0, r5
 800138e:	419b      	sbcs	r3, r3
 8001390:	425b      	negs	r3, r3
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	021a      	lsls	r2, r3, #8
 8001396:	d400      	bmi.n	800139a <__aeabi_dadd+0x296>
 8001398:	e203      	b.n	80017a2 <__aeabi_dadd+0x69e>
 800139a:	4663      	mov	r3, ip
 800139c:	1a1d      	subs	r5, r3, r0
 800139e:	45ac      	cmp	ip, r5
 80013a0:	4192      	sbcs	r2, r2
 80013a2:	4653      	mov	r3, sl
 80013a4:	4252      	negs	r2, r2
 80013a6:	1b1c      	subs	r4, r3, r4
 80013a8:	000e      	movs	r6, r1
 80013aa:	4688      	mov	r8, r1
 80013ac:	1aa4      	subs	r4, r4, r2
 80013ae:	e723      	b.n	80011f8 <__aeabi_dadd+0xf4>
 80013b0:	4936      	ldr	r1, [pc, #216]	@ (800148c <__aeabi_dadd+0x388>)
 80013b2:	428f      	cmp	r7, r1
 80013b4:	d070      	beq.n	8001498 <__aeabi_dadd+0x394>
 80013b6:	2501      	movs	r5, #1
 80013b8:	2a38      	cmp	r2, #56	@ 0x38
 80013ba:	dca8      	bgt.n	800130e <__aeabi_dadd+0x20a>
 80013bc:	2180      	movs	r1, #128	@ 0x80
 80013be:	4653      	mov	r3, sl
 80013c0:	0409      	lsls	r1, r1, #16
 80013c2:	430b      	orrs	r3, r1
 80013c4:	469a      	mov	sl, r3
 80013c6:	e78e      	b.n	80012e6 <__aeabi_dadd+0x1e2>
 80013c8:	003c      	movs	r4, r7
 80013ca:	2500      	movs	r5, #0
 80013cc:	2200      	movs	r2, #0
 80013ce:	e731      	b.n	8001234 <__aeabi_dadd+0x130>
 80013d0:	2307      	movs	r3, #7
 80013d2:	402b      	ands	r3, r5
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d000      	beq.n	80013da <__aeabi_dadd+0x2d6>
 80013d8:	e710      	b.n	80011fc <__aeabi_dadd+0xf8>
 80013da:	e093      	b.n	8001504 <__aeabi_dadd+0x400>
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d074      	beq.n	80014ca <__aeabi_dadd+0x3c6>
 80013e0:	464a      	mov	r2, r9
 80013e2:	1bd2      	subs	r2, r2, r7
 80013e4:	2f00      	cmp	r7, #0
 80013e6:	d100      	bne.n	80013ea <__aeabi_dadd+0x2e6>
 80013e8:	e0c7      	b.n	800157a <__aeabi_dadd+0x476>
 80013ea:	4928      	ldr	r1, [pc, #160]	@ (800148c <__aeabi_dadd+0x388>)
 80013ec:	4589      	cmp	r9, r1
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x2ee>
 80013f0:	e185      	b.n	80016fe <__aeabi_dadd+0x5fa>
 80013f2:	2501      	movs	r5, #1
 80013f4:	2a38      	cmp	r2, #56	@ 0x38
 80013f6:	dc12      	bgt.n	800141e <__aeabi_dadd+0x31a>
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	0409      	lsls	r1, r1, #16
 80013fc:	430c      	orrs	r4, r1
 80013fe:	2a1f      	cmp	r2, #31
 8001400:	dd00      	ble.n	8001404 <__aeabi_dadd+0x300>
 8001402:	e1ab      	b.n	800175c <__aeabi_dadd+0x658>
 8001404:	2120      	movs	r1, #32
 8001406:	0025      	movs	r5, r4
 8001408:	1a89      	subs	r1, r1, r2
 800140a:	0007      	movs	r7, r0
 800140c:	4088      	lsls	r0, r1
 800140e:	408d      	lsls	r5, r1
 8001410:	40d7      	lsrs	r7, r2
 8001412:	1e41      	subs	r1, r0, #1
 8001414:	4188      	sbcs	r0, r1
 8001416:	40d4      	lsrs	r4, r2
 8001418:	433d      	orrs	r5, r7
 800141a:	4305      	orrs	r5, r0
 800141c:	44a2      	add	sl, r4
 800141e:	4465      	add	r5, ip
 8001420:	4565      	cmp	r5, ip
 8001422:	4192      	sbcs	r2, r2
 8001424:	4252      	negs	r2, r2
 8001426:	4452      	add	r2, sl
 8001428:	0014      	movs	r4, r2
 800142a:	464f      	mov	r7, r9
 800142c:	e774      	b.n	8001318 <__aeabi_dadd+0x214>
 800142e:	0028      	movs	r0, r5
 8001430:	f001 fdf0 	bl	8003014 <__clzsi2>
 8001434:	0003      	movs	r3, r0
 8001436:	3318      	adds	r3, #24
 8001438:	2b1f      	cmp	r3, #31
 800143a:	dc00      	bgt.n	800143e <__aeabi_dadd+0x33a>
 800143c:	e6c2      	b.n	80011c4 <__aeabi_dadd+0xc0>
 800143e:	002a      	movs	r2, r5
 8001440:	3808      	subs	r0, #8
 8001442:	4082      	lsls	r2, r0
 8001444:	429f      	cmp	r7, r3
 8001446:	dd00      	ble.n	800144a <__aeabi_dadd+0x346>
 8001448:	e0a9      	b.n	800159e <__aeabi_dadd+0x49a>
 800144a:	1bdb      	subs	r3, r3, r7
 800144c:	1c58      	adds	r0, r3, #1
 800144e:	281f      	cmp	r0, #31
 8001450:	dc00      	bgt.n	8001454 <__aeabi_dadd+0x350>
 8001452:	e1ac      	b.n	80017ae <__aeabi_dadd+0x6aa>
 8001454:	0015      	movs	r5, r2
 8001456:	3b1f      	subs	r3, #31
 8001458:	40dd      	lsrs	r5, r3
 800145a:	2820      	cmp	r0, #32
 800145c:	d005      	beq.n	800146a <__aeabi_dadd+0x366>
 800145e:	2340      	movs	r3, #64	@ 0x40
 8001460:	1a1b      	subs	r3, r3, r0
 8001462:	409a      	lsls	r2, r3
 8001464:	1e53      	subs	r3, r2, #1
 8001466:	419a      	sbcs	r2, r3
 8001468:	4315      	orrs	r5, r2
 800146a:	2307      	movs	r3, #7
 800146c:	2700      	movs	r7, #0
 800146e:	402b      	ands	r3, r5
 8001470:	e7b0      	b.n	80013d4 <__aeabi_dadd+0x2d0>
 8001472:	08ed      	lsrs	r5, r5, #3
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <__aeabi_dadd+0x388>)
 8001476:	0762      	lsls	r2, r4, #29
 8001478:	432a      	orrs	r2, r5
 800147a:	08e4      	lsrs	r4, r4, #3
 800147c:	429f      	cmp	r7, r3
 800147e:	d00f      	beq.n	80014a0 <__aeabi_dadd+0x39c>
 8001480:	0324      	lsls	r4, r4, #12
 8001482:	0b25      	lsrs	r5, r4, #12
 8001484:	057c      	lsls	r4, r7, #21
 8001486:	0d64      	lsrs	r4, r4, #21
 8001488:	e6d4      	b.n	8001234 <__aeabi_dadd+0x130>
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	000007ff 	.word	0x000007ff
 8001490:	ff7fffff 	.word	0xff7fffff
 8001494:	000007fe 	.word	0x000007fe
 8001498:	08c0      	lsrs	r0, r0, #3
 800149a:	0762      	lsls	r2, r4, #29
 800149c:	4302      	orrs	r2, r0
 800149e:	08e4      	lsrs	r4, r4, #3
 80014a0:	0013      	movs	r3, r2
 80014a2:	4323      	orrs	r3, r4
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dadd+0x3a4>
 80014a6:	e186      	b.n	80017b6 <__aeabi_dadd+0x6b2>
 80014a8:	2580      	movs	r5, #128	@ 0x80
 80014aa:	032d      	lsls	r5, r5, #12
 80014ac:	4325      	orrs	r5, r4
 80014ae:	032d      	lsls	r5, r5, #12
 80014b0:	4cc3      	ldr	r4, [pc, #780]	@ (80017c0 <__aeabi_dadd+0x6bc>)
 80014b2:	0b2d      	lsrs	r5, r5, #12
 80014b4:	e6be      	b.n	8001234 <__aeabi_dadd+0x130>
 80014b6:	4660      	mov	r0, ip
 80014b8:	4654      	mov	r4, sl
 80014ba:	000e      	movs	r6, r1
 80014bc:	0017      	movs	r7, r2
 80014be:	08c5      	lsrs	r5, r0, #3
 80014c0:	e7d8      	b.n	8001474 <__aeabi_dadd+0x370>
 80014c2:	4cc0      	ldr	r4, [pc, #768]	@ (80017c4 <__aeabi_dadd+0x6c0>)
 80014c4:	1aff      	subs	r7, r7, r3
 80014c6:	4014      	ands	r4, r2
 80014c8:	e696      	b.n	80011f8 <__aeabi_dadd+0xf4>
 80014ca:	4abf      	ldr	r2, [pc, #764]	@ (80017c8 <__aeabi_dadd+0x6c4>)
 80014cc:	1c79      	adds	r1, r7, #1
 80014ce:	4211      	tst	r1, r2
 80014d0:	d16b      	bne.n	80015aa <__aeabi_dadd+0x4a6>
 80014d2:	0022      	movs	r2, r4
 80014d4:	4302      	orrs	r2, r0
 80014d6:	2f00      	cmp	r7, #0
 80014d8:	d000      	beq.n	80014dc <__aeabi_dadd+0x3d8>
 80014da:	e0db      	b.n	8001694 <__aeabi_dadd+0x590>
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d100      	bne.n	80014e2 <__aeabi_dadd+0x3de>
 80014e0:	e12d      	b.n	800173e <__aeabi_dadd+0x63a>
 80014e2:	4662      	mov	r2, ip
 80014e4:	4653      	mov	r3, sl
 80014e6:	431a      	orrs	r2, r3
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x3e8>
 80014ea:	e0b6      	b.n	800165a <__aeabi_dadd+0x556>
 80014ec:	4663      	mov	r3, ip
 80014ee:	18c5      	adds	r5, r0, r3
 80014f0:	4285      	cmp	r5, r0
 80014f2:	4180      	sbcs	r0, r0
 80014f4:	4454      	add	r4, sl
 80014f6:	4240      	negs	r0, r0
 80014f8:	1824      	adds	r4, r4, r0
 80014fa:	0223      	lsls	r3, r4, #8
 80014fc:	d502      	bpl.n	8001504 <__aeabi_dadd+0x400>
 80014fe:	000f      	movs	r7, r1
 8001500:	4bb0      	ldr	r3, [pc, #704]	@ (80017c4 <__aeabi_dadd+0x6c0>)
 8001502:	401c      	ands	r4, r3
 8001504:	003a      	movs	r2, r7
 8001506:	0028      	movs	r0, r5
 8001508:	e7d8      	b.n	80014bc <__aeabi_dadd+0x3b8>
 800150a:	4662      	mov	r2, ip
 800150c:	1a85      	subs	r5, r0, r2
 800150e:	42a8      	cmp	r0, r5
 8001510:	4192      	sbcs	r2, r2
 8001512:	4653      	mov	r3, sl
 8001514:	4252      	negs	r2, r2
 8001516:	4691      	mov	r9, r2
 8001518:	1ae3      	subs	r3, r4, r3
 800151a:	001a      	movs	r2, r3
 800151c:	464b      	mov	r3, r9
 800151e:	1ad2      	subs	r2, r2, r3
 8001520:	0013      	movs	r3, r2
 8001522:	4691      	mov	r9, r2
 8001524:	021a      	lsls	r2, r3, #8
 8001526:	d454      	bmi.n	80015d2 <__aeabi_dadd+0x4ce>
 8001528:	464a      	mov	r2, r9
 800152a:	464c      	mov	r4, r9
 800152c:	432a      	orrs	r2, r5
 800152e:	d000      	beq.n	8001532 <__aeabi_dadd+0x42e>
 8001530:	e640      	b.n	80011b4 <__aeabi_dadd+0xb0>
 8001532:	2600      	movs	r6, #0
 8001534:	2400      	movs	r4, #0
 8001536:	2500      	movs	r5, #0
 8001538:	e67c      	b.n	8001234 <__aeabi_dadd+0x130>
 800153a:	4da1      	ldr	r5, [pc, #644]	@ (80017c0 <__aeabi_dadd+0x6bc>)
 800153c:	45a9      	cmp	r9, r5
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x43e>
 8001540:	e090      	b.n	8001664 <__aeabi_dadd+0x560>
 8001542:	2501      	movs	r5, #1
 8001544:	2a38      	cmp	r2, #56	@ 0x38
 8001546:	dd00      	ble.n	800154a <__aeabi_dadd+0x446>
 8001548:	e6ab      	b.n	80012a2 <__aeabi_dadd+0x19e>
 800154a:	2580      	movs	r5, #128	@ 0x80
 800154c:	042d      	lsls	r5, r5, #16
 800154e:	432c      	orrs	r4, r5
 8001550:	e695      	b.n	800127e <__aeabi_dadd+0x17a>
 8001552:	0011      	movs	r1, r2
 8001554:	4655      	mov	r5, sl
 8001556:	3920      	subs	r1, #32
 8001558:	40cd      	lsrs	r5, r1
 800155a:	46a9      	mov	r9, r5
 800155c:	2a20      	cmp	r2, #32
 800155e:	d006      	beq.n	800156e <__aeabi_dadd+0x46a>
 8001560:	2140      	movs	r1, #64	@ 0x40
 8001562:	4653      	mov	r3, sl
 8001564:	1a8a      	subs	r2, r1, r2
 8001566:	4093      	lsls	r3, r2
 8001568:	4662      	mov	r2, ip
 800156a:	431a      	orrs	r2, r3
 800156c:	4694      	mov	ip, r2
 800156e:	4665      	mov	r5, ip
 8001570:	1e6b      	subs	r3, r5, #1
 8001572:	419d      	sbcs	r5, r3
 8001574:	464b      	mov	r3, r9
 8001576:	431d      	orrs	r5, r3
 8001578:	e612      	b.n	80011a0 <__aeabi_dadd+0x9c>
 800157a:	0021      	movs	r1, r4
 800157c:	4301      	orrs	r1, r0
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x47e>
 8001580:	e0c4      	b.n	800170c <__aeabi_dadd+0x608>
 8001582:	1e51      	subs	r1, r2, #1
 8001584:	2a01      	cmp	r2, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x486>
 8001588:	e0fb      	b.n	8001782 <__aeabi_dadd+0x67e>
 800158a:	4d8d      	ldr	r5, [pc, #564]	@ (80017c0 <__aeabi_dadd+0x6bc>)
 800158c:	42aa      	cmp	r2, r5
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x48e>
 8001590:	e0b5      	b.n	80016fe <__aeabi_dadd+0x5fa>
 8001592:	2501      	movs	r5, #1
 8001594:	2938      	cmp	r1, #56	@ 0x38
 8001596:	dd00      	ble.n	800159a <__aeabi_dadd+0x496>
 8001598:	e741      	b.n	800141e <__aeabi_dadd+0x31a>
 800159a:	000a      	movs	r2, r1
 800159c:	e72f      	b.n	80013fe <__aeabi_dadd+0x2fa>
 800159e:	4c89      	ldr	r4, [pc, #548]	@ (80017c4 <__aeabi_dadd+0x6c0>)
 80015a0:	1aff      	subs	r7, r7, r3
 80015a2:	4014      	ands	r4, r2
 80015a4:	0762      	lsls	r2, r4, #29
 80015a6:	08e4      	lsrs	r4, r4, #3
 80015a8:	e76a      	b.n	8001480 <__aeabi_dadd+0x37c>
 80015aa:	4a85      	ldr	r2, [pc, #532]	@ (80017c0 <__aeabi_dadd+0x6bc>)
 80015ac:	4291      	cmp	r1, r2
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dadd+0x4ae>
 80015b0:	e0e3      	b.n	800177a <__aeabi_dadd+0x676>
 80015b2:	4663      	mov	r3, ip
 80015b4:	18c2      	adds	r2, r0, r3
 80015b6:	4282      	cmp	r2, r0
 80015b8:	4180      	sbcs	r0, r0
 80015ba:	0023      	movs	r3, r4
 80015bc:	4240      	negs	r0, r0
 80015be:	4453      	add	r3, sl
 80015c0:	181b      	adds	r3, r3, r0
 80015c2:	07dd      	lsls	r5, r3, #31
 80015c4:	085c      	lsrs	r4, r3, #1
 80015c6:	2307      	movs	r3, #7
 80015c8:	0852      	lsrs	r2, r2, #1
 80015ca:	4315      	orrs	r5, r2
 80015cc:	000f      	movs	r7, r1
 80015ce:	402b      	ands	r3, r5
 80015d0:	e700      	b.n	80013d4 <__aeabi_dadd+0x2d0>
 80015d2:	4663      	mov	r3, ip
 80015d4:	1a1d      	subs	r5, r3, r0
 80015d6:	45ac      	cmp	ip, r5
 80015d8:	4192      	sbcs	r2, r2
 80015da:	4653      	mov	r3, sl
 80015dc:	4252      	negs	r2, r2
 80015de:	1b1c      	subs	r4, r3, r4
 80015e0:	000e      	movs	r6, r1
 80015e2:	4688      	mov	r8, r1
 80015e4:	1aa4      	subs	r4, r4, r2
 80015e6:	e5e5      	b.n	80011b4 <__aeabi_dadd+0xb0>
 80015e8:	2d00      	cmp	r5, #0
 80015ea:	d000      	beq.n	80015ee <__aeabi_dadd+0x4ea>
 80015ec:	e091      	b.n	8001712 <__aeabi_dadd+0x60e>
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	d138      	bne.n	8001664 <__aeabi_dadd+0x560>
 80015f2:	2480      	movs	r4, #128	@ 0x80
 80015f4:	2600      	movs	r6, #0
 80015f6:	0324      	lsls	r4, r4, #12
 80015f8:	e756      	b.n	80014a8 <__aeabi_dadd+0x3a4>
 80015fa:	4663      	mov	r3, ip
 80015fc:	18c5      	adds	r5, r0, r3
 80015fe:	4285      	cmp	r5, r0
 8001600:	4180      	sbcs	r0, r0
 8001602:	4454      	add	r4, sl
 8001604:	4240      	negs	r0, r0
 8001606:	1824      	adds	r4, r4, r0
 8001608:	2701      	movs	r7, #1
 800160a:	0223      	lsls	r3, r4, #8
 800160c:	d400      	bmi.n	8001610 <__aeabi_dadd+0x50c>
 800160e:	e6df      	b.n	80013d0 <__aeabi_dadd+0x2cc>
 8001610:	2702      	movs	r7, #2
 8001612:	e687      	b.n	8001324 <__aeabi_dadd+0x220>
 8001614:	4663      	mov	r3, ip
 8001616:	1ac5      	subs	r5, r0, r3
 8001618:	42a8      	cmp	r0, r5
 800161a:	4180      	sbcs	r0, r0
 800161c:	4653      	mov	r3, sl
 800161e:	4240      	negs	r0, r0
 8001620:	1ae4      	subs	r4, r4, r3
 8001622:	2701      	movs	r7, #1
 8001624:	1a24      	subs	r4, r4, r0
 8001626:	e5c0      	b.n	80011aa <__aeabi_dadd+0xa6>
 8001628:	0762      	lsls	r2, r4, #29
 800162a:	08c0      	lsrs	r0, r0, #3
 800162c:	4302      	orrs	r2, r0
 800162e:	08e4      	lsrs	r4, r4, #3
 8001630:	e736      	b.n	80014a0 <__aeabi_dadd+0x39c>
 8001632:	0011      	movs	r1, r2
 8001634:	4653      	mov	r3, sl
 8001636:	3920      	subs	r1, #32
 8001638:	40cb      	lsrs	r3, r1
 800163a:	4699      	mov	r9, r3
 800163c:	2a20      	cmp	r2, #32
 800163e:	d006      	beq.n	800164e <__aeabi_dadd+0x54a>
 8001640:	2140      	movs	r1, #64	@ 0x40
 8001642:	4653      	mov	r3, sl
 8001644:	1a8a      	subs	r2, r1, r2
 8001646:	4093      	lsls	r3, r2
 8001648:	4662      	mov	r2, ip
 800164a:	431a      	orrs	r2, r3
 800164c:	4694      	mov	ip, r2
 800164e:	4665      	mov	r5, ip
 8001650:	1e6b      	subs	r3, r5, #1
 8001652:	419d      	sbcs	r5, r3
 8001654:	464b      	mov	r3, r9
 8001656:	431d      	orrs	r5, r3
 8001658:	e659      	b.n	800130e <__aeabi_dadd+0x20a>
 800165a:	0762      	lsls	r2, r4, #29
 800165c:	08c0      	lsrs	r0, r0, #3
 800165e:	4302      	orrs	r2, r0
 8001660:	08e4      	lsrs	r4, r4, #3
 8001662:	e70d      	b.n	8001480 <__aeabi_dadd+0x37c>
 8001664:	4653      	mov	r3, sl
 8001666:	075a      	lsls	r2, r3, #29
 8001668:	4663      	mov	r3, ip
 800166a:	08d8      	lsrs	r0, r3, #3
 800166c:	4653      	mov	r3, sl
 800166e:	000e      	movs	r6, r1
 8001670:	4302      	orrs	r2, r0
 8001672:	08dc      	lsrs	r4, r3, #3
 8001674:	e714      	b.n	80014a0 <__aeabi_dadd+0x39c>
 8001676:	0015      	movs	r5, r2
 8001678:	0026      	movs	r6, r4
 800167a:	3d20      	subs	r5, #32
 800167c:	40ee      	lsrs	r6, r5
 800167e:	2a20      	cmp	r2, #32
 8001680:	d003      	beq.n	800168a <__aeabi_dadd+0x586>
 8001682:	2540      	movs	r5, #64	@ 0x40
 8001684:	1aaa      	subs	r2, r5, r2
 8001686:	4094      	lsls	r4, r2
 8001688:	4320      	orrs	r0, r4
 800168a:	1e42      	subs	r2, r0, #1
 800168c:	4190      	sbcs	r0, r2
 800168e:	0005      	movs	r5, r0
 8001690:	4335      	orrs	r5, r6
 8001692:	e606      	b.n	80012a2 <__aeabi_dadd+0x19e>
 8001694:	2a00      	cmp	r2, #0
 8001696:	d07c      	beq.n	8001792 <__aeabi_dadd+0x68e>
 8001698:	4662      	mov	r2, ip
 800169a:	4653      	mov	r3, sl
 800169c:	08c0      	lsrs	r0, r0, #3
 800169e:	431a      	orrs	r2, r3
 80016a0:	d100      	bne.n	80016a4 <__aeabi_dadd+0x5a0>
 80016a2:	e6fa      	b.n	800149a <__aeabi_dadd+0x396>
 80016a4:	0762      	lsls	r2, r4, #29
 80016a6:	4310      	orrs	r0, r2
 80016a8:	2280      	movs	r2, #128	@ 0x80
 80016aa:	08e4      	lsrs	r4, r4, #3
 80016ac:	0312      	lsls	r2, r2, #12
 80016ae:	4214      	tst	r4, r2
 80016b0:	d008      	beq.n	80016c4 <__aeabi_dadd+0x5c0>
 80016b2:	08d9      	lsrs	r1, r3, #3
 80016b4:	4211      	tst	r1, r2
 80016b6:	d105      	bne.n	80016c4 <__aeabi_dadd+0x5c0>
 80016b8:	4663      	mov	r3, ip
 80016ba:	08d8      	lsrs	r0, r3, #3
 80016bc:	4653      	mov	r3, sl
 80016be:	000c      	movs	r4, r1
 80016c0:	075b      	lsls	r3, r3, #29
 80016c2:	4318      	orrs	r0, r3
 80016c4:	0f42      	lsrs	r2, r0, #29
 80016c6:	00c0      	lsls	r0, r0, #3
 80016c8:	08c0      	lsrs	r0, r0, #3
 80016ca:	0752      	lsls	r2, r2, #29
 80016cc:	4302      	orrs	r2, r0
 80016ce:	e6e7      	b.n	80014a0 <__aeabi_dadd+0x39c>
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dadd+0x5d2>
 80016d4:	e72d      	b.n	8001532 <__aeabi_dadd+0x42e>
 80016d6:	4663      	mov	r3, ip
 80016d8:	08d8      	lsrs	r0, r3, #3
 80016da:	4653      	mov	r3, sl
 80016dc:	075a      	lsls	r2, r3, #29
 80016de:	000e      	movs	r6, r1
 80016e0:	4302      	orrs	r2, r0
 80016e2:	08dc      	lsrs	r4, r3, #3
 80016e4:	e6cc      	b.n	8001480 <__aeabi_dadd+0x37c>
 80016e6:	4663      	mov	r3, ip
 80016e8:	1a1d      	subs	r5, r3, r0
 80016ea:	45ac      	cmp	ip, r5
 80016ec:	4192      	sbcs	r2, r2
 80016ee:	4653      	mov	r3, sl
 80016f0:	4252      	negs	r2, r2
 80016f2:	1b1c      	subs	r4, r3, r4
 80016f4:	000e      	movs	r6, r1
 80016f6:	4688      	mov	r8, r1
 80016f8:	1aa4      	subs	r4, r4, r2
 80016fa:	3701      	adds	r7, #1
 80016fc:	e555      	b.n	80011aa <__aeabi_dadd+0xa6>
 80016fe:	4663      	mov	r3, ip
 8001700:	08d9      	lsrs	r1, r3, #3
 8001702:	4653      	mov	r3, sl
 8001704:	075a      	lsls	r2, r3, #29
 8001706:	430a      	orrs	r2, r1
 8001708:	08dc      	lsrs	r4, r3, #3
 800170a:	e6c9      	b.n	80014a0 <__aeabi_dadd+0x39c>
 800170c:	4660      	mov	r0, ip
 800170e:	4654      	mov	r4, sl
 8001710:	e6d4      	b.n	80014bc <__aeabi_dadd+0x3b8>
 8001712:	08c0      	lsrs	r0, r0, #3
 8001714:	2a00      	cmp	r2, #0
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x616>
 8001718:	e6bf      	b.n	800149a <__aeabi_dadd+0x396>
 800171a:	0762      	lsls	r2, r4, #29
 800171c:	4310      	orrs	r0, r2
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	08e4      	lsrs	r4, r4, #3
 8001722:	0312      	lsls	r2, r2, #12
 8001724:	4214      	tst	r4, r2
 8001726:	d0cd      	beq.n	80016c4 <__aeabi_dadd+0x5c0>
 8001728:	08dd      	lsrs	r5, r3, #3
 800172a:	4215      	tst	r5, r2
 800172c:	d1ca      	bne.n	80016c4 <__aeabi_dadd+0x5c0>
 800172e:	4663      	mov	r3, ip
 8001730:	08d8      	lsrs	r0, r3, #3
 8001732:	4653      	mov	r3, sl
 8001734:	075b      	lsls	r3, r3, #29
 8001736:	000e      	movs	r6, r1
 8001738:	002c      	movs	r4, r5
 800173a:	4318      	orrs	r0, r3
 800173c:	e7c2      	b.n	80016c4 <__aeabi_dadd+0x5c0>
 800173e:	4663      	mov	r3, ip
 8001740:	08d9      	lsrs	r1, r3, #3
 8001742:	4653      	mov	r3, sl
 8001744:	075a      	lsls	r2, r3, #29
 8001746:	430a      	orrs	r2, r1
 8001748:	08dc      	lsrs	r4, r3, #3
 800174a:	e699      	b.n	8001480 <__aeabi_dadd+0x37c>
 800174c:	4663      	mov	r3, ip
 800174e:	08d8      	lsrs	r0, r3, #3
 8001750:	4653      	mov	r3, sl
 8001752:	075a      	lsls	r2, r3, #29
 8001754:	000e      	movs	r6, r1
 8001756:	4302      	orrs	r2, r0
 8001758:	08dc      	lsrs	r4, r3, #3
 800175a:	e6a1      	b.n	80014a0 <__aeabi_dadd+0x39c>
 800175c:	0011      	movs	r1, r2
 800175e:	0027      	movs	r7, r4
 8001760:	3920      	subs	r1, #32
 8001762:	40cf      	lsrs	r7, r1
 8001764:	2a20      	cmp	r2, #32
 8001766:	d003      	beq.n	8001770 <__aeabi_dadd+0x66c>
 8001768:	2140      	movs	r1, #64	@ 0x40
 800176a:	1a8a      	subs	r2, r1, r2
 800176c:	4094      	lsls	r4, r2
 800176e:	4320      	orrs	r0, r4
 8001770:	1e42      	subs	r2, r0, #1
 8001772:	4190      	sbcs	r0, r2
 8001774:	0005      	movs	r5, r0
 8001776:	433d      	orrs	r5, r7
 8001778:	e651      	b.n	800141e <__aeabi_dadd+0x31a>
 800177a:	000c      	movs	r4, r1
 800177c:	2500      	movs	r5, #0
 800177e:	2200      	movs	r2, #0
 8001780:	e558      	b.n	8001234 <__aeabi_dadd+0x130>
 8001782:	4460      	add	r0, ip
 8001784:	4560      	cmp	r0, ip
 8001786:	4192      	sbcs	r2, r2
 8001788:	4454      	add	r4, sl
 800178a:	4252      	negs	r2, r2
 800178c:	0005      	movs	r5, r0
 800178e:	18a4      	adds	r4, r4, r2
 8001790:	e73a      	b.n	8001608 <__aeabi_dadd+0x504>
 8001792:	4653      	mov	r3, sl
 8001794:	075a      	lsls	r2, r3, #29
 8001796:	4663      	mov	r3, ip
 8001798:	08d9      	lsrs	r1, r3, #3
 800179a:	4653      	mov	r3, sl
 800179c:	430a      	orrs	r2, r1
 800179e:	08dc      	lsrs	r4, r3, #3
 80017a0:	e67e      	b.n	80014a0 <__aeabi_dadd+0x39c>
 80017a2:	001a      	movs	r2, r3
 80017a4:	001c      	movs	r4, r3
 80017a6:	432a      	orrs	r2, r5
 80017a8:	d000      	beq.n	80017ac <__aeabi_dadd+0x6a8>
 80017aa:	e6ab      	b.n	8001504 <__aeabi_dadd+0x400>
 80017ac:	e6c1      	b.n	8001532 <__aeabi_dadd+0x42e>
 80017ae:	2120      	movs	r1, #32
 80017b0:	2500      	movs	r5, #0
 80017b2:	1a09      	subs	r1, r1, r0
 80017b4:	e519      	b.n	80011ea <__aeabi_dadd+0xe6>
 80017b6:	2200      	movs	r2, #0
 80017b8:	2500      	movs	r5, #0
 80017ba:	4c01      	ldr	r4, [pc, #4]	@ (80017c0 <__aeabi_dadd+0x6bc>)
 80017bc:	e53a      	b.n	8001234 <__aeabi_dadd+0x130>
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	000007ff 	.word	0x000007ff
 80017c4:	ff7fffff 	.word	0xff7fffff
 80017c8:	000007fe 	.word	0x000007fe

080017cc <__aeabi_ddiv>:
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	46de      	mov	lr, fp
 80017d0:	4645      	mov	r5, r8
 80017d2:	4657      	mov	r7, sl
 80017d4:	464e      	mov	r6, r9
 80017d6:	b5e0      	push	{r5, r6, r7, lr}
 80017d8:	b087      	sub	sp, #28
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	030b      	lsls	r3, r1, #12
 80017e0:	0b1b      	lsrs	r3, r3, #12
 80017e2:	469b      	mov	fp, r3
 80017e4:	0fca      	lsrs	r2, r1, #31
 80017e6:	004b      	lsls	r3, r1, #1
 80017e8:	0004      	movs	r4, r0
 80017ea:	4680      	mov	r8, r0
 80017ec:	0d5b      	lsrs	r3, r3, #21
 80017ee:	9202      	str	r2, [sp, #8]
 80017f0:	d100      	bne.n	80017f4 <__aeabi_ddiv+0x28>
 80017f2:	e16a      	b.n	8001aca <__aeabi_ddiv+0x2fe>
 80017f4:	4ad4      	ldr	r2, [pc, #848]	@ (8001b48 <__aeabi_ddiv+0x37c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d100      	bne.n	80017fc <__aeabi_ddiv+0x30>
 80017fa:	e18c      	b.n	8001b16 <__aeabi_ddiv+0x34a>
 80017fc:	4659      	mov	r1, fp
 80017fe:	0f42      	lsrs	r2, r0, #29
 8001800:	00c9      	lsls	r1, r1, #3
 8001802:	430a      	orrs	r2, r1
 8001804:	2180      	movs	r1, #128	@ 0x80
 8001806:	0409      	lsls	r1, r1, #16
 8001808:	4311      	orrs	r1, r2
 800180a:	00c2      	lsls	r2, r0, #3
 800180c:	4690      	mov	r8, r2
 800180e:	4acf      	ldr	r2, [pc, #828]	@ (8001b4c <__aeabi_ddiv+0x380>)
 8001810:	4689      	mov	r9, r1
 8001812:	4692      	mov	sl, r2
 8001814:	449a      	add	sl, r3
 8001816:	2300      	movs	r3, #0
 8001818:	2400      	movs	r4, #0
 800181a:	9303      	str	r3, [sp, #12]
 800181c:	9e00      	ldr	r6, [sp, #0]
 800181e:	9f01      	ldr	r7, [sp, #4]
 8001820:	033b      	lsls	r3, r7, #12
 8001822:	0b1b      	lsrs	r3, r3, #12
 8001824:	469b      	mov	fp, r3
 8001826:	007b      	lsls	r3, r7, #1
 8001828:	0030      	movs	r0, r6
 800182a:	0d5b      	lsrs	r3, r3, #21
 800182c:	0ffd      	lsrs	r5, r7, #31
 800182e:	2b00      	cmp	r3, #0
 8001830:	d100      	bne.n	8001834 <__aeabi_ddiv+0x68>
 8001832:	e128      	b.n	8001a86 <__aeabi_ddiv+0x2ba>
 8001834:	4ac4      	ldr	r2, [pc, #784]	@ (8001b48 <__aeabi_ddiv+0x37c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d100      	bne.n	800183c <__aeabi_ddiv+0x70>
 800183a:	e177      	b.n	8001b2c <__aeabi_ddiv+0x360>
 800183c:	4659      	mov	r1, fp
 800183e:	0f72      	lsrs	r2, r6, #29
 8001840:	00c9      	lsls	r1, r1, #3
 8001842:	430a      	orrs	r2, r1
 8001844:	2180      	movs	r1, #128	@ 0x80
 8001846:	0409      	lsls	r1, r1, #16
 8001848:	4311      	orrs	r1, r2
 800184a:	468b      	mov	fp, r1
 800184c:	49bf      	ldr	r1, [pc, #764]	@ (8001b4c <__aeabi_ddiv+0x380>)
 800184e:	00f2      	lsls	r2, r6, #3
 8001850:	468c      	mov	ip, r1
 8001852:	4651      	mov	r1, sl
 8001854:	4463      	add	r3, ip
 8001856:	1acb      	subs	r3, r1, r3
 8001858:	469a      	mov	sl, r3
 800185a:	2300      	movs	r3, #0
 800185c:	9e02      	ldr	r6, [sp, #8]
 800185e:	406e      	eors	r6, r5
 8001860:	2c0f      	cmp	r4, #15
 8001862:	d827      	bhi.n	80018b4 <__aeabi_ddiv+0xe8>
 8001864:	49ba      	ldr	r1, [pc, #744]	@ (8001b50 <__aeabi_ddiv+0x384>)
 8001866:	00a4      	lsls	r4, r4, #2
 8001868:	5909      	ldr	r1, [r1, r4]
 800186a:	468f      	mov	pc, r1
 800186c:	46cb      	mov	fp, r9
 800186e:	4642      	mov	r2, r8
 8001870:	9e02      	ldr	r6, [sp, #8]
 8001872:	9b03      	ldr	r3, [sp, #12]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d016      	beq.n	80018a6 <__aeabi_ddiv+0xda>
 8001878:	2b03      	cmp	r3, #3
 800187a:	d100      	bne.n	800187e <__aeabi_ddiv+0xb2>
 800187c:	e2a6      	b.n	8001dcc <__aeabi_ddiv+0x600>
 800187e:	2b01      	cmp	r3, #1
 8001880:	d000      	beq.n	8001884 <__aeabi_ddiv+0xb8>
 8001882:	e0df      	b.n	8001a44 <__aeabi_ddiv+0x278>
 8001884:	2200      	movs	r2, #0
 8001886:	2300      	movs	r3, #0
 8001888:	2400      	movs	r4, #0
 800188a:	4690      	mov	r8, r2
 800188c:	051b      	lsls	r3, r3, #20
 800188e:	4323      	orrs	r3, r4
 8001890:	07f6      	lsls	r6, r6, #31
 8001892:	4333      	orrs	r3, r6
 8001894:	4640      	mov	r0, r8
 8001896:	0019      	movs	r1, r3
 8001898:	b007      	add	sp, #28
 800189a:	bcf0      	pop	{r4, r5, r6, r7}
 800189c:	46bb      	mov	fp, r7
 800189e:	46b2      	mov	sl, r6
 80018a0:	46a9      	mov	r9, r5
 80018a2:	46a0      	mov	r8, r4
 80018a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a6:	2200      	movs	r2, #0
 80018a8:	2400      	movs	r4, #0
 80018aa:	4690      	mov	r8, r2
 80018ac:	4ba6      	ldr	r3, [pc, #664]	@ (8001b48 <__aeabi_ddiv+0x37c>)
 80018ae:	e7ed      	b.n	800188c <__aeabi_ddiv+0xc0>
 80018b0:	002e      	movs	r6, r5
 80018b2:	e7df      	b.n	8001874 <__aeabi_ddiv+0xa8>
 80018b4:	45cb      	cmp	fp, r9
 80018b6:	d200      	bcs.n	80018ba <__aeabi_ddiv+0xee>
 80018b8:	e1d4      	b.n	8001c64 <__aeabi_ddiv+0x498>
 80018ba:	d100      	bne.n	80018be <__aeabi_ddiv+0xf2>
 80018bc:	e1cf      	b.n	8001c5e <__aeabi_ddiv+0x492>
 80018be:	2301      	movs	r3, #1
 80018c0:	425b      	negs	r3, r3
 80018c2:	469c      	mov	ip, r3
 80018c4:	4644      	mov	r4, r8
 80018c6:	4648      	mov	r0, r9
 80018c8:	2700      	movs	r7, #0
 80018ca:	44e2      	add	sl, ip
 80018cc:	465b      	mov	r3, fp
 80018ce:	0e15      	lsrs	r5, r2, #24
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	431d      	orrs	r5, r3
 80018d4:	0c19      	lsrs	r1, r3, #16
 80018d6:	042b      	lsls	r3, r5, #16
 80018d8:	0212      	lsls	r2, r2, #8
 80018da:	9500      	str	r5, [sp, #0]
 80018dc:	0c1d      	lsrs	r5, r3, #16
 80018de:	4691      	mov	r9, r2
 80018e0:	9102      	str	r1, [sp, #8]
 80018e2:	9503      	str	r5, [sp, #12]
 80018e4:	f7fe fcb0 	bl	8000248 <__aeabi_uidivmod>
 80018e8:	0002      	movs	r2, r0
 80018ea:	436a      	muls	r2, r5
 80018ec:	040b      	lsls	r3, r1, #16
 80018ee:	0c21      	lsrs	r1, r4, #16
 80018f0:	4680      	mov	r8, r0
 80018f2:	4319      	orrs	r1, r3
 80018f4:	428a      	cmp	r2, r1
 80018f6:	d909      	bls.n	800190c <__aeabi_ddiv+0x140>
 80018f8:	9d00      	ldr	r5, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	46ac      	mov	ip, r5
 80018fe:	425b      	negs	r3, r3
 8001900:	4461      	add	r1, ip
 8001902:	469c      	mov	ip, r3
 8001904:	44e0      	add	r8, ip
 8001906:	428d      	cmp	r5, r1
 8001908:	d800      	bhi.n	800190c <__aeabi_ddiv+0x140>
 800190a:	e1fb      	b.n	8001d04 <__aeabi_ddiv+0x538>
 800190c:	1a88      	subs	r0, r1, r2
 800190e:	9902      	ldr	r1, [sp, #8]
 8001910:	f7fe fc9a 	bl	8000248 <__aeabi_uidivmod>
 8001914:	9a03      	ldr	r2, [sp, #12]
 8001916:	0424      	lsls	r4, r4, #16
 8001918:	4342      	muls	r2, r0
 800191a:	0409      	lsls	r1, r1, #16
 800191c:	0c24      	lsrs	r4, r4, #16
 800191e:	0003      	movs	r3, r0
 8001920:	430c      	orrs	r4, r1
 8001922:	42a2      	cmp	r2, r4
 8001924:	d906      	bls.n	8001934 <__aeabi_ddiv+0x168>
 8001926:	9900      	ldr	r1, [sp, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	468c      	mov	ip, r1
 800192c:	4464      	add	r4, ip
 800192e:	42a1      	cmp	r1, r4
 8001930:	d800      	bhi.n	8001934 <__aeabi_ddiv+0x168>
 8001932:	e1e1      	b.n	8001cf8 <__aeabi_ddiv+0x52c>
 8001934:	1aa0      	subs	r0, r4, r2
 8001936:	4642      	mov	r2, r8
 8001938:	0412      	lsls	r2, r2, #16
 800193a:	431a      	orrs	r2, r3
 800193c:	4693      	mov	fp, r2
 800193e:	464b      	mov	r3, r9
 8001940:	4659      	mov	r1, fp
 8001942:	0c1b      	lsrs	r3, r3, #16
 8001944:	001d      	movs	r5, r3
 8001946:	9304      	str	r3, [sp, #16]
 8001948:	040b      	lsls	r3, r1, #16
 800194a:	4649      	mov	r1, r9
 800194c:	0409      	lsls	r1, r1, #16
 800194e:	0c09      	lsrs	r1, r1, #16
 8001950:	000c      	movs	r4, r1
 8001952:	0c1b      	lsrs	r3, r3, #16
 8001954:	435c      	muls	r4, r3
 8001956:	0c12      	lsrs	r2, r2, #16
 8001958:	436b      	muls	r3, r5
 800195a:	4688      	mov	r8, r1
 800195c:	4351      	muls	r1, r2
 800195e:	436a      	muls	r2, r5
 8001960:	0c25      	lsrs	r5, r4, #16
 8001962:	46ac      	mov	ip, r5
 8001964:	185b      	adds	r3, r3, r1
 8001966:	4463      	add	r3, ip
 8001968:	4299      	cmp	r1, r3
 800196a:	d903      	bls.n	8001974 <__aeabi_ddiv+0x1a8>
 800196c:	2180      	movs	r1, #128	@ 0x80
 800196e:	0249      	lsls	r1, r1, #9
 8001970:	468c      	mov	ip, r1
 8001972:	4462      	add	r2, ip
 8001974:	0c19      	lsrs	r1, r3, #16
 8001976:	0424      	lsls	r4, r4, #16
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	0c24      	lsrs	r4, r4, #16
 800197c:	188a      	adds	r2, r1, r2
 800197e:	191c      	adds	r4, r3, r4
 8001980:	4290      	cmp	r0, r2
 8001982:	d302      	bcc.n	800198a <__aeabi_ddiv+0x1be>
 8001984:	d116      	bne.n	80019b4 <__aeabi_ddiv+0x1e8>
 8001986:	42a7      	cmp	r7, r4
 8001988:	d214      	bcs.n	80019b4 <__aeabi_ddiv+0x1e8>
 800198a:	465b      	mov	r3, fp
 800198c:	9d00      	ldr	r5, [sp, #0]
 800198e:	3b01      	subs	r3, #1
 8001990:	444f      	add	r7, r9
 8001992:	9305      	str	r3, [sp, #20]
 8001994:	454f      	cmp	r7, r9
 8001996:	419b      	sbcs	r3, r3
 8001998:	46ac      	mov	ip, r5
 800199a:	425b      	negs	r3, r3
 800199c:	4463      	add	r3, ip
 800199e:	18c0      	adds	r0, r0, r3
 80019a0:	4285      	cmp	r5, r0
 80019a2:	d300      	bcc.n	80019a6 <__aeabi_ddiv+0x1da>
 80019a4:	e1a1      	b.n	8001cea <__aeabi_ddiv+0x51e>
 80019a6:	4282      	cmp	r2, r0
 80019a8:	d900      	bls.n	80019ac <__aeabi_ddiv+0x1e0>
 80019aa:	e1f6      	b.n	8001d9a <__aeabi_ddiv+0x5ce>
 80019ac:	d100      	bne.n	80019b0 <__aeabi_ddiv+0x1e4>
 80019ae:	e1f1      	b.n	8001d94 <__aeabi_ddiv+0x5c8>
 80019b0:	9b05      	ldr	r3, [sp, #20]
 80019b2:	469b      	mov	fp, r3
 80019b4:	1b3c      	subs	r4, r7, r4
 80019b6:	42a7      	cmp	r7, r4
 80019b8:	41bf      	sbcs	r7, r7
 80019ba:	9d00      	ldr	r5, [sp, #0]
 80019bc:	1a80      	subs	r0, r0, r2
 80019be:	427f      	negs	r7, r7
 80019c0:	1bc0      	subs	r0, r0, r7
 80019c2:	4285      	cmp	r5, r0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_ddiv+0x1fc>
 80019c6:	e1d0      	b.n	8001d6a <__aeabi_ddiv+0x59e>
 80019c8:	9902      	ldr	r1, [sp, #8]
 80019ca:	f7fe fc3d 	bl	8000248 <__aeabi_uidivmod>
 80019ce:	9a03      	ldr	r2, [sp, #12]
 80019d0:	040b      	lsls	r3, r1, #16
 80019d2:	4342      	muls	r2, r0
 80019d4:	0c21      	lsrs	r1, r4, #16
 80019d6:	0007      	movs	r7, r0
 80019d8:	4319      	orrs	r1, r3
 80019da:	428a      	cmp	r2, r1
 80019dc:	d900      	bls.n	80019e0 <__aeabi_ddiv+0x214>
 80019de:	e178      	b.n	8001cd2 <__aeabi_ddiv+0x506>
 80019e0:	1a88      	subs	r0, r1, r2
 80019e2:	9902      	ldr	r1, [sp, #8]
 80019e4:	f7fe fc30 	bl	8000248 <__aeabi_uidivmod>
 80019e8:	9a03      	ldr	r2, [sp, #12]
 80019ea:	0424      	lsls	r4, r4, #16
 80019ec:	4342      	muls	r2, r0
 80019ee:	0409      	lsls	r1, r1, #16
 80019f0:	0c24      	lsrs	r4, r4, #16
 80019f2:	0003      	movs	r3, r0
 80019f4:	430c      	orrs	r4, r1
 80019f6:	42a2      	cmp	r2, r4
 80019f8:	d900      	bls.n	80019fc <__aeabi_ddiv+0x230>
 80019fa:	e15d      	b.n	8001cb8 <__aeabi_ddiv+0x4ec>
 80019fc:	4641      	mov	r1, r8
 80019fe:	1aa4      	subs	r4, r4, r2
 8001a00:	043a      	lsls	r2, r7, #16
 8001a02:	431a      	orrs	r2, r3
 8001a04:	9d04      	ldr	r5, [sp, #16]
 8001a06:	0413      	lsls	r3, r2, #16
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	4359      	muls	r1, r3
 8001a0c:	4647      	mov	r7, r8
 8001a0e:	436b      	muls	r3, r5
 8001a10:	469c      	mov	ip, r3
 8001a12:	0c10      	lsrs	r0, r2, #16
 8001a14:	4347      	muls	r7, r0
 8001a16:	0c0b      	lsrs	r3, r1, #16
 8001a18:	44bc      	add	ip, r7
 8001a1a:	4463      	add	r3, ip
 8001a1c:	4368      	muls	r0, r5
 8001a1e:	429f      	cmp	r7, r3
 8001a20:	d903      	bls.n	8001a2a <__aeabi_ddiv+0x25e>
 8001a22:	2580      	movs	r5, #128	@ 0x80
 8001a24:	026d      	lsls	r5, r5, #9
 8001a26:	46ac      	mov	ip, r5
 8001a28:	4460      	add	r0, ip
 8001a2a:	0c1f      	lsrs	r7, r3, #16
 8001a2c:	0409      	lsls	r1, r1, #16
 8001a2e:	041b      	lsls	r3, r3, #16
 8001a30:	0c09      	lsrs	r1, r1, #16
 8001a32:	183f      	adds	r7, r7, r0
 8001a34:	185b      	adds	r3, r3, r1
 8001a36:	42bc      	cmp	r4, r7
 8001a38:	d200      	bcs.n	8001a3c <__aeabi_ddiv+0x270>
 8001a3a:	e102      	b.n	8001c42 <__aeabi_ddiv+0x476>
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_ddiv+0x274>
 8001a3e:	e0fd      	b.n	8001c3c <__aeabi_ddiv+0x470>
 8001a40:	2301      	movs	r3, #1
 8001a42:	431a      	orrs	r2, r3
 8001a44:	4b43      	ldr	r3, [pc, #268]	@ (8001b54 <__aeabi_ddiv+0x388>)
 8001a46:	4453      	add	r3, sl
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	dc00      	bgt.n	8001a4e <__aeabi_ddiv+0x282>
 8001a4c:	e0ae      	b.n	8001bac <__aeabi_ddiv+0x3e0>
 8001a4e:	0751      	lsls	r1, r2, #29
 8001a50:	d000      	beq.n	8001a54 <__aeabi_ddiv+0x288>
 8001a52:	e198      	b.n	8001d86 <__aeabi_ddiv+0x5ba>
 8001a54:	4659      	mov	r1, fp
 8001a56:	01c9      	lsls	r1, r1, #7
 8001a58:	d506      	bpl.n	8001a68 <__aeabi_ddiv+0x29c>
 8001a5a:	4659      	mov	r1, fp
 8001a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b58 <__aeabi_ddiv+0x38c>)
 8001a5e:	4019      	ands	r1, r3
 8001a60:	2380      	movs	r3, #128	@ 0x80
 8001a62:	468b      	mov	fp, r1
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4453      	add	r3, sl
 8001a68:	493c      	ldr	r1, [pc, #240]	@ (8001b5c <__aeabi_ddiv+0x390>)
 8001a6a:	428b      	cmp	r3, r1
 8001a6c:	dd00      	ble.n	8001a70 <__aeabi_ddiv+0x2a4>
 8001a6e:	e71a      	b.n	80018a6 <__aeabi_ddiv+0xda>
 8001a70:	4659      	mov	r1, fp
 8001a72:	08d2      	lsrs	r2, r2, #3
 8001a74:	0749      	lsls	r1, r1, #29
 8001a76:	4311      	orrs	r1, r2
 8001a78:	465a      	mov	r2, fp
 8001a7a:	055b      	lsls	r3, r3, #21
 8001a7c:	0254      	lsls	r4, r2, #9
 8001a7e:	4688      	mov	r8, r1
 8001a80:	0b24      	lsrs	r4, r4, #12
 8001a82:	0d5b      	lsrs	r3, r3, #21
 8001a84:	e702      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001a86:	465a      	mov	r2, fp
 8001a88:	9b00      	ldr	r3, [sp, #0]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_ddiv+0x2c4>
 8001a8e:	e07e      	b.n	8001b8e <__aeabi_ddiv+0x3c2>
 8001a90:	465b      	mov	r3, fp
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d100      	bne.n	8001a98 <__aeabi_ddiv+0x2cc>
 8001a96:	e100      	b.n	8001c9a <__aeabi_ddiv+0x4ce>
 8001a98:	4658      	mov	r0, fp
 8001a9a:	f001 fabb 	bl	8003014 <__clzsi2>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	3a0b      	subs	r2, #11
 8001aa4:	271d      	movs	r7, #29
 8001aa6:	9e00      	ldr	r6, [sp, #0]
 8001aa8:	1aba      	subs	r2, r7, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	4658      	mov	r0, fp
 8001aae:	40d6      	lsrs	r6, r2
 8001ab0:	3908      	subs	r1, #8
 8001ab2:	4088      	lsls	r0, r1
 8001ab4:	0032      	movs	r2, r6
 8001ab6:	4302      	orrs	r2, r0
 8001ab8:	4693      	mov	fp, r2
 8001aba:	9a00      	ldr	r2, [sp, #0]
 8001abc:	408a      	lsls	r2, r1
 8001abe:	4928      	ldr	r1, [pc, #160]	@ (8001b60 <__aeabi_ddiv+0x394>)
 8001ac0:	4453      	add	r3, sl
 8001ac2:	468a      	mov	sl, r1
 8001ac4:	449a      	add	sl, r3
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e6c8      	b.n	800185c <__aeabi_ddiv+0x90>
 8001aca:	465b      	mov	r3, fp
 8001acc:	4303      	orrs	r3, r0
 8001ace:	4699      	mov	r9, r3
 8001ad0:	d056      	beq.n	8001b80 <__aeabi_ddiv+0x3b4>
 8001ad2:	465b      	mov	r3, fp
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d100      	bne.n	8001ada <__aeabi_ddiv+0x30e>
 8001ad8:	e0cd      	b.n	8001c76 <__aeabi_ddiv+0x4aa>
 8001ada:	4658      	mov	r0, fp
 8001adc:	f001 fa9a 	bl	8003014 <__clzsi2>
 8001ae0:	230b      	movs	r3, #11
 8001ae2:	425b      	negs	r3, r3
 8001ae4:	469c      	mov	ip, r3
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	4484      	add	ip, r0
 8001aea:	4666      	mov	r6, ip
 8001aec:	231d      	movs	r3, #29
 8001aee:	1b9b      	subs	r3, r3, r6
 8001af0:	0026      	movs	r6, r4
 8001af2:	0011      	movs	r1, r2
 8001af4:	4658      	mov	r0, fp
 8001af6:	40de      	lsrs	r6, r3
 8001af8:	3908      	subs	r1, #8
 8001afa:	4088      	lsls	r0, r1
 8001afc:	0033      	movs	r3, r6
 8001afe:	4303      	orrs	r3, r0
 8001b00:	4699      	mov	r9, r3
 8001b02:	0023      	movs	r3, r4
 8001b04:	408b      	lsls	r3, r1
 8001b06:	4698      	mov	r8, r3
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <__aeabi_ddiv+0x398>)
 8001b0a:	2400      	movs	r4, #0
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	469a      	mov	sl, r3
 8001b10:	2300      	movs	r3, #0
 8001b12:	9303      	str	r3, [sp, #12]
 8001b14:	e682      	b.n	800181c <__aeabi_ddiv+0x50>
 8001b16:	465a      	mov	r2, fp
 8001b18:	4302      	orrs	r2, r0
 8001b1a:	4691      	mov	r9, r2
 8001b1c:	d12a      	bne.n	8001b74 <__aeabi_ddiv+0x3a8>
 8001b1e:	2200      	movs	r2, #0
 8001b20:	469a      	mov	sl, r3
 8001b22:	2302      	movs	r3, #2
 8001b24:	4690      	mov	r8, r2
 8001b26:	2408      	movs	r4, #8
 8001b28:	9303      	str	r3, [sp, #12]
 8001b2a:	e677      	b.n	800181c <__aeabi_ddiv+0x50>
 8001b2c:	465a      	mov	r2, fp
 8001b2e:	9b00      	ldr	r3, [sp, #0]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <__aeabi_ddiv+0x39c>)
 8001b34:	469c      	mov	ip, r3
 8001b36:	44e2      	add	sl, ip
 8001b38:	2a00      	cmp	r2, #0
 8001b3a:	d117      	bne.n	8001b6c <__aeabi_ddiv+0x3a0>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	431c      	orrs	r4, r3
 8001b40:	2300      	movs	r3, #0
 8001b42:	469b      	mov	fp, r3
 8001b44:	3302      	adds	r3, #2
 8001b46:	e689      	b.n	800185c <__aeabi_ddiv+0x90>
 8001b48:	000007ff 	.word	0x000007ff
 8001b4c:	fffffc01 	.word	0xfffffc01
 8001b50:	0800d848 	.word	0x0800d848
 8001b54:	000003ff 	.word	0x000003ff
 8001b58:	feffffff 	.word	0xfeffffff
 8001b5c:	000007fe 	.word	0x000007fe
 8001b60:	000003f3 	.word	0x000003f3
 8001b64:	fffffc0d 	.word	0xfffffc0d
 8001b68:	fffff801 	.word	0xfffff801
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	0032      	movs	r2, r6
 8001b70:	431c      	orrs	r4, r3
 8001b72:	e673      	b.n	800185c <__aeabi_ddiv+0x90>
 8001b74:	469a      	mov	sl, r3
 8001b76:	2303      	movs	r3, #3
 8001b78:	46d9      	mov	r9, fp
 8001b7a:	240c      	movs	r4, #12
 8001b7c:	9303      	str	r3, [sp, #12]
 8001b7e:	e64d      	b.n	800181c <__aeabi_ddiv+0x50>
 8001b80:	2300      	movs	r3, #0
 8001b82:	4698      	mov	r8, r3
 8001b84:	469a      	mov	sl, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	2404      	movs	r4, #4
 8001b8a:	9303      	str	r3, [sp, #12]
 8001b8c:	e646      	b.n	800181c <__aeabi_ddiv+0x50>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	431c      	orrs	r4, r3
 8001b92:	2300      	movs	r3, #0
 8001b94:	469b      	mov	fp, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	e660      	b.n	800185c <__aeabi_ddiv+0x90>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2480      	movs	r4, #128	@ 0x80
 8001b9e:	4698      	mov	r8, r3
 8001ba0:	2600      	movs	r6, #0
 8001ba2:	4b92      	ldr	r3, [pc, #584]	@ (8001dec <__aeabi_ddiv+0x620>)
 8001ba4:	0324      	lsls	r4, r4, #12
 8001ba6:	e671      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4252      	negs	r2, r2
 8001bac:	2101      	movs	r1, #1
 8001bae:	1ac9      	subs	r1, r1, r3
 8001bb0:	2938      	cmp	r1, #56	@ 0x38
 8001bb2:	dd00      	ble.n	8001bb6 <__aeabi_ddiv+0x3ea>
 8001bb4:	e666      	b.n	8001884 <__aeabi_ddiv+0xb8>
 8001bb6:	291f      	cmp	r1, #31
 8001bb8:	dc00      	bgt.n	8001bbc <__aeabi_ddiv+0x3f0>
 8001bba:	e0ab      	b.n	8001d14 <__aeabi_ddiv+0x548>
 8001bbc:	201f      	movs	r0, #31
 8001bbe:	4240      	negs	r0, r0
 8001bc0:	1ac3      	subs	r3, r0, r3
 8001bc2:	4658      	mov	r0, fp
 8001bc4:	40d8      	lsrs	r0, r3
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	2920      	cmp	r1, #32
 8001bca:	d004      	beq.n	8001bd6 <__aeabi_ddiv+0x40a>
 8001bcc:	4658      	mov	r0, fp
 8001bce:	4988      	ldr	r1, [pc, #544]	@ (8001df0 <__aeabi_ddiv+0x624>)
 8001bd0:	4451      	add	r1, sl
 8001bd2:	4088      	lsls	r0, r1
 8001bd4:	4302      	orrs	r2, r0
 8001bd6:	1e51      	subs	r1, r2, #1
 8001bd8:	418a      	sbcs	r2, r1
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	2307      	movs	r3, #7
 8001bde:	0019      	movs	r1, r3
 8001be0:	2400      	movs	r4, #0
 8001be2:	4011      	ands	r1, r2
 8001be4:	4213      	tst	r3, r2
 8001be6:	d00c      	beq.n	8001c02 <__aeabi_ddiv+0x436>
 8001be8:	230f      	movs	r3, #15
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_ddiv+0x426>
 8001bf0:	e0f9      	b.n	8001de6 <__aeabi_ddiv+0x61a>
 8001bf2:	1d11      	adds	r1, r2, #4
 8001bf4:	4291      	cmp	r1, r2
 8001bf6:	419b      	sbcs	r3, r3
 8001bf8:	000a      	movs	r2, r1
 8001bfa:	425b      	negs	r3, r3
 8001bfc:	0759      	lsls	r1, r3, #29
 8001bfe:	025b      	lsls	r3, r3, #9
 8001c00:	0b1c      	lsrs	r4, r3, #12
 8001c02:	08d2      	lsrs	r2, r2, #3
 8001c04:	430a      	orrs	r2, r1
 8001c06:	4690      	mov	r8, r2
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e63f      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001c0c:	2480      	movs	r4, #128	@ 0x80
 8001c0e:	464b      	mov	r3, r9
 8001c10:	0324      	lsls	r4, r4, #12
 8001c12:	4223      	tst	r3, r4
 8001c14:	d009      	beq.n	8001c2a <__aeabi_ddiv+0x45e>
 8001c16:	465b      	mov	r3, fp
 8001c18:	4223      	tst	r3, r4
 8001c1a:	d106      	bne.n	8001c2a <__aeabi_ddiv+0x45e>
 8001c1c:	431c      	orrs	r4, r3
 8001c1e:	0324      	lsls	r4, r4, #12
 8001c20:	002e      	movs	r6, r5
 8001c22:	4690      	mov	r8, r2
 8001c24:	4b71      	ldr	r3, [pc, #452]	@ (8001dec <__aeabi_ddiv+0x620>)
 8001c26:	0b24      	lsrs	r4, r4, #12
 8001c28:	e630      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001c2a:	2480      	movs	r4, #128	@ 0x80
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	0324      	lsls	r4, r4, #12
 8001c30:	431c      	orrs	r4, r3
 8001c32:	0324      	lsls	r4, r4, #12
 8001c34:	9e02      	ldr	r6, [sp, #8]
 8001c36:	4b6d      	ldr	r3, [pc, #436]	@ (8001dec <__aeabi_ddiv+0x620>)
 8001c38:	0b24      	lsrs	r4, r4, #12
 8001c3a:	e627      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_ddiv+0x476>
 8001c40:	e700      	b.n	8001a44 <__aeabi_ddiv+0x278>
 8001c42:	9800      	ldr	r0, [sp, #0]
 8001c44:	1e51      	subs	r1, r2, #1
 8001c46:	4684      	mov	ip, r0
 8001c48:	4464      	add	r4, ip
 8001c4a:	4284      	cmp	r4, r0
 8001c4c:	d200      	bcs.n	8001c50 <__aeabi_ddiv+0x484>
 8001c4e:	e084      	b.n	8001d5a <__aeabi_ddiv+0x58e>
 8001c50:	42bc      	cmp	r4, r7
 8001c52:	d200      	bcs.n	8001c56 <__aeabi_ddiv+0x48a>
 8001c54:	e0ae      	b.n	8001db4 <__aeabi_ddiv+0x5e8>
 8001c56:	d100      	bne.n	8001c5a <__aeabi_ddiv+0x48e>
 8001c58:	e0c1      	b.n	8001dde <__aeabi_ddiv+0x612>
 8001c5a:	000a      	movs	r2, r1
 8001c5c:	e6f0      	b.n	8001a40 <__aeabi_ddiv+0x274>
 8001c5e:	4542      	cmp	r2, r8
 8001c60:	d900      	bls.n	8001c64 <__aeabi_ddiv+0x498>
 8001c62:	e62c      	b.n	80018be <__aeabi_ddiv+0xf2>
 8001c64:	464b      	mov	r3, r9
 8001c66:	07dc      	lsls	r4, r3, #31
 8001c68:	0858      	lsrs	r0, r3, #1
 8001c6a:	4643      	mov	r3, r8
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	431c      	orrs	r4, r3
 8001c70:	4643      	mov	r3, r8
 8001c72:	07df      	lsls	r7, r3, #31
 8001c74:	e62a      	b.n	80018cc <__aeabi_ddiv+0x100>
 8001c76:	f001 f9cd 	bl	8003014 <__clzsi2>
 8001c7a:	2315      	movs	r3, #21
 8001c7c:	469c      	mov	ip, r3
 8001c7e:	4484      	add	ip, r0
 8001c80:	0002      	movs	r2, r0
 8001c82:	4663      	mov	r3, ip
 8001c84:	3220      	adds	r2, #32
 8001c86:	2b1c      	cmp	r3, #28
 8001c88:	dc00      	bgt.n	8001c8c <__aeabi_ddiv+0x4c0>
 8001c8a:	e72e      	b.n	8001aea <__aeabi_ddiv+0x31e>
 8001c8c:	0023      	movs	r3, r4
 8001c8e:	3808      	subs	r0, #8
 8001c90:	4083      	lsls	r3, r0
 8001c92:	4699      	mov	r9, r3
 8001c94:	2300      	movs	r3, #0
 8001c96:	4698      	mov	r8, r3
 8001c98:	e736      	b.n	8001b08 <__aeabi_ddiv+0x33c>
 8001c9a:	f001 f9bb 	bl	8003014 <__clzsi2>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	3215      	adds	r2, #21
 8001ca4:	3320      	adds	r3, #32
 8001ca6:	2a1c      	cmp	r2, #28
 8001ca8:	dc00      	bgt.n	8001cac <__aeabi_ddiv+0x4e0>
 8001caa:	e6fb      	b.n	8001aa4 <__aeabi_ddiv+0x2d8>
 8001cac:	9900      	ldr	r1, [sp, #0]
 8001cae:	3808      	subs	r0, #8
 8001cb0:	4081      	lsls	r1, r0
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	468b      	mov	fp, r1
 8001cb6:	e702      	b.n	8001abe <__aeabi_ddiv+0x2f2>
 8001cb8:	9900      	ldr	r1, [sp, #0]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	468c      	mov	ip, r1
 8001cbe:	4464      	add	r4, ip
 8001cc0:	42a1      	cmp	r1, r4
 8001cc2:	d900      	bls.n	8001cc6 <__aeabi_ddiv+0x4fa>
 8001cc4:	e69a      	b.n	80019fc <__aeabi_ddiv+0x230>
 8001cc6:	42a2      	cmp	r2, r4
 8001cc8:	d800      	bhi.n	8001ccc <__aeabi_ddiv+0x500>
 8001cca:	e697      	b.n	80019fc <__aeabi_ddiv+0x230>
 8001ccc:	1e83      	subs	r3, r0, #2
 8001cce:	4464      	add	r4, ip
 8001cd0:	e694      	b.n	80019fc <__aeabi_ddiv+0x230>
 8001cd2:	46ac      	mov	ip, r5
 8001cd4:	4461      	add	r1, ip
 8001cd6:	3f01      	subs	r7, #1
 8001cd8:	428d      	cmp	r5, r1
 8001cda:	d900      	bls.n	8001cde <__aeabi_ddiv+0x512>
 8001cdc:	e680      	b.n	80019e0 <__aeabi_ddiv+0x214>
 8001cde:	428a      	cmp	r2, r1
 8001ce0:	d800      	bhi.n	8001ce4 <__aeabi_ddiv+0x518>
 8001ce2:	e67d      	b.n	80019e0 <__aeabi_ddiv+0x214>
 8001ce4:	1e87      	subs	r7, r0, #2
 8001ce6:	4461      	add	r1, ip
 8001ce8:	e67a      	b.n	80019e0 <__aeabi_ddiv+0x214>
 8001cea:	4285      	cmp	r5, r0
 8001cec:	d000      	beq.n	8001cf0 <__aeabi_ddiv+0x524>
 8001cee:	e65f      	b.n	80019b0 <__aeabi_ddiv+0x1e4>
 8001cf0:	45b9      	cmp	r9, r7
 8001cf2:	d900      	bls.n	8001cf6 <__aeabi_ddiv+0x52a>
 8001cf4:	e65c      	b.n	80019b0 <__aeabi_ddiv+0x1e4>
 8001cf6:	e656      	b.n	80019a6 <__aeabi_ddiv+0x1da>
 8001cf8:	42a2      	cmp	r2, r4
 8001cfa:	d800      	bhi.n	8001cfe <__aeabi_ddiv+0x532>
 8001cfc:	e61a      	b.n	8001934 <__aeabi_ddiv+0x168>
 8001cfe:	1e83      	subs	r3, r0, #2
 8001d00:	4464      	add	r4, ip
 8001d02:	e617      	b.n	8001934 <__aeabi_ddiv+0x168>
 8001d04:	428a      	cmp	r2, r1
 8001d06:	d800      	bhi.n	8001d0a <__aeabi_ddiv+0x53e>
 8001d08:	e600      	b.n	800190c <__aeabi_ddiv+0x140>
 8001d0a:	46ac      	mov	ip, r5
 8001d0c:	1e83      	subs	r3, r0, #2
 8001d0e:	4698      	mov	r8, r3
 8001d10:	4461      	add	r1, ip
 8001d12:	e5fb      	b.n	800190c <__aeabi_ddiv+0x140>
 8001d14:	4837      	ldr	r0, [pc, #220]	@ (8001df4 <__aeabi_ddiv+0x628>)
 8001d16:	0014      	movs	r4, r2
 8001d18:	4450      	add	r0, sl
 8001d1a:	4082      	lsls	r2, r0
 8001d1c:	465b      	mov	r3, fp
 8001d1e:	0017      	movs	r7, r2
 8001d20:	4083      	lsls	r3, r0
 8001d22:	40cc      	lsrs	r4, r1
 8001d24:	1e7a      	subs	r2, r7, #1
 8001d26:	4197      	sbcs	r7, r2
 8001d28:	4323      	orrs	r3, r4
 8001d2a:	433b      	orrs	r3, r7
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	465b      	mov	r3, fp
 8001d30:	40cb      	lsrs	r3, r1
 8001d32:	0751      	lsls	r1, r2, #29
 8001d34:	d009      	beq.n	8001d4a <__aeabi_ddiv+0x57e>
 8001d36:	210f      	movs	r1, #15
 8001d38:	4011      	ands	r1, r2
 8001d3a:	2904      	cmp	r1, #4
 8001d3c:	d005      	beq.n	8001d4a <__aeabi_ddiv+0x57e>
 8001d3e:	1d11      	adds	r1, r2, #4
 8001d40:	4291      	cmp	r1, r2
 8001d42:	4192      	sbcs	r2, r2
 8001d44:	4252      	negs	r2, r2
 8001d46:	189b      	adds	r3, r3, r2
 8001d48:	000a      	movs	r2, r1
 8001d4a:	0219      	lsls	r1, r3, #8
 8001d4c:	d400      	bmi.n	8001d50 <__aeabi_ddiv+0x584>
 8001d4e:	e755      	b.n	8001bfc <__aeabi_ddiv+0x430>
 8001d50:	2200      	movs	r2, #0
 8001d52:	2301      	movs	r3, #1
 8001d54:	2400      	movs	r4, #0
 8001d56:	4690      	mov	r8, r2
 8001d58:	e598      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001d5a:	000a      	movs	r2, r1
 8001d5c:	42bc      	cmp	r4, r7
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_ddiv+0x596>
 8001d60:	e66e      	b.n	8001a40 <__aeabi_ddiv+0x274>
 8001d62:	454b      	cmp	r3, r9
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0x59c>
 8001d66:	e66b      	b.n	8001a40 <__aeabi_ddiv+0x274>
 8001d68:	e66c      	b.n	8001a44 <__aeabi_ddiv+0x278>
 8001d6a:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <__aeabi_ddiv+0x62c>)
 8001d6c:	4a23      	ldr	r2, [pc, #140]	@ (8001dfc <__aeabi_ddiv+0x630>)
 8001d6e:	4453      	add	r3, sl
 8001d70:	4592      	cmp	sl, r2
 8001d72:	da00      	bge.n	8001d76 <__aeabi_ddiv+0x5aa>
 8001d74:	e718      	b.n	8001ba8 <__aeabi_ddiv+0x3dc>
 8001d76:	2101      	movs	r1, #1
 8001d78:	4249      	negs	r1, r1
 8001d7a:	1d0a      	adds	r2, r1, #4
 8001d7c:	428a      	cmp	r2, r1
 8001d7e:	4189      	sbcs	r1, r1
 8001d80:	4249      	negs	r1, r1
 8001d82:	448b      	add	fp, r1
 8001d84:	e666      	b.n	8001a54 <__aeabi_ddiv+0x288>
 8001d86:	210f      	movs	r1, #15
 8001d88:	4011      	ands	r1, r2
 8001d8a:	2904      	cmp	r1, #4
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x5c4>
 8001d8e:	e661      	b.n	8001a54 <__aeabi_ddiv+0x288>
 8001d90:	0011      	movs	r1, r2
 8001d92:	e7f2      	b.n	8001d7a <__aeabi_ddiv+0x5ae>
 8001d94:	42bc      	cmp	r4, r7
 8001d96:	d800      	bhi.n	8001d9a <__aeabi_ddiv+0x5ce>
 8001d98:	e60a      	b.n	80019b0 <__aeabi_ddiv+0x1e4>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	425b      	negs	r3, r3
 8001d9e:	469c      	mov	ip, r3
 8001da0:	9900      	ldr	r1, [sp, #0]
 8001da2:	444f      	add	r7, r9
 8001da4:	454f      	cmp	r7, r9
 8001da6:	419b      	sbcs	r3, r3
 8001da8:	44e3      	add	fp, ip
 8001daa:	468c      	mov	ip, r1
 8001dac:	425b      	negs	r3, r3
 8001dae:	4463      	add	r3, ip
 8001db0:	18c0      	adds	r0, r0, r3
 8001db2:	e5ff      	b.n	80019b4 <__aeabi_ddiv+0x1e8>
 8001db4:	4649      	mov	r1, r9
 8001db6:	9d00      	ldr	r5, [sp, #0]
 8001db8:	0048      	lsls	r0, r1, #1
 8001dba:	4548      	cmp	r0, r9
 8001dbc:	4189      	sbcs	r1, r1
 8001dbe:	46ac      	mov	ip, r5
 8001dc0:	4249      	negs	r1, r1
 8001dc2:	4461      	add	r1, ip
 8001dc4:	4681      	mov	r9, r0
 8001dc6:	3a02      	subs	r2, #2
 8001dc8:	1864      	adds	r4, r4, r1
 8001dca:	e7c7      	b.n	8001d5c <__aeabi_ddiv+0x590>
 8001dcc:	2480      	movs	r4, #128	@ 0x80
 8001dce:	465b      	mov	r3, fp
 8001dd0:	0324      	lsls	r4, r4, #12
 8001dd2:	431c      	orrs	r4, r3
 8001dd4:	0324      	lsls	r4, r4, #12
 8001dd6:	4690      	mov	r8, r2
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <__aeabi_ddiv+0x620>)
 8001dda:	0b24      	lsrs	r4, r4, #12
 8001ddc:	e556      	b.n	800188c <__aeabi_ddiv+0xc0>
 8001dde:	4599      	cmp	r9, r3
 8001de0:	d3e8      	bcc.n	8001db4 <__aeabi_ddiv+0x5e8>
 8001de2:	000a      	movs	r2, r1
 8001de4:	e7bd      	b.n	8001d62 <__aeabi_ddiv+0x596>
 8001de6:	2300      	movs	r3, #0
 8001de8:	e708      	b.n	8001bfc <__aeabi_ddiv+0x430>
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	000007ff 	.word	0x000007ff
 8001df0:	0000043e 	.word	0x0000043e
 8001df4:	0000041e 	.word	0x0000041e
 8001df8:	000003ff 	.word	0x000003ff
 8001dfc:	fffffc02 	.word	0xfffffc02

08001e00 <__eqdf2>:
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	4657      	mov	r7, sl
 8001e04:	46de      	mov	lr, fp
 8001e06:	464e      	mov	r6, r9
 8001e08:	4645      	mov	r5, r8
 8001e0a:	b5e0      	push	{r5, r6, r7, lr}
 8001e0c:	000d      	movs	r5, r1
 8001e0e:	0004      	movs	r4, r0
 8001e10:	0fe8      	lsrs	r0, r5, #31
 8001e12:	4683      	mov	fp, r0
 8001e14:	0309      	lsls	r1, r1, #12
 8001e16:	0fd8      	lsrs	r0, r3, #31
 8001e18:	0b09      	lsrs	r1, r1, #12
 8001e1a:	4682      	mov	sl, r0
 8001e1c:	4819      	ldr	r0, [pc, #100]	@ (8001e84 <__eqdf2+0x84>)
 8001e1e:	468c      	mov	ip, r1
 8001e20:	031f      	lsls	r7, r3, #12
 8001e22:	0069      	lsls	r1, r5, #1
 8001e24:	005e      	lsls	r6, r3, #1
 8001e26:	0d49      	lsrs	r1, r1, #21
 8001e28:	0b3f      	lsrs	r7, r7, #12
 8001e2a:	0d76      	lsrs	r6, r6, #21
 8001e2c:	4281      	cmp	r1, r0
 8001e2e:	d018      	beq.n	8001e62 <__eqdf2+0x62>
 8001e30:	4286      	cmp	r6, r0
 8001e32:	d00f      	beq.n	8001e54 <__eqdf2+0x54>
 8001e34:	2001      	movs	r0, #1
 8001e36:	42b1      	cmp	r1, r6
 8001e38:	d10d      	bne.n	8001e56 <__eqdf2+0x56>
 8001e3a:	45bc      	cmp	ip, r7
 8001e3c:	d10b      	bne.n	8001e56 <__eqdf2+0x56>
 8001e3e:	4294      	cmp	r4, r2
 8001e40:	d109      	bne.n	8001e56 <__eqdf2+0x56>
 8001e42:	45d3      	cmp	fp, sl
 8001e44:	d01c      	beq.n	8001e80 <__eqdf2+0x80>
 8001e46:	2900      	cmp	r1, #0
 8001e48:	d105      	bne.n	8001e56 <__eqdf2+0x56>
 8001e4a:	4660      	mov	r0, ip
 8001e4c:	4320      	orrs	r0, r4
 8001e4e:	1e43      	subs	r3, r0, #1
 8001e50:	4198      	sbcs	r0, r3
 8001e52:	e000      	b.n	8001e56 <__eqdf2+0x56>
 8001e54:	2001      	movs	r0, #1
 8001e56:	bcf0      	pop	{r4, r5, r6, r7}
 8001e58:	46bb      	mov	fp, r7
 8001e5a:	46b2      	mov	sl, r6
 8001e5c:	46a9      	mov	r9, r5
 8001e5e:	46a0      	mov	r8, r4
 8001e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e62:	2001      	movs	r0, #1
 8001e64:	428e      	cmp	r6, r1
 8001e66:	d1f6      	bne.n	8001e56 <__eqdf2+0x56>
 8001e68:	4661      	mov	r1, ip
 8001e6a:	4339      	orrs	r1, r7
 8001e6c:	000f      	movs	r7, r1
 8001e6e:	4317      	orrs	r7, r2
 8001e70:	4327      	orrs	r7, r4
 8001e72:	d1f0      	bne.n	8001e56 <__eqdf2+0x56>
 8001e74:	465b      	mov	r3, fp
 8001e76:	4652      	mov	r2, sl
 8001e78:	1a98      	subs	r0, r3, r2
 8001e7a:	1e43      	subs	r3, r0, #1
 8001e7c:	4198      	sbcs	r0, r3
 8001e7e:	e7ea      	b.n	8001e56 <__eqdf2+0x56>
 8001e80:	2000      	movs	r0, #0
 8001e82:	e7e8      	b.n	8001e56 <__eqdf2+0x56>
 8001e84:	000007ff 	.word	0x000007ff

08001e88 <__gedf2>:
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	4657      	mov	r7, sl
 8001e8c:	464e      	mov	r6, r9
 8001e8e:	4645      	mov	r5, r8
 8001e90:	46de      	mov	lr, fp
 8001e92:	b5e0      	push	{r5, r6, r7, lr}
 8001e94:	000d      	movs	r5, r1
 8001e96:	030f      	lsls	r7, r1, #12
 8001e98:	0b39      	lsrs	r1, r7, #12
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	0004      	movs	r4, r0
 8001e9e:	4680      	mov	r8, r0
 8001ea0:	9101      	str	r1, [sp, #4]
 8001ea2:	0058      	lsls	r0, r3, #1
 8001ea4:	0fe9      	lsrs	r1, r5, #31
 8001ea6:	4f31      	ldr	r7, [pc, #196]	@ (8001f6c <__gedf2+0xe4>)
 8001ea8:	0d40      	lsrs	r0, r0, #21
 8001eaa:	468c      	mov	ip, r1
 8001eac:	006e      	lsls	r6, r5, #1
 8001eae:	0319      	lsls	r1, r3, #12
 8001eb0:	4682      	mov	sl, r0
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	0d76      	lsrs	r6, r6, #21
 8001eb6:	0b09      	lsrs	r1, r1, #12
 8001eb8:	0fd8      	lsrs	r0, r3, #31
 8001eba:	42be      	cmp	r6, r7
 8001ebc:	d01f      	beq.n	8001efe <__gedf2+0x76>
 8001ebe:	45ba      	cmp	sl, r7
 8001ec0:	d00f      	beq.n	8001ee2 <__gedf2+0x5a>
 8001ec2:	2e00      	cmp	r6, #0
 8001ec4:	d12f      	bne.n	8001f26 <__gedf2+0x9e>
 8001ec6:	4655      	mov	r5, sl
 8001ec8:	9e01      	ldr	r6, [sp, #4]
 8001eca:	4334      	orrs	r4, r6
 8001ecc:	2d00      	cmp	r5, #0
 8001ece:	d127      	bne.n	8001f20 <__gedf2+0x98>
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	d03a      	beq.n	8001f4a <__gedf2+0xc2>
 8001ed4:	2c00      	cmp	r4, #0
 8001ed6:	d145      	bne.n	8001f64 <__gedf2+0xdc>
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	d11a      	bne.n	8001f12 <__gedf2+0x8a>
 8001edc:	2001      	movs	r0, #1
 8001ede:	4240      	negs	r0, r0
 8001ee0:	e017      	b.n	8001f12 <__gedf2+0x8a>
 8001ee2:	4311      	orrs	r1, r2
 8001ee4:	d13b      	bne.n	8001f5e <__gedf2+0xd6>
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	d102      	bne.n	8001ef0 <__gedf2+0x68>
 8001eea:	9f01      	ldr	r7, [sp, #4]
 8001eec:	4327      	orrs	r7, r4
 8001eee:	d0f3      	beq.n	8001ed8 <__gedf2+0x50>
 8001ef0:	4584      	cmp	ip, r0
 8001ef2:	d109      	bne.n	8001f08 <__gedf2+0x80>
 8001ef4:	4663      	mov	r3, ip
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <__gedf2+0x54>
 8001efa:	4660      	mov	r0, ip
 8001efc:	e009      	b.n	8001f12 <__gedf2+0x8a>
 8001efe:	9f01      	ldr	r7, [sp, #4]
 8001f00:	4327      	orrs	r7, r4
 8001f02:	d12c      	bne.n	8001f5e <__gedf2+0xd6>
 8001f04:	45b2      	cmp	sl, r6
 8001f06:	d024      	beq.n	8001f52 <__gedf2+0xca>
 8001f08:	4663      	mov	r3, ip
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	4018      	ands	r0, r3
 8001f10:	3801      	subs	r0, #1
 8001f12:	b003      	add	sp, #12
 8001f14:	bcf0      	pop	{r4, r5, r6, r7}
 8001f16:	46bb      	mov	fp, r7
 8001f18:	46b2      	mov	sl, r6
 8001f1a:	46a9      	mov	r9, r5
 8001f1c:	46a0      	mov	r8, r4
 8001f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f20:	2c00      	cmp	r4, #0
 8001f22:	d0d9      	beq.n	8001ed8 <__gedf2+0x50>
 8001f24:	e7e4      	b.n	8001ef0 <__gedf2+0x68>
 8001f26:	4654      	mov	r4, sl
 8001f28:	2c00      	cmp	r4, #0
 8001f2a:	d0ed      	beq.n	8001f08 <__gedf2+0x80>
 8001f2c:	4584      	cmp	ip, r0
 8001f2e:	d1eb      	bne.n	8001f08 <__gedf2+0x80>
 8001f30:	4556      	cmp	r6, sl
 8001f32:	dce9      	bgt.n	8001f08 <__gedf2+0x80>
 8001f34:	dbde      	blt.n	8001ef4 <__gedf2+0x6c>
 8001f36:	9b01      	ldr	r3, [sp, #4]
 8001f38:	428b      	cmp	r3, r1
 8001f3a:	d8e5      	bhi.n	8001f08 <__gedf2+0x80>
 8001f3c:	d1da      	bne.n	8001ef4 <__gedf2+0x6c>
 8001f3e:	45c8      	cmp	r8, r9
 8001f40:	d8e2      	bhi.n	8001f08 <__gedf2+0x80>
 8001f42:	2000      	movs	r0, #0
 8001f44:	45c8      	cmp	r8, r9
 8001f46:	d2e4      	bcs.n	8001f12 <__gedf2+0x8a>
 8001f48:	e7d4      	b.n	8001ef4 <__gedf2+0x6c>
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	2c00      	cmp	r4, #0
 8001f4e:	d0e0      	beq.n	8001f12 <__gedf2+0x8a>
 8001f50:	e7da      	b.n	8001f08 <__gedf2+0x80>
 8001f52:	4311      	orrs	r1, r2
 8001f54:	d103      	bne.n	8001f5e <__gedf2+0xd6>
 8001f56:	4584      	cmp	ip, r0
 8001f58:	d1d6      	bne.n	8001f08 <__gedf2+0x80>
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	e7d9      	b.n	8001f12 <__gedf2+0x8a>
 8001f5e:	2002      	movs	r0, #2
 8001f60:	4240      	negs	r0, r0
 8001f62:	e7d6      	b.n	8001f12 <__gedf2+0x8a>
 8001f64:	4584      	cmp	ip, r0
 8001f66:	d0e6      	beq.n	8001f36 <__gedf2+0xae>
 8001f68:	e7ce      	b.n	8001f08 <__gedf2+0x80>
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	000007ff 	.word	0x000007ff

08001f70 <__ledf2>:
 8001f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f72:	4657      	mov	r7, sl
 8001f74:	464e      	mov	r6, r9
 8001f76:	4645      	mov	r5, r8
 8001f78:	46de      	mov	lr, fp
 8001f7a:	b5e0      	push	{r5, r6, r7, lr}
 8001f7c:	000d      	movs	r5, r1
 8001f7e:	030f      	lsls	r7, r1, #12
 8001f80:	0004      	movs	r4, r0
 8001f82:	4680      	mov	r8, r0
 8001f84:	0fe8      	lsrs	r0, r5, #31
 8001f86:	0b39      	lsrs	r1, r7, #12
 8001f88:	4684      	mov	ip, r0
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	0058      	lsls	r0, r3, #1
 8001f8e:	4f30      	ldr	r7, [pc, #192]	@ (8002050 <__ledf2+0xe0>)
 8001f90:	0d40      	lsrs	r0, r0, #21
 8001f92:	9101      	str	r1, [sp, #4]
 8001f94:	031e      	lsls	r6, r3, #12
 8001f96:	0069      	lsls	r1, r5, #1
 8001f98:	4682      	mov	sl, r0
 8001f9a:	4691      	mov	r9, r2
 8001f9c:	0d49      	lsrs	r1, r1, #21
 8001f9e:	0b36      	lsrs	r6, r6, #12
 8001fa0:	0fd8      	lsrs	r0, r3, #31
 8001fa2:	42b9      	cmp	r1, r7
 8001fa4:	d020      	beq.n	8001fe8 <__ledf2+0x78>
 8001fa6:	45ba      	cmp	sl, r7
 8001fa8:	d00f      	beq.n	8001fca <__ledf2+0x5a>
 8001faa:	2900      	cmp	r1, #0
 8001fac:	d12b      	bne.n	8002006 <__ledf2+0x96>
 8001fae:	9901      	ldr	r1, [sp, #4]
 8001fb0:	430c      	orrs	r4, r1
 8001fb2:	4651      	mov	r1, sl
 8001fb4:	2900      	cmp	r1, #0
 8001fb6:	d137      	bne.n	8002028 <__ledf2+0xb8>
 8001fb8:	4332      	orrs	r2, r6
 8001fba:	d038      	beq.n	800202e <__ledf2+0xbe>
 8001fbc:	2c00      	cmp	r4, #0
 8001fbe:	d144      	bne.n	800204a <__ledf2+0xda>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d119      	bne.n	8001ff8 <__ledf2+0x88>
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	4240      	negs	r0, r0
 8001fc8:	e016      	b.n	8001ff8 <__ledf2+0x88>
 8001fca:	4316      	orrs	r6, r2
 8001fcc:	d113      	bne.n	8001ff6 <__ledf2+0x86>
 8001fce:	2900      	cmp	r1, #0
 8001fd0:	d102      	bne.n	8001fd8 <__ledf2+0x68>
 8001fd2:	9f01      	ldr	r7, [sp, #4]
 8001fd4:	4327      	orrs	r7, r4
 8001fd6:	d0f3      	beq.n	8001fc0 <__ledf2+0x50>
 8001fd8:	4584      	cmp	ip, r0
 8001fda:	d020      	beq.n	800201e <__ledf2+0xae>
 8001fdc:	4663      	mov	r3, ip
 8001fde:	2002      	movs	r0, #2
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	4018      	ands	r0, r3
 8001fe4:	3801      	subs	r0, #1
 8001fe6:	e007      	b.n	8001ff8 <__ledf2+0x88>
 8001fe8:	9f01      	ldr	r7, [sp, #4]
 8001fea:	4327      	orrs	r7, r4
 8001fec:	d103      	bne.n	8001ff6 <__ledf2+0x86>
 8001fee:	458a      	cmp	sl, r1
 8001ff0:	d1f4      	bne.n	8001fdc <__ledf2+0x6c>
 8001ff2:	4316      	orrs	r6, r2
 8001ff4:	d01f      	beq.n	8002036 <__ledf2+0xc6>
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	b003      	add	sp, #12
 8001ffa:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffc:	46bb      	mov	fp, r7
 8001ffe:	46b2      	mov	sl, r6
 8002000:	46a9      	mov	r9, r5
 8002002:	46a0      	mov	r8, r4
 8002004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002006:	4654      	mov	r4, sl
 8002008:	2c00      	cmp	r4, #0
 800200a:	d0e7      	beq.n	8001fdc <__ledf2+0x6c>
 800200c:	4584      	cmp	ip, r0
 800200e:	d1e5      	bne.n	8001fdc <__ledf2+0x6c>
 8002010:	4551      	cmp	r1, sl
 8002012:	dce3      	bgt.n	8001fdc <__ledf2+0x6c>
 8002014:	db03      	blt.n	800201e <__ledf2+0xae>
 8002016:	9b01      	ldr	r3, [sp, #4]
 8002018:	42b3      	cmp	r3, r6
 800201a:	d8df      	bhi.n	8001fdc <__ledf2+0x6c>
 800201c:	d00f      	beq.n	800203e <__ledf2+0xce>
 800201e:	4663      	mov	r3, ip
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0cf      	beq.n	8001fc4 <__ledf2+0x54>
 8002024:	4660      	mov	r0, ip
 8002026:	e7e7      	b.n	8001ff8 <__ledf2+0x88>
 8002028:	2c00      	cmp	r4, #0
 800202a:	d0c9      	beq.n	8001fc0 <__ledf2+0x50>
 800202c:	e7d4      	b.n	8001fd8 <__ledf2+0x68>
 800202e:	2000      	movs	r0, #0
 8002030:	2c00      	cmp	r4, #0
 8002032:	d0e1      	beq.n	8001ff8 <__ledf2+0x88>
 8002034:	e7d2      	b.n	8001fdc <__ledf2+0x6c>
 8002036:	4584      	cmp	ip, r0
 8002038:	d1d0      	bne.n	8001fdc <__ledf2+0x6c>
 800203a:	2000      	movs	r0, #0
 800203c:	e7dc      	b.n	8001ff8 <__ledf2+0x88>
 800203e:	45c8      	cmp	r8, r9
 8002040:	d8cc      	bhi.n	8001fdc <__ledf2+0x6c>
 8002042:	2000      	movs	r0, #0
 8002044:	45c8      	cmp	r8, r9
 8002046:	d2d7      	bcs.n	8001ff8 <__ledf2+0x88>
 8002048:	e7e9      	b.n	800201e <__ledf2+0xae>
 800204a:	4584      	cmp	ip, r0
 800204c:	d0e3      	beq.n	8002016 <__ledf2+0xa6>
 800204e:	e7c5      	b.n	8001fdc <__ledf2+0x6c>
 8002050:	000007ff 	.word	0x000007ff

08002054 <__aeabi_dmul>:
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	4657      	mov	r7, sl
 8002058:	46de      	mov	lr, fp
 800205a:	464e      	mov	r6, r9
 800205c:	4645      	mov	r5, r8
 800205e:	b5e0      	push	{r5, r6, r7, lr}
 8002060:	001f      	movs	r7, r3
 8002062:	030b      	lsls	r3, r1, #12
 8002064:	0b1b      	lsrs	r3, r3, #12
 8002066:	0016      	movs	r6, r2
 8002068:	469a      	mov	sl, r3
 800206a:	0fca      	lsrs	r2, r1, #31
 800206c:	004b      	lsls	r3, r1, #1
 800206e:	0004      	movs	r4, r0
 8002070:	4693      	mov	fp, r2
 8002072:	b087      	sub	sp, #28
 8002074:	0d5b      	lsrs	r3, r3, #21
 8002076:	d100      	bne.n	800207a <__aeabi_dmul+0x26>
 8002078:	e0d5      	b.n	8002226 <__aeabi_dmul+0x1d2>
 800207a:	4abb      	ldr	r2, [pc, #748]	@ (8002368 <__aeabi_dmul+0x314>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d100      	bne.n	8002082 <__aeabi_dmul+0x2e>
 8002080:	e0f8      	b.n	8002274 <__aeabi_dmul+0x220>
 8002082:	4651      	mov	r1, sl
 8002084:	0f42      	lsrs	r2, r0, #29
 8002086:	00c9      	lsls	r1, r1, #3
 8002088:	430a      	orrs	r2, r1
 800208a:	2180      	movs	r1, #128	@ 0x80
 800208c:	0409      	lsls	r1, r1, #16
 800208e:	4311      	orrs	r1, r2
 8002090:	00c2      	lsls	r2, r0, #3
 8002092:	4691      	mov	r9, r2
 8002094:	4ab5      	ldr	r2, [pc, #724]	@ (800236c <__aeabi_dmul+0x318>)
 8002096:	468a      	mov	sl, r1
 8002098:	189d      	adds	r5, r3, r2
 800209a:	2300      	movs	r3, #0
 800209c:	4698      	mov	r8, r3
 800209e:	9302      	str	r3, [sp, #8]
 80020a0:	033c      	lsls	r4, r7, #12
 80020a2:	007b      	lsls	r3, r7, #1
 80020a4:	0ffa      	lsrs	r2, r7, #31
 80020a6:	0030      	movs	r0, r6
 80020a8:	0b24      	lsrs	r4, r4, #12
 80020aa:	0d5b      	lsrs	r3, r3, #21
 80020ac:	9200      	str	r2, [sp, #0]
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dmul+0x5e>
 80020b0:	e096      	b.n	80021e0 <__aeabi_dmul+0x18c>
 80020b2:	4aad      	ldr	r2, [pc, #692]	@ (8002368 <__aeabi_dmul+0x314>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d031      	beq.n	800211c <__aeabi_dmul+0xc8>
 80020b8:	0f72      	lsrs	r2, r6, #29
 80020ba:	00e4      	lsls	r4, r4, #3
 80020bc:	4322      	orrs	r2, r4
 80020be:	2480      	movs	r4, #128	@ 0x80
 80020c0:	0424      	lsls	r4, r4, #16
 80020c2:	4314      	orrs	r4, r2
 80020c4:	4aa9      	ldr	r2, [pc, #676]	@ (800236c <__aeabi_dmul+0x318>)
 80020c6:	00f0      	lsls	r0, r6, #3
 80020c8:	4694      	mov	ip, r2
 80020ca:	4463      	add	r3, ip
 80020cc:	195b      	adds	r3, r3, r5
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	9201      	str	r2, [sp, #4]
 80020d2:	4642      	mov	r2, r8
 80020d4:	2600      	movs	r6, #0
 80020d6:	2a0a      	cmp	r2, #10
 80020d8:	dc42      	bgt.n	8002160 <__aeabi_dmul+0x10c>
 80020da:	465a      	mov	r2, fp
 80020dc:	9900      	ldr	r1, [sp, #0]
 80020de:	404a      	eors	r2, r1
 80020e0:	4693      	mov	fp, r2
 80020e2:	4642      	mov	r2, r8
 80020e4:	2a02      	cmp	r2, #2
 80020e6:	dc32      	bgt.n	800214e <__aeabi_dmul+0xfa>
 80020e8:	3a01      	subs	r2, #1
 80020ea:	2a01      	cmp	r2, #1
 80020ec:	d900      	bls.n	80020f0 <__aeabi_dmul+0x9c>
 80020ee:	e149      	b.n	8002384 <__aeabi_dmul+0x330>
 80020f0:	2e02      	cmp	r6, #2
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dmul+0xa2>
 80020f4:	e0ca      	b.n	800228c <__aeabi_dmul+0x238>
 80020f6:	2e01      	cmp	r6, #1
 80020f8:	d13d      	bne.n	8002176 <__aeabi_dmul+0x122>
 80020fa:	2300      	movs	r3, #0
 80020fc:	2400      	movs	r4, #0
 80020fe:	2200      	movs	r2, #0
 8002100:	0010      	movs	r0, r2
 8002102:	465a      	mov	r2, fp
 8002104:	051b      	lsls	r3, r3, #20
 8002106:	4323      	orrs	r3, r4
 8002108:	07d2      	lsls	r2, r2, #31
 800210a:	4313      	orrs	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	b007      	add	sp, #28
 8002110:	bcf0      	pop	{r4, r5, r6, r7}
 8002112:	46bb      	mov	fp, r7
 8002114:	46b2      	mov	sl, r6
 8002116:	46a9      	mov	r9, r5
 8002118:	46a0      	mov	r8, r4
 800211a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211c:	4b92      	ldr	r3, [pc, #584]	@ (8002368 <__aeabi_dmul+0x314>)
 800211e:	4326      	orrs	r6, r4
 8002120:	18eb      	adds	r3, r5, r3
 8002122:	2e00      	cmp	r6, #0
 8002124:	d100      	bne.n	8002128 <__aeabi_dmul+0xd4>
 8002126:	e0bb      	b.n	80022a0 <__aeabi_dmul+0x24c>
 8002128:	2203      	movs	r2, #3
 800212a:	4641      	mov	r1, r8
 800212c:	4311      	orrs	r1, r2
 800212e:	465a      	mov	r2, fp
 8002130:	4688      	mov	r8, r1
 8002132:	9900      	ldr	r1, [sp, #0]
 8002134:	404a      	eors	r2, r1
 8002136:	2180      	movs	r1, #128	@ 0x80
 8002138:	0109      	lsls	r1, r1, #4
 800213a:	468c      	mov	ip, r1
 800213c:	0029      	movs	r1, r5
 800213e:	4461      	add	r1, ip
 8002140:	9101      	str	r1, [sp, #4]
 8002142:	4641      	mov	r1, r8
 8002144:	290a      	cmp	r1, #10
 8002146:	dd00      	ble.n	800214a <__aeabi_dmul+0xf6>
 8002148:	e233      	b.n	80025b2 <__aeabi_dmul+0x55e>
 800214a:	4693      	mov	fp, r2
 800214c:	2603      	movs	r6, #3
 800214e:	4642      	mov	r2, r8
 8002150:	2701      	movs	r7, #1
 8002152:	4097      	lsls	r7, r2
 8002154:	21a6      	movs	r1, #166	@ 0xa6
 8002156:	003a      	movs	r2, r7
 8002158:	00c9      	lsls	r1, r1, #3
 800215a:	400a      	ands	r2, r1
 800215c:	420f      	tst	r7, r1
 800215e:	d031      	beq.n	80021c4 <__aeabi_dmul+0x170>
 8002160:	9e02      	ldr	r6, [sp, #8]
 8002162:	2e02      	cmp	r6, #2
 8002164:	d100      	bne.n	8002168 <__aeabi_dmul+0x114>
 8002166:	e235      	b.n	80025d4 <__aeabi_dmul+0x580>
 8002168:	2e03      	cmp	r6, #3
 800216a:	d100      	bne.n	800216e <__aeabi_dmul+0x11a>
 800216c:	e1d2      	b.n	8002514 <__aeabi_dmul+0x4c0>
 800216e:	4654      	mov	r4, sl
 8002170:	4648      	mov	r0, r9
 8002172:	2e01      	cmp	r6, #1
 8002174:	d0c1      	beq.n	80020fa <__aeabi_dmul+0xa6>
 8002176:	9a01      	ldr	r2, [sp, #4]
 8002178:	4b7d      	ldr	r3, [pc, #500]	@ (8002370 <__aeabi_dmul+0x31c>)
 800217a:	4694      	mov	ip, r2
 800217c:	4463      	add	r3, ip
 800217e:	2b00      	cmp	r3, #0
 8002180:	dc00      	bgt.n	8002184 <__aeabi_dmul+0x130>
 8002182:	e0c0      	b.n	8002306 <__aeabi_dmul+0x2b2>
 8002184:	0742      	lsls	r2, r0, #29
 8002186:	d009      	beq.n	800219c <__aeabi_dmul+0x148>
 8002188:	220f      	movs	r2, #15
 800218a:	4002      	ands	r2, r0
 800218c:	2a04      	cmp	r2, #4
 800218e:	d005      	beq.n	800219c <__aeabi_dmul+0x148>
 8002190:	1d02      	adds	r2, r0, #4
 8002192:	4282      	cmp	r2, r0
 8002194:	4180      	sbcs	r0, r0
 8002196:	4240      	negs	r0, r0
 8002198:	1824      	adds	r4, r4, r0
 800219a:	0010      	movs	r0, r2
 800219c:	01e2      	lsls	r2, r4, #7
 800219e:	d506      	bpl.n	80021ae <__aeabi_dmul+0x15a>
 80021a0:	4b74      	ldr	r3, [pc, #464]	@ (8002374 <__aeabi_dmul+0x320>)
 80021a2:	9a01      	ldr	r2, [sp, #4]
 80021a4:	401c      	ands	r4, r3
 80021a6:	2380      	movs	r3, #128	@ 0x80
 80021a8:	4694      	mov	ip, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4463      	add	r3, ip
 80021ae:	4a72      	ldr	r2, [pc, #456]	@ (8002378 <__aeabi_dmul+0x324>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	dc6b      	bgt.n	800228c <__aeabi_dmul+0x238>
 80021b4:	0762      	lsls	r2, r4, #29
 80021b6:	08c0      	lsrs	r0, r0, #3
 80021b8:	0264      	lsls	r4, r4, #9
 80021ba:	055b      	lsls	r3, r3, #21
 80021bc:	4302      	orrs	r2, r0
 80021be:	0b24      	lsrs	r4, r4, #12
 80021c0:	0d5b      	lsrs	r3, r3, #21
 80021c2:	e79d      	b.n	8002100 <__aeabi_dmul+0xac>
 80021c4:	2190      	movs	r1, #144	@ 0x90
 80021c6:	0089      	lsls	r1, r1, #2
 80021c8:	420f      	tst	r7, r1
 80021ca:	d163      	bne.n	8002294 <__aeabi_dmul+0x240>
 80021cc:	2288      	movs	r2, #136	@ 0x88
 80021ce:	423a      	tst	r2, r7
 80021d0:	d100      	bne.n	80021d4 <__aeabi_dmul+0x180>
 80021d2:	e0d7      	b.n	8002384 <__aeabi_dmul+0x330>
 80021d4:	9b00      	ldr	r3, [sp, #0]
 80021d6:	46a2      	mov	sl, r4
 80021d8:	469b      	mov	fp, r3
 80021da:	4681      	mov	r9, r0
 80021dc:	9602      	str	r6, [sp, #8]
 80021de:	e7bf      	b.n	8002160 <__aeabi_dmul+0x10c>
 80021e0:	0023      	movs	r3, r4
 80021e2:	4333      	orrs	r3, r6
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dmul+0x194>
 80021e6:	e07f      	b.n	80022e8 <__aeabi_dmul+0x294>
 80021e8:	2c00      	cmp	r4, #0
 80021ea:	d100      	bne.n	80021ee <__aeabi_dmul+0x19a>
 80021ec:	e1ad      	b.n	800254a <__aeabi_dmul+0x4f6>
 80021ee:	0020      	movs	r0, r4
 80021f0:	f000 ff10 	bl	8003014 <__clzsi2>
 80021f4:	0002      	movs	r2, r0
 80021f6:	0003      	movs	r3, r0
 80021f8:	3a0b      	subs	r2, #11
 80021fa:	201d      	movs	r0, #29
 80021fc:	0019      	movs	r1, r3
 80021fe:	1a82      	subs	r2, r0, r2
 8002200:	0030      	movs	r0, r6
 8002202:	3908      	subs	r1, #8
 8002204:	40d0      	lsrs	r0, r2
 8002206:	408c      	lsls	r4, r1
 8002208:	4304      	orrs	r4, r0
 800220a:	0030      	movs	r0, r6
 800220c:	4088      	lsls	r0, r1
 800220e:	4a5b      	ldr	r2, [pc, #364]	@ (800237c <__aeabi_dmul+0x328>)
 8002210:	1aeb      	subs	r3, r5, r3
 8002212:	4694      	mov	ip, r2
 8002214:	4463      	add	r3, ip
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	9201      	str	r2, [sp, #4]
 800221a:	4642      	mov	r2, r8
 800221c:	2600      	movs	r6, #0
 800221e:	2a0a      	cmp	r2, #10
 8002220:	dc00      	bgt.n	8002224 <__aeabi_dmul+0x1d0>
 8002222:	e75a      	b.n	80020da <__aeabi_dmul+0x86>
 8002224:	e79c      	b.n	8002160 <__aeabi_dmul+0x10c>
 8002226:	4653      	mov	r3, sl
 8002228:	4303      	orrs	r3, r0
 800222a:	4699      	mov	r9, r3
 800222c:	d054      	beq.n	80022d8 <__aeabi_dmul+0x284>
 800222e:	4653      	mov	r3, sl
 8002230:	2b00      	cmp	r3, #0
 8002232:	d100      	bne.n	8002236 <__aeabi_dmul+0x1e2>
 8002234:	e177      	b.n	8002526 <__aeabi_dmul+0x4d2>
 8002236:	4650      	mov	r0, sl
 8002238:	f000 feec 	bl	8003014 <__clzsi2>
 800223c:	230b      	movs	r3, #11
 800223e:	425b      	negs	r3, r3
 8002240:	469c      	mov	ip, r3
 8002242:	0002      	movs	r2, r0
 8002244:	4484      	add	ip, r0
 8002246:	0011      	movs	r1, r2
 8002248:	4650      	mov	r0, sl
 800224a:	3908      	subs	r1, #8
 800224c:	4088      	lsls	r0, r1
 800224e:	231d      	movs	r3, #29
 8002250:	4680      	mov	r8, r0
 8002252:	4660      	mov	r0, ip
 8002254:	1a1b      	subs	r3, r3, r0
 8002256:	0020      	movs	r0, r4
 8002258:	40d8      	lsrs	r0, r3
 800225a:	0003      	movs	r3, r0
 800225c:	4640      	mov	r0, r8
 800225e:	4303      	orrs	r3, r0
 8002260:	469a      	mov	sl, r3
 8002262:	0023      	movs	r3, r4
 8002264:	408b      	lsls	r3, r1
 8002266:	4699      	mov	r9, r3
 8002268:	2300      	movs	r3, #0
 800226a:	4d44      	ldr	r5, [pc, #272]	@ (800237c <__aeabi_dmul+0x328>)
 800226c:	4698      	mov	r8, r3
 800226e:	1aad      	subs	r5, r5, r2
 8002270:	9302      	str	r3, [sp, #8]
 8002272:	e715      	b.n	80020a0 <__aeabi_dmul+0x4c>
 8002274:	4652      	mov	r2, sl
 8002276:	4302      	orrs	r2, r0
 8002278:	4691      	mov	r9, r2
 800227a:	d126      	bne.n	80022ca <__aeabi_dmul+0x276>
 800227c:	2200      	movs	r2, #0
 800227e:	001d      	movs	r5, r3
 8002280:	2302      	movs	r3, #2
 8002282:	4692      	mov	sl, r2
 8002284:	3208      	adds	r2, #8
 8002286:	4690      	mov	r8, r2
 8002288:	9302      	str	r3, [sp, #8]
 800228a:	e709      	b.n	80020a0 <__aeabi_dmul+0x4c>
 800228c:	2400      	movs	r4, #0
 800228e:	2200      	movs	r2, #0
 8002290:	4b35      	ldr	r3, [pc, #212]	@ (8002368 <__aeabi_dmul+0x314>)
 8002292:	e735      	b.n	8002100 <__aeabi_dmul+0xac>
 8002294:	2300      	movs	r3, #0
 8002296:	2480      	movs	r4, #128	@ 0x80
 8002298:	469b      	mov	fp, r3
 800229a:	0324      	lsls	r4, r4, #12
 800229c:	4b32      	ldr	r3, [pc, #200]	@ (8002368 <__aeabi_dmul+0x314>)
 800229e:	e72f      	b.n	8002100 <__aeabi_dmul+0xac>
 80022a0:	2202      	movs	r2, #2
 80022a2:	4641      	mov	r1, r8
 80022a4:	4311      	orrs	r1, r2
 80022a6:	2280      	movs	r2, #128	@ 0x80
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	4694      	mov	ip, r2
 80022ac:	002a      	movs	r2, r5
 80022ae:	4462      	add	r2, ip
 80022b0:	4688      	mov	r8, r1
 80022b2:	9201      	str	r2, [sp, #4]
 80022b4:	290a      	cmp	r1, #10
 80022b6:	dd00      	ble.n	80022ba <__aeabi_dmul+0x266>
 80022b8:	e752      	b.n	8002160 <__aeabi_dmul+0x10c>
 80022ba:	465a      	mov	r2, fp
 80022bc:	2000      	movs	r0, #0
 80022be:	9900      	ldr	r1, [sp, #0]
 80022c0:	0004      	movs	r4, r0
 80022c2:	404a      	eors	r2, r1
 80022c4:	4693      	mov	fp, r2
 80022c6:	2602      	movs	r6, #2
 80022c8:	e70b      	b.n	80020e2 <__aeabi_dmul+0x8e>
 80022ca:	220c      	movs	r2, #12
 80022cc:	001d      	movs	r5, r3
 80022ce:	2303      	movs	r3, #3
 80022d0:	4681      	mov	r9, r0
 80022d2:	4690      	mov	r8, r2
 80022d4:	9302      	str	r3, [sp, #8]
 80022d6:	e6e3      	b.n	80020a0 <__aeabi_dmul+0x4c>
 80022d8:	2300      	movs	r3, #0
 80022da:	469a      	mov	sl, r3
 80022dc:	3304      	adds	r3, #4
 80022de:	4698      	mov	r8, r3
 80022e0:	3b03      	subs	r3, #3
 80022e2:	2500      	movs	r5, #0
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	e6db      	b.n	80020a0 <__aeabi_dmul+0x4c>
 80022e8:	4642      	mov	r2, r8
 80022ea:	3301      	adds	r3, #1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	002b      	movs	r3, r5
 80022f0:	4690      	mov	r8, r2
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	9201      	str	r2, [sp, #4]
 80022f6:	4642      	mov	r2, r8
 80022f8:	2400      	movs	r4, #0
 80022fa:	2000      	movs	r0, #0
 80022fc:	2601      	movs	r6, #1
 80022fe:	2a0a      	cmp	r2, #10
 8002300:	dc00      	bgt.n	8002304 <__aeabi_dmul+0x2b0>
 8002302:	e6ea      	b.n	80020da <__aeabi_dmul+0x86>
 8002304:	e72c      	b.n	8002160 <__aeabi_dmul+0x10c>
 8002306:	2201      	movs	r2, #1
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	2a38      	cmp	r2, #56	@ 0x38
 800230c:	dd00      	ble.n	8002310 <__aeabi_dmul+0x2bc>
 800230e:	e6f4      	b.n	80020fa <__aeabi_dmul+0xa6>
 8002310:	2a1f      	cmp	r2, #31
 8002312:	dc00      	bgt.n	8002316 <__aeabi_dmul+0x2c2>
 8002314:	e12a      	b.n	800256c <__aeabi_dmul+0x518>
 8002316:	211f      	movs	r1, #31
 8002318:	4249      	negs	r1, r1
 800231a:	1acb      	subs	r3, r1, r3
 800231c:	0021      	movs	r1, r4
 800231e:	40d9      	lsrs	r1, r3
 8002320:	000b      	movs	r3, r1
 8002322:	2a20      	cmp	r2, #32
 8002324:	d005      	beq.n	8002332 <__aeabi_dmul+0x2de>
 8002326:	4a16      	ldr	r2, [pc, #88]	@ (8002380 <__aeabi_dmul+0x32c>)
 8002328:	9d01      	ldr	r5, [sp, #4]
 800232a:	4694      	mov	ip, r2
 800232c:	4465      	add	r5, ip
 800232e:	40ac      	lsls	r4, r5
 8002330:	4320      	orrs	r0, r4
 8002332:	1e42      	subs	r2, r0, #1
 8002334:	4190      	sbcs	r0, r2
 8002336:	4318      	orrs	r0, r3
 8002338:	2307      	movs	r3, #7
 800233a:	0019      	movs	r1, r3
 800233c:	2400      	movs	r4, #0
 800233e:	4001      	ands	r1, r0
 8002340:	4203      	tst	r3, r0
 8002342:	d00c      	beq.n	800235e <__aeabi_dmul+0x30a>
 8002344:	230f      	movs	r3, #15
 8002346:	4003      	ands	r3, r0
 8002348:	2b04      	cmp	r3, #4
 800234a:	d100      	bne.n	800234e <__aeabi_dmul+0x2fa>
 800234c:	e140      	b.n	80025d0 <__aeabi_dmul+0x57c>
 800234e:	1d03      	adds	r3, r0, #4
 8002350:	4283      	cmp	r3, r0
 8002352:	41a4      	sbcs	r4, r4
 8002354:	0018      	movs	r0, r3
 8002356:	4264      	negs	r4, r4
 8002358:	0761      	lsls	r1, r4, #29
 800235a:	0264      	lsls	r4, r4, #9
 800235c:	0b24      	lsrs	r4, r4, #12
 800235e:	08c2      	lsrs	r2, r0, #3
 8002360:	2300      	movs	r3, #0
 8002362:	430a      	orrs	r2, r1
 8002364:	e6cc      	b.n	8002100 <__aeabi_dmul+0xac>
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	000007ff 	.word	0x000007ff
 800236c:	fffffc01 	.word	0xfffffc01
 8002370:	000003ff 	.word	0x000003ff
 8002374:	feffffff 	.word	0xfeffffff
 8002378:	000007fe 	.word	0x000007fe
 800237c:	fffffc0d 	.word	0xfffffc0d
 8002380:	0000043e 	.word	0x0000043e
 8002384:	4649      	mov	r1, r9
 8002386:	464a      	mov	r2, r9
 8002388:	0409      	lsls	r1, r1, #16
 800238a:	0c09      	lsrs	r1, r1, #16
 800238c:	000d      	movs	r5, r1
 800238e:	0c16      	lsrs	r6, r2, #16
 8002390:	0c02      	lsrs	r2, r0, #16
 8002392:	0400      	lsls	r0, r0, #16
 8002394:	0c00      	lsrs	r0, r0, #16
 8002396:	4345      	muls	r5, r0
 8002398:	46ac      	mov	ip, r5
 800239a:	0005      	movs	r5, r0
 800239c:	4375      	muls	r5, r6
 800239e:	46a8      	mov	r8, r5
 80023a0:	0015      	movs	r5, r2
 80023a2:	000f      	movs	r7, r1
 80023a4:	4375      	muls	r5, r6
 80023a6:	9200      	str	r2, [sp, #0]
 80023a8:	9502      	str	r5, [sp, #8]
 80023aa:	002a      	movs	r2, r5
 80023ac:	9d00      	ldr	r5, [sp, #0]
 80023ae:	436f      	muls	r7, r5
 80023b0:	4665      	mov	r5, ip
 80023b2:	0c2d      	lsrs	r5, r5, #16
 80023b4:	46a9      	mov	r9, r5
 80023b6:	4447      	add	r7, r8
 80023b8:	444f      	add	r7, r9
 80023ba:	45b8      	cmp	r8, r7
 80023bc:	d905      	bls.n	80023ca <__aeabi_dmul+0x376>
 80023be:	0015      	movs	r5, r2
 80023c0:	2280      	movs	r2, #128	@ 0x80
 80023c2:	0252      	lsls	r2, r2, #9
 80023c4:	4690      	mov	r8, r2
 80023c6:	4445      	add	r5, r8
 80023c8:	9502      	str	r5, [sp, #8]
 80023ca:	0c3d      	lsrs	r5, r7, #16
 80023cc:	9503      	str	r5, [sp, #12]
 80023ce:	4665      	mov	r5, ip
 80023d0:	042d      	lsls	r5, r5, #16
 80023d2:	043f      	lsls	r7, r7, #16
 80023d4:	0c2d      	lsrs	r5, r5, #16
 80023d6:	46ac      	mov	ip, r5
 80023d8:	003d      	movs	r5, r7
 80023da:	4465      	add	r5, ip
 80023dc:	9504      	str	r5, [sp, #16]
 80023de:	0c25      	lsrs	r5, r4, #16
 80023e0:	0424      	lsls	r4, r4, #16
 80023e2:	0c24      	lsrs	r4, r4, #16
 80023e4:	46ac      	mov	ip, r5
 80023e6:	0025      	movs	r5, r4
 80023e8:	4375      	muls	r5, r6
 80023ea:	46a8      	mov	r8, r5
 80023ec:	4665      	mov	r5, ip
 80023ee:	000f      	movs	r7, r1
 80023f0:	4369      	muls	r1, r5
 80023f2:	4441      	add	r1, r8
 80023f4:	4689      	mov	r9, r1
 80023f6:	4367      	muls	r7, r4
 80023f8:	0c39      	lsrs	r1, r7, #16
 80023fa:	4449      	add	r1, r9
 80023fc:	436e      	muls	r6, r5
 80023fe:	4588      	cmp	r8, r1
 8002400:	d903      	bls.n	800240a <__aeabi_dmul+0x3b6>
 8002402:	2280      	movs	r2, #128	@ 0x80
 8002404:	0252      	lsls	r2, r2, #9
 8002406:	4690      	mov	r8, r2
 8002408:	4446      	add	r6, r8
 800240a:	0c0d      	lsrs	r5, r1, #16
 800240c:	46a8      	mov	r8, r5
 800240e:	0035      	movs	r5, r6
 8002410:	4445      	add	r5, r8
 8002412:	9505      	str	r5, [sp, #20]
 8002414:	9d03      	ldr	r5, [sp, #12]
 8002416:	043f      	lsls	r7, r7, #16
 8002418:	46a8      	mov	r8, r5
 800241a:	0c3f      	lsrs	r7, r7, #16
 800241c:	0409      	lsls	r1, r1, #16
 800241e:	19c9      	adds	r1, r1, r7
 8002420:	4488      	add	r8, r1
 8002422:	4645      	mov	r5, r8
 8002424:	9503      	str	r5, [sp, #12]
 8002426:	4655      	mov	r5, sl
 8002428:	042e      	lsls	r6, r5, #16
 800242a:	0c36      	lsrs	r6, r6, #16
 800242c:	0c2f      	lsrs	r7, r5, #16
 800242e:	0035      	movs	r5, r6
 8002430:	4345      	muls	r5, r0
 8002432:	4378      	muls	r0, r7
 8002434:	4681      	mov	r9, r0
 8002436:	0038      	movs	r0, r7
 8002438:	46a8      	mov	r8, r5
 800243a:	0c2d      	lsrs	r5, r5, #16
 800243c:	46aa      	mov	sl, r5
 800243e:	9a00      	ldr	r2, [sp, #0]
 8002440:	4350      	muls	r0, r2
 8002442:	4372      	muls	r2, r6
 8002444:	444a      	add	r2, r9
 8002446:	4452      	add	r2, sl
 8002448:	4591      	cmp	r9, r2
 800244a:	d903      	bls.n	8002454 <__aeabi_dmul+0x400>
 800244c:	2580      	movs	r5, #128	@ 0x80
 800244e:	026d      	lsls	r5, r5, #9
 8002450:	46a9      	mov	r9, r5
 8002452:	4448      	add	r0, r9
 8002454:	0c15      	lsrs	r5, r2, #16
 8002456:	46a9      	mov	r9, r5
 8002458:	4645      	mov	r5, r8
 800245a:	042d      	lsls	r5, r5, #16
 800245c:	0c2d      	lsrs	r5, r5, #16
 800245e:	46a8      	mov	r8, r5
 8002460:	4665      	mov	r5, ip
 8002462:	437d      	muls	r5, r7
 8002464:	0412      	lsls	r2, r2, #16
 8002466:	4448      	add	r0, r9
 8002468:	4490      	add	r8, r2
 800246a:	46a9      	mov	r9, r5
 800246c:	0032      	movs	r2, r6
 800246e:	4665      	mov	r5, ip
 8002470:	4362      	muls	r2, r4
 8002472:	436e      	muls	r6, r5
 8002474:	437c      	muls	r4, r7
 8002476:	0c17      	lsrs	r7, r2, #16
 8002478:	1936      	adds	r6, r6, r4
 800247a:	19bf      	adds	r7, r7, r6
 800247c:	42bc      	cmp	r4, r7
 800247e:	d903      	bls.n	8002488 <__aeabi_dmul+0x434>
 8002480:	2480      	movs	r4, #128	@ 0x80
 8002482:	0264      	lsls	r4, r4, #9
 8002484:	46a4      	mov	ip, r4
 8002486:	44e1      	add	r9, ip
 8002488:	9c02      	ldr	r4, [sp, #8]
 800248a:	9e03      	ldr	r6, [sp, #12]
 800248c:	46a4      	mov	ip, r4
 800248e:	9d05      	ldr	r5, [sp, #20]
 8002490:	4466      	add	r6, ip
 8002492:	428e      	cmp	r6, r1
 8002494:	4189      	sbcs	r1, r1
 8002496:	46ac      	mov	ip, r5
 8002498:	0412      	lsls	r2, r2, #16
 800249a:	043c      	lsls	r4, r7, #16
 800249c:	0c12      	lsrs	r2, r2, #16
 800249e:	18a2      	adds	r2, r4, r2
 80024a0:	4462      	add	r2, ip
 80024a2:	4249      	negs	r1, r1
 80024a4:	1854      	adds	r4, r2, r1
 80024a6:	4446      	add	r6, r8
 80024a8:	46a4      	mov	ip, r4
 80024aa:	4546      	cmp	r6, r8
 80024ac:	41a4      	sbcs	r4, r4
 80024ae:	4682      	mov	sl, r0
 80024b0:	4264      	negs	r4, r4
 80024b2:	46a0      	mov	r8, r4
 80024b4:	42aa      	cmp	r2, r5
 80024b6:	4192      	sbcs	r2, r2
 80024b8:	458c      	cmp	ip, r1
 80024ba:	4189      	sbcs	r1, r1
 80024bc:	44e2      	add	sl, ip
 80024be:	44d0      	add	r8, sl
 80024c0:	4249      	negs	r1, r1
 80024c2:	4252      	negs	r2, r2
 80024c4:	430a      	orrs	r2, r1
 80024c6:	45a0      	cmp	r8, r4
 80024c8:	41a4      	sbcs	r4, r4
 80024ca:	4582      	cmp	sl, r0
 80024cc:	4189      	sbcs	r1, r1
 80024ce:	4264      	negs	r4, r4
 80024d0:	4249      	negs	r1, r1
 80024d2:	430c      	orrs	r4, r1
 80024d4:	4641      	mov	r1, r8
 80024d6:	0c3f      	lsrs	r7, r7, #16
 80024d8:	19d2      	adds	r2, r2, r7
 80024da:	1912      	adds	r2, r2, r4
 80024dc:	0dcc      	lsrs	r4, r1, #23
 80024de:	9904      	ldr	r1, [sp, #16]
 80024e0:	0270      	lsls	r0, r6, #9
 80024e2:	4308      	orrs	r0, r1
 80024e4:	1e41      	subs	r1, r0, #1
 80024e6:	4188      	sbcs	r0, r1
 80024e8:	4641      	mov	r1, r8
 80024ea:	444a      	add	r2, r9
 80024ec:	0df6      	lsrs	r6, r6, #23
 80024ee:	0252      	lsls	r2, r2, #9
 80024f0:	4330      	orrs	r0, r6
 80024f2:	0249      	lsls	r1, r1, #9
 80024f4:	4314      	orrs	r4, r2
 80024f6:	4308      	orrs	r0, r1
 80024f8:	01d2      	lsls	r2, r2, #7
 80024fa:	d535      	bpl.n	8002568 <__aeabi_dmul+0x514>
 80024fc:	2201      	movs	r2, #1
 80024fe:	0843      	lsrs	r3, r0, #1
 8002500:	4002      	ands	r2, r0
 8002502:	4313      	orrs	r3, r2
 8002504:	07e0      	lsls	r0, r4, #31
 8002506:	4318      	orrs	r0, r3
 8002508:	0864      	lsrs	r4, r4, #1
 800250a:	e634      	b.n	8002176 <__aeabi_dmul+0x122>
 800250c:	9b00      	ldr	r3, [sp, #0]
 800250e:	46a2      	mov	sl, r4
 8002510:	469b      	mov	fp, r3
 8002512:	4681      	mov	r9, r0
 8002514:	2480      	movs	r4, #128	@ 0x80
 8002516:	4653      	mov	r3, sl
 8002518:	0324      	lsls	r4, r4, #12
 800251a:	431c      	orrs	r4, r3
 800251c:	0324      	lsls	r4, r4, #12
 800251e:	464a      	mov	r2, r9
 8002520:	4b2e      	ldr	r3, [pc, #184]	@ (80025dc <__aeabi_dmul+0x588>)
 8002522:	0b24      	lsrs	r4, r4, #12
 8002524:	e5ec      	b.n	8002100 <__aeabi_dmul+0xac>
 8002526:	f000 fd75 	bl	8003014 <__clzsi2>
 800252a:	2315      	movs	r3, #21
 800252c:	469c      	mov	ip, r3
 800252e:	4484      	add	ip, r0
 8002530:	0002      	movs	r2, r0
 8002532:	4663      	mov	r3, ip
 8002534:	3220      	adds	r2, #32
 8002536:	2b1c      	cmp	r3, #28
 8002538:	dc00      	bgt.n	800253c <__aeabi_dmul+0x4e8>
 800253a:	e684      	b.n	8002246 <__aeabi_dmul+0x1f2>
 800253c:	2300      	movs	r3, #0
 800253e:	4699      	mov	r9, r3
 8002540:	0023      	movs	r3, r4
 8002542:	3808      	subs	r0, #8
 8002544:	4083      	lsls	r3, r0
 8002546:	469a      	mov	sl, r3
 8002548:	e68e      	b.n	8002268 <__aeabi_dmul+0x214>
 800254a:	f000 fd63 	bl	8003014 <__clzsi2>
 800254e:	0002      	movs	r2, r0
 8002550:	0003      	movs	r3, r0
 8002552:	3215      	adds	r2, #21
 8002554:	3320      	adds	r3, #32
 8002556:	2a1c      	cmp	r2, #28
 8002558:	dc00      	bgt.n	800255c <__aeabi_dmul+0x508>
 800255a:	e64e      	b.n	80021fa <__aeabi_dmul+0x1a6>
 800255c:	0002      	movs	r2, r0
 800255e:	0034      	movs	r4, r6
 8002560:	3a08      	subs	r2, #8
 8002562:	2000      	movs	r0, #0
 8002564:	4094      	lsls	r4, r2
 8002566:	e652      	b.n	800220e <__aeabi_dmul+0x1ba>
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	e604      	b.n	8002176 <__aeabi_dmul+0x122>
 800256c:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <__aeabi_dmul+0x58c>)
 800256e:	0021      	movs	r1, r4
 8002570:	469c      	mov	ip, r3
 8002572:	0003      	movs	r3, r0
 8002574:	9d01      	ldr	r5, [sp, #4]
 8002576:	40d3      	lsrs	r3, r2
 8002578:	4465      	add	r5, ip
 800257a:	40a9      	lsls	r1, r5
 800257c:	4319      	orrs	r1, r3
 800257e:	0003      	movs	r3, r0
 8002580:	40ab      	lsls	r3, r5
 8002582:	1e58      	subs	r0, r3, #1
 8002584:	4183      	sbcs	r3, r0
 8002586:	4319      	orrs	r1, r3
 8002588:	0008      	movs	r0, r1
 800258a:	40d4      	lsrs	r4, r2
 800258c:	074b      	lsls	r3, r1, #29
 800258e:	d009      	beq.n	80025a4 <__aeabi_dmul+0x550>
 8002590:	230f      	movs	r3, #15
 8002592:	400b      	ands	r3, r1
 8002594:	2b04      	cmp	r3, #4
 8002596:	d005      	beq.n	80025a4 <__aeabi_dmul+0x550>
 8002598:	1d0b      	adds	r3, r1, #4
 800259a:	428b      	cmp	r3, r1
 800259c:	4180      	sbcs	r0, r0
 800259e:	4240      	negs	r0, r0
 80025a0:	1824      	adds	r4, r4, r0
 80025a2:	0018      	movs	r0, r3
 80025a4:	0223      	lsls	r3, r4, #8
 80025a6:	d400      	bmi.n	80025aa <__aeabi_dmul+0x556>
 80025a8:	e6d6      	b.n	8002358 <__aeabi_dmul+0x304>
 80025aa:	2301      	movs	r3, #1
 80025ac:	2400      	movs	r4, #0
 80025ae:	2200      	movs	r2, #0
 80025b0:	e5a6      	b.n	8002100 <__aeabi_dmul+0xac>
 80025b2:	290f      	cmp	r1, #15
 80025b4:	d1aa      	bne.n	800250c <__aeabi_dmul+0x4b8>
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	4652      	mov	r2, sl
 80025ba:	031b      	lsls	r3, r3, #12
 80025bc:	421a      	tst	r2, r3
 80025be:	d0a9      	beq.n	8002514 <__aeabi_dmul+0x4c0>
 80025c0:	421c      	tst	r4, r3
 80025c2:	d1a7      	bne.n	8002514 <__aeabi_dmul+0x4c0>
 80025c4:	431c      	orrs	r4, r3
 80025c6:	9b00      	ldr	r3, [sp, #0]
 80025c8:	0002      	movs	r2, r0
 80025ca:	469b      	mov	fp, r3
 80025cc:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <__aeabi_dmul+0x588>)
 80025ce:	e597      	b.n	8002100 <__aeabi_dmul+0xac>
 80025d0:	2400      	movs	r4, #0
 80025d2:	e6c1      	b.n	8002358 <__aeabi_dmul+0x304>
 80025d4:	2400      	movs	r4, #0
 80025d6:	4b01      	ldr	r3, [pc, #4]	@ (80025dc <__aeabi_dmul+0x588>)
 80025d8:	0022      	movs	r2, r4
 80025da:	e591      	b.n	8002100 <__aeabi_dmul+0xac>
 80025dc:	000007ff 	.word	0x000007ff
 80025e0:	0000041e 	.word	0x0000041e

080025e4 <__aeabi_dsub>:
 80025e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e6:	464e      	mov	r6, r9
 80025e8:	4645      	mov	r5, r8
 80025ea:	46de      	mov	lr, fp
 80025ec:	4657      	mov	r7, sl
 80025ee:	b5e0      	push	{r5, r6, r7, lr}
 80025f0:	b085      	sub	sp, #20
 80025f2:	9000      	str	r0, [sp, #0]
 80025f4:	9101      	str	r1, [sp, #4]
 80025f6:	030c      	lsls	r4, r1, #12
 80025f8:	004f      	lsls	r7, r1, #1
 80025fa:	0fce      	lsrs	r6, r1, #31
 80025fc:	0a61      	lsrs	r1, r4, #9
 80025fe:	9c00      	ldr	r4, [sp, #0]
 8002600:	46b0      	mov	r8, r6
 8002602:	0f64      	lsrs	r4, r4, #29
 8002604:	430c      	orrs	r4, r1
 8002606:	9900      	ldr	r1, [sp, #0]
 8002608:	0d7f      	lsrs	r7, r7, #21
 800260a:	00c8      	lsls	r0, r1, #3
 800260c:	0011      	movs	r1, r2
 800260e:	001a      	movs	r2, r3
 8002610:	031b      	lsls	r3, r3, #12
 8002612:	469c      	mov	ip, r3
 8002614:	9100      	str	r1, [sp, #0]
 8002616:	9201      	str	r2, [sp, #4]
 8002618:	0051      	lsls	r1, r2, #1
 800261a:	0d4b      	lsrs	r3, r1, #21
 800261c:	4699      	mov	r9, r3
 800261e:	9b01      	ldr	r3, [sp, #4]
 8002620:	9d00      	ldr	r5, [sp, #0]
 8002622:	0fd9      	lsrs	r1, r3, #31
 8002624:	4663      	mov	r3, ip
 8002626:	0f6a      	lsrs	r2, r5, #29
 8002628:	0a5b      	lsrs	r3, r3, #9
 800262a:	4313      	orrs	r3, r2
 800262c:	00ea      	lsls	r2, r5, #3
 800262e:	4694      	mov	ip, r2
 8002630:	4693      	mov	fp, r2
 8002632:	4ac1      	ldr	r2, [pc, #772]	@ (8002938 <__aeabi_dsub+0x354>)
 8002634:	9003      	str	r0, [sp, #12]
 8002636:	9302      	str	r3, [sp, #8]
 8002638:	4591      	cmp	r9, r2
 800263a:	d100      	bne.n	800263e <__aeabi_dsub+0x5a>
 800263c:	e0cd      	b.n	80027da <__aeabi_dsub+0x1f6>
 800263e:	2501      	movs	r5, #1
 8002640:	4069      	eors	r1, r5
 8002642:	464d      	mov	r5, r9
 8002644:	1b7d      	subs	r5, r7, r5
 8002646:	46aa      	mov	sl, r5
 8002648:	428e      	cmp	r6, r1
 800264a:	d100      	bne.n	800264e <__aeabi_dsub+0x6a>
 800264c:	e080      	b.n	8002750 <__aeabi_dsub+0x16c>
 800264e:	2d00      	cmp	r5, #0
 8002650:	dc00      	bgt.n	8002654 <__aeabi_dsub+0x70>
 8002652:	e335      	b.n	8002cc0 <__aeabi_dsub+0x6dc>
 8002654:	4649      	mov	r1, r9
 8002656:	2900      	cmp	r1, #0
 8002658:	d100      	bne.n	800265c <__aeabi_dsub+0x78>
 800265a:	e0df      	b.n	800281c <__aeabi_dsub+0x238>
 800265c:	4297      	cmp	r7, r2
 800265e:	d100      	bne.n	8002662 <__aeabi_dsub+0x7e>
 8002660:	e194      	b.n	800298c <__aeabi_dsub+0x3a8>
 8002662:	4652      	mov	r2, sl
 8002664:	2501      	movs	r5, #1
 8002666:	2a38      	cmp	r2, #56	@ 0x38
 8002668:	dc19      	bgt.n	800269e <__aeabi_dsub+0xba>
 800266a:	2280      	movs	r2, #128	@ 0x80
 800266c:	9b02      	ldr	r3, [sp, #8]
 800266e:	0412      	lsls	r2, r2, #16
 8002670:	4313      	orrs	r3, r2
 8002672:	9302      	str	r3, [sp, #8]
 8002674:	4652      	mov	r2, sl
 8002676:	2a1f      	cmp	r2, #31
 8002678:	dd00      	ble.n	800267c <__aeabi_dsub+0x98>
 800267a:	e1e3      	b.n	8002a44 <__aeabi_dsub+0x460>
 800267c:	4653      	mov	r3, sl
 800267e:	2220      	movs	r2, #32
 8002680:	4661      	mov	r1, ip
 8002682:	9d02      	ldr	r5, [sp, #8]
 8002684:	1ad2      	subs	r2, r2, r3
 8002686:	4095      	lsls	r5, r2
 8002688:	40d9      	lsrs	r1, r3
 800268a:	430d      	orrs	r5, r1
 800268c:	4661      	mov	r1, ip
 800268e:	4091      	lsls	r1, r2
 8002690:	000a      	movs	r2, r1
 8002692:	1e51      	subs	r1, r2, #1
 8002694:	418a      	sbcs	r2, r1
 8002696:	4315      	orrs	r5, r2
 8002698:	9a02      	ldr	r2, [sp, #8]
 800269a:	40da      	lsrs	r2, r3
 800269c:	1aa4      	subs	r4, r4, r2
 800269e:	1b45      	subs	r5, r0, r5
 80026a0:	42a8      	cmp	r0, r5
 80026a2:	4180      	sbcs	r0, r0
 80026a4:	4240      	negs	r0, r0
 80026a6:	1a24      	subs	r4, r4, r0
 80026a8:	0223      	lsls	r3, r4, #8
 80026aa:	d400      	bmi.n	80026ae <__aeabi_dsub+0xca>
 80026ac:	e13d      	b.n	800292a <__aeabi_dsub+0x346>
 80026ae:	0264      	lsls	r4, r4, #9
 80026b0:	0a64      	lsrs	r4, r4, #9
 80026b2:	2c00      	cmp	r4, #0
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dsub+0xd4>
 80026b6:	e147      	b.n	8002948 <__aeabi_dsub+0x364>
 80026b8:	0020      	movs	r0, r4
 80026ba:	f000 fcab 	bl	8003014 <__clzsi2>
 80026be:	0003      	movs	r3, r0
 80026c0:	3b08      	subs	r3, #8
 80026c2:	2120      	movs	r1, #32
 80026c4:	0028      	movs	r0, r5
 80026c6:	1aca      	subs	r2, r1, r3
 80026c8:	40d0      	lsrs	r0, r2
 80026ca:	409c      	lsls	r4, r3
 80026cc:	0002      	movs	r2, r0
 80026ce:	409d      	lsls	r5, r3
 80026d0:	4322      	orrs	r2, r4
 80026d2:	429f      	cmp	r7, r3
 80026d4:	dd00      	ble.n	80026d8 <__aeabi_dsub+0xf4>
 80026d6:	e177      	b.n	80029c8 <__aeabi_dsub+0x3e4>
 80026d8:	1bd8      	subs	r0, r3, r7
 80026da:	3001      	adds	r0, #1
 80026dc:	1a09      	subs	r1, r1, r0
 80026de:	002c      	movs	r4, r5
 80026e0:	408d      	lsls	r5, r1
 80026e2:	40c4      	lsrs	r4, r0
 80026e4:	1e6b      	subs	r3, r5, #1
 80026e6:	419d      	sbcs	r5, r3
 80026e8:	0013      	movs	r3, r2
 80026ea:	40c2      	lsrs	r2, r0
 80026ec:	408b      	lsls	r3, r1
 80026ee:	4325      	orrs	r5, r4
 80026f0:	2700      	movs	r7, #0
 80026f2:	0014      	movs	r4, r2
 80026f4:	431d      	orrs	r5, r3
 80026f6:	076b      	lsls	r3, r5, #29
 80026f8:	d009      	beq.n	800270e <__aeabi_dsub+0x12a>
 80026fa:	230f      	movs	r3, #15
 80026fc:	402b      	ands	r3, r5
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d005      	beq.n	800270e <__aeabi_dsub+0x12a>
 8002702:	1d2b      	adds	r3, r5, #4
 8002704:	42ab      	cmp	r3, r5
 8002706:	41ad      	sbcs	r5, r5
 8002708:	426d      	negs	r5, r5
 800270a:	1964      	adds	r4, r4, r5
 800270c:	001d      	movs	r5, r3
 800270e:	0223      	lsls	r3, r4, #8
 8002710:	d400      	bmi.n	8002714 <__aeabi_dsub+0x130>
 8002712:	e140      	b.n	8002996 <__aeabi_dsub+0x3b2>
 8002714:	4a88      	ldr	r2, [pc, #544]	@ (8002938 <__aeabi_dsub+0x354>)
 8002716:	3701      	adds	r7, #1
 8002718:	4297      	cmp	r7, r2
 800271a:	d100      	bne.n	800271e <__aeabi_dsub+0x13a>
 800271c:	e101      	b.n	8002922 <__aeabi_dsub+0x33e>
 800271e:	2601      	movs	r6, #1
 8002720:	4643      	mov	r3, r8
 8002722:	4986      	ldr	r1, [pc, #536]	@ (800293c <__aeabi_dsub+0x358>)
 8002724:	08ed      	lsrs	r5, r5, #3
 8002726:	4021      	ands	r1, r4
 8002728:	074a      	lsls	r2, r1, #29
 800272a:	432a      	orrs	r2, r5
 800272c:	057c      	lsls	r4, r7, #21
 800272e:	024d      	lsls	r5, r1, #9
 8002730:	0b2d      	lsrs	r5, r5, #12
 8002732:	0d64      	lsrs	r4, r4, #21
 8002734:	401e      	ands	r6, r3
 8002736:	0524      	lsls	r4, r4, #20
 8002738:	432c      	orrs	r4, r5
 800273a:	07f6      	lsls	r6, r6, #31
 800273c:	4334      	orrs	r4, r6
 800273e:	0010      	movs	r0, r2
 8002740:	0021      	movs	r1, r4
 8002742:	b005      	add	sp, #20
 8002744:	bcf0      	pop	{r4, r5, r6, r7}
 8002746:	46bb      	mov	fp, r7
 8002748:	46b2      	mov	sl, r6
 800274a:	46a9      	mov	r9, r5
 800274c:	46a0      	mov	r8, r4
 800274e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002750:	2d00      	cmp	r5, #0
 8002752:	dc00      	bgt.n	8002756 <__aeabi_dsub+0x172>
 8002754:	e2d0      	b.n	8002cf8 <__aeabi_dsub+0x714>
 8002756:	4649      	mov	r1, r9
 8002758:	2900      	cmp	r1, #0
 800275a:	d000      	beq.n	800275e <__aeabi_dsub+0x17a>
 800275c:	e0d4      	b.n	8002908 <__aeabi_dsub+0x324>
 800275e:	4661      	mov	r1, ip
 8002760:	9b02      	ldr	r3, [sp, #8]
 8002762:	4319      	orrs	r1, r3
 8002764:	d100      	bne.n	8002768 <__aeabi_dsub+0x184>
 8002766:	e12b      	b.n	80029c0 <__aeabi_dsub+0x3dc>
 8002768:	1e69      	subs	r1, r5, #1
 800276a:	2d01      	cmp	r5, #1
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x18c>
 800276e:	e1d9      	b.n	8002b24 <__aeabi_dsub+0x540>
 8002770:	4295      	cmp	r5, r2
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x192>
 8002774:	e10a      	b.n	800298c <__aeabi_dsub+0x3a8>
 8002776:	2501      	movs	r5, #1
 8002778:	2938      	cmp	r1, #56	@ 0x38
 800277a:	dc17      	bgt.n	80027ac <__aeabi_dsub+0x1c8>
 800277c:	468a      	mov	sl, r1
 800277e:	4653      	mov	r3, sl
 8002780:	2b1f      	cmp	r3, #31
 8002782:	dd00      	ble.n	8002786 <__aeabi_dsub+0x1a2>
 8002784:	e1e7      	b.n	8002b56 <__aeabi_dsub+0x572>
 8002786:	2220      	movs	r2, #32
 8002788:	1ad2      	subs	r2, r2, r3
 800278a:	9b02      	ldr	r3, [sp, #8]
 800278c:	4661      	mov	r1, ip
 800278e:	4093      	lsls	r3, r2
 8002790:	001d      	movs	r5, r3
 8002792:	4653      	mov	r3, sl
 8002794:	40d9      	lsrs	r1, r3
 8002796:	4663      	mov	r3, ip
 8002798:	4093      	lsls	r3, r2
 800279a:	001a      	movs	r2, r3
 800279c:	430d      	orrs	r5, r1
 800279e:	1e51      	subs	r1, r2, #1
 80027a0:	418a      	sbcs	r2, r1
 80027a2:	4653      	mov	r3, sl
 80027a4:	4315      	orrs	r5, r2
 80027a6:	9a02      	ldr	r2, [sp, #8]
 80027a8:	40da      	lsrs	r2, r3
 80027aa:	18a4      	adds	r4, r4, r2
 80027ac:	182d      	adds	r5, r5, r0
 80027ae:	4285      	cmp	r5, r0
 80027b0:	4180      	sbcs	r0, r0
 80027b2:	4240      	negs	r0, r0
 80027b4:	1824      	adds	r4, r4, r0
 80027b6:	0223      	lsls	r3, r4, #8
 80027b8:	d400      	bmi.n	80027bc <__aeabi_dsub+0x1d8>
 80027ba:	e0b6      	b.n	800292a <__aeabi_dsub+0x346>
 80027bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002938 <__aeabi_dsub+0x354>)
 80027be:	3701      	adds	r7, #1
 80027c0:	429f      	cmp	r7, r3
 80027c2:	d100      	bne.n	80027c6 <__aeabi_dsub+0x1e2>
 80027c4:	e0ad      	b.n	8002922 <__aeabi_dsub+0x33e>
 80027c6:	2101      	movs	r1, #1
 80027c8:	4b5c      	ldr	r3, [pc, #368]	@ (800293c <__aeabi_dsub+0x358>)
 80027ca:	086a      	lsrs	r2, r5, #1
 80027cc:	401c      	ands	r4, r3
 80027ce:	4029      	ands	r1, r5
 80027d0:	430a      	orrs	r2, r1
 80027d2:	07e5      	lsls	r5, r4, #31
 80027d4:	4315      	orrs	r5, r2
 80027d6:	0864      	lsrs	r4, r4, #1
 80027d8:	e78d      	b.n	80026f6 <__aeabi_dsub+0x112>
 80027da:	4a59      	ldr	r2, [pc, #356]	@ (8002940 <__aeabi_dsub+0x35c>)
 80027dc:	9b02      	ldr	r3, [sp, #8]
 80027de:	4692      	mov	sl, r2
 80027e0:	4662      	mov	r2, ip
 80027e2:	44ba      	add	sl, r7
 80027e4:	431a      	orrs	r2, r3
 80027e6:	d02c      	beq.n	8002842 <__aeabi_dsub+0x25e>
 80027e8:	428e      	cmp	r6, r1
 80027ea:	d02e      	beq.n	800284a <__aeabi_dsub+0x266>
 80027ec:	4652      	mov	r2, sl
 80027ee:	2a00      	cmp	r2, #0
 80027f0:	d060      	beq.n	80028b4 <__aeabi_dsub+0x2d0>
 80027f2:	2f00      	cmp	r7, #0
 80027f4:	d100      	bne.n	80027f8 <__aeabi_dsub+0x214>
 80027f6:	e0db      	b.n	80029b0 <__aeabi_dsub+0x3cc>
 80027f8:	4663      	mov	r3, ip
 80027fa:	000e      	movs	r6, r1
 80027fc:	9c02      	ldr	r4, [sp, #8]
 80027fe:	08d8      	lsrs	r0, r3, #3
 8002800:	0762      	lsls	r2, r4, #29
 8002802:	4302      	orrs	r2, r0
 8002804:	08e4      	lsrs	r4, r4, #3
 8002806:	0013      	movs	r3, r2
 8002808:	4323      	orrs	r3, r4
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x22a>
 800280c:	e254      	b.n	8002cb8 <__aeabi_dsub+0x6d4>
 800280e:	2580      	movs	r5, #128	@ 0x80
 8002810:	032d      	lsls	r5, r5, #12
 8002812:	4325      	orrs	r5, r4
 8002814:	032d      	lsls	r5, r5, #12
 8002816:	4c48      	ldr	r4, [pc, #288]	@ (8002938 <__aeabi_dsub+0x354>)
 8002818:	0b2d      	lsrs	r5, r5, #12
 800281a:	e78c      	b.n	8002736 <__aeabi_dsub+0x152>
 800281c:	4661      	mov	r1, ip
 800281e:	9b02      	ldr	r3, [sp, #8]
 8002820:	4319      	orrs	r1, r3
 8002822:	d100      	bne.n	8002826 <__aeabi_dsub+0x242>
 8002824:	e0cc      	b.n	80029c0 <__aeabi_dsub+0x3dc>
 8002826:	0029      	movs	r1, r5
 8002828:	3901      	subs	r1, #1
 800282a:	2d01      	cmp	r5, #1
 800282c:	d100      	bne.n	8002830 <__aeabi_dsub+0x24c>
 800282e:	e188      	b.n	8002b42 <__aeabi_dsub+0x55e>
 8002830:	4295      	cmp	r5, r2
 8002832:	d100      	bne.n	8002836 <__aeabi_dsub+0x252>
 8002834:	e0aa      	b.n	800298c <__aeabi_dsub+0x3a8>
 8002836:	2501      	movs	r5, #1
 8002838:	2938      	cmp	r1, #56	@ 0x38
 800283a:	dd00      	ble.n	800283e <__aeabi_dsub+0x25a>
 800283c:	e72f      	b.n	800269e <__aeabi_dsub+0xba>
 800283e:	468a      	mov	sl, r1
 8002840:	e718      	b.n	8002674 <__aeabi_dsub+0x90>
 8002842:	2201      	movs	r2, #1
 8002844:	4051      	eors	r1, r2
 8002846:	428e      	cmp	r6, r1
 8002848:	d1d0      	bne.n	80027ec <__aeabi_dsub+0x208>
 800284a:	4653      	mov	r3, sl
 800284c:	2b00      	cmp	r3, #0
 800284e:	d100      	bne.n	8002852 <__aeabi_dsub+0x26e>
 8002850:	e0be      	b.n	80029d0 <__aeabi_dsub+0x3ec>
 8002852:	2f00      	cmp	r7, #0
 8002854:	d000      	beq.n	8002858 <__aeabi_dsub+0x274>
 8002856:	e138      	b.n	8002aca <__aeabi_dsub+0x4e6>
 8002858:	46ca      	mov	sl, r9
 800285a:	0022      	movs	r2, r4
 800285c:	4302      	orrs	r2, r0
 800285e:	d100      	bne.n	8002862 <__aeabi_dsub+0x27e>
 8002860:	e1e2      	b.n	8002c28 <__aeabi_dsub+0x644>
 8002862:	4653      	mov	r3, sl
 8002864:	1e59      	subs	r1, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x288>
 800286a:	e20d      	b.n	8002c88 <__aeabi_dsub+0x6a4>
 800286c:	4a32      	ldr	r2, [pc, #200]	@ (8002938 <__aeabi_dsub+0x354>)
 800286e:	4592      	cmp	sl, r2
 8002870:	d100      	bne.n	8002874 <__aeabi_dsub+0x290>
 8002872:	e1d2      	b.n	8002c1a <__aeabi_dsub+0x636>
 8002874:	2701      	movs	r7, #1
 8002876:	2938      	cmp	r1, #56	@ 0x38
 8002878:	dc13      	bgt.n	80028a2 <__aeabi_dsub+0x2be>
 800287a:	291f      	cmp	r1, #31
 800287c:	dd00      	ble.n	8002880 <__aeabi_dsub+0x29c>
 800287e:	e1ee      	b.n	8002c5e <__aeabi_dsub+0x67a>
 8002880:	2220      	movs	r2, #32
 8002882:	9b02      	ldr	r3, [sp, #8]
 8002884:	1a52      	subs	r2, r2, r1
 8002886:	0025      	movs	r5, r4
 8002888:	0007      	movs	r7, r0
 800288a:	469a      	mov	sl, r3
 800288c:	40cc      	lsrs	r4, r1
 800288e:	4090      	lsls	r0, r2
 8002890:	4095      	lsls	r5, r2
 8002892:	40cf      	lsrs	r7, r1
 8002894:	44a2      	add	sl, r4
 8002896:	1e42      	subs	r2, r0, #1
 8002898:	4190      	sbcs	r0, r2
 800289a:	4653      	mov	r3, sl
 800289c:	432f      	orrs	r7, r5
 800289e:	4307      	orrs	r7, r0
 80028a0:	9302      	str	r3, [sp, #8]
 80028a2:	003d      	movs	r5, r7
 80028a4:	4465      	add	r5, ip
 80028a6:	4565      	cmp	r5, ip
 80028a8:	4192      	sbcs	r2, r2
 80028aa:	9b02      	ldr	r3, [sp, #8]
 80028ac:	4252      	negs	r2, r2
 80028ae:	464f      	mov	r7, r9
 80028b0:	18d4      	adds	r4, r2, r3
 80028b2:	e780      	b.n	80027b6 <__aeabi_dsub+0x1d2>
 80028b4:	4a23      	ldr	r2, [pc, #140]	@ (8002944 <__aeabi_dsub+0x360>)
 80028b6:	1c7d      	adds	r5, r7, #1
 80028b8:	4215      	tst	r5, r2
 80028ba:	d000      	beq.n	80028be <__aeabi_dsub+0x2da>
 80028bc:	e0aa      	b.n	8002a14 <__aeabi_dsub+0x430>
 80028be:	4662      	mov	r2, ip
 80028c0:	0025      	movs	r5, r4
 80028c2:	9b02      	ldr	r3, [sp, #8]
 80028c4:	4305      	orrs	r5, r0
 80028c6:	431a      	orrs	r2, r3
 80028c8:	2f00      	cmp	r7, #0
 80028ca:	d000      	beq.n	80028ce <__aeabi_dsub+0x2ea>
 80028cc:	e0f5      	b.n	8002aba <__aeabi_dsub+0x4d6>
 80028ce:	2d00      	cmp	r5, #0
 80028d0:	d100      	bne.n	80028d4 <__aeabi_dsub+0x2f0>
 80028d2:	e16b      	b.n	8002bac <__aeabi_dsub+0x5c8>
 80028d4:	2a00      	cmp	r2, #0
 80028d6:	d100      	bne.n	80028da <__aeabi_dsub+0x2f6>
 80028d8:	e152      	b.n	8002b80 <__aeabi_dsub+0x59c>
 80028da:	4663      	mov	r3, ip
 80028dc:	1ac5      	subs	r5, r0, r3
 80028de:	9b02      	ldr	r3, [sp, #8]
 80028e0:	1ae2      	subs	r2, r4, r3
 80028e2:	42a8      	cmp	r0, r5
 80028e4:	419b      	sbcs	r3, r3
 80028e6:	425b      	negs	r3, r3
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	021a      	lsls	r2, r3, #8
 80028ec:	d400      	bmi.n	80028f0 <__aeabi_dsub+0x30c>
 80028ee:	e1d5      	b.n	8002c9c <__aeabi_dsub+0x6b8>
 80028f0:	4663      	mov	r3, ip
 80028f2:	1a1d      	subs	r5, r3, r0
 80028f4:	45ac      	cmp	ip, r5
 80028f6:	4192      	sbcs	r2, r2
 80028f8:	2601      	movs	r6, #1
 80028fa:	9b02      	ldr	r3, [sp, #8]
 80028fc:	4252      	negs	r2, r2
 80028fe:	1b1c      	subs	r4, r3, r4
 8002900:	4688      	mov	r8, r1
 8002902:	1aa4      	subs	r4, r4, r2
 8002904:	400e      	ands	r6, r1
 8002906:	e6f6      	b.n	80026f6 <__aeabi_dsub+0x112>
 8002908:	4297      	cmp	r7, r2
 800290a:	d03f      	beq.n	800298c <__aeabi_dsub+0x3a8>
 800290c:	4652      	mov	r2, sl
 800290e:	2501      	movs	r5, #1
 8002910:	2a38      	cmp	r2, #56	@ 0x38
 8002912:	dd00      	ble.n	8002916 <__aeabi_dsub+0x332>
 8002914:	e74a      	b.n	80027ac <__aeabi_dsub+0x1c8>
 8002916:	2280      	movs	r2, #128	@ 0x80
 8002918:	9b02      	ldr	r3, [sp, #8]
 800291a:	0412      	lsls	r2, r2, #16
 800291c:	4313      	orrs	r3, r2
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	e72d      	b.n	800277e <__aeabi_dsub+0x19a>
 8002922:	003c      	movs	r4, r7
 8002924:	2500      	movs	r5, #0
 8002926:	2200      	movs	r2, #0
 8002928:	e705      	b.n	8002736 <__aeabi_dsub+0x152>
 800292a:	2307      	movs	r3, #7
 800292c:	402b      	ands	r3, r5
 800292e:	2b00      	cmp	r3, #0
 8002930:	d000      	beq.n	8002934 <__aeabi_dsub+0x350>
 8002932:	e6e2      	b.n	80026fa <__aeabi_dsub+0x116>
 8002934:	e06b      	b.n	8002a0e <__aeabi_dsub+0x42a>
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	000007ff 	.word	0x000007ff
 800293c:	ff7fffff 	.word	0xff7fffff
 8002940:	fffff801 	.word	0xfffff801
 8002944:	000007fe 	.word	0x000007fe
 8002948:	0028      	movs	r0, r5
 800294a:	f000 fb63 	bl	8003014 <__clzsi2>
 800294e:	0003      	movs	r3, r0
 8002950:	3318      	adds	r3, #24
 8002952:	2b1f      	cmp	r3, #31
 8002954:	dc00      	bgt.n	8002958 <__aeabi_dsub+0x374>
 8002956:	e6b4      	b.n	80026c2 <__aeabi_dsub+0xde>
 8002958:	002a      	movs	r2, r5
 800295a:	3808      	subs	r0, #8
 800295c:	4082      	lsls	r2, r0
 800295e:	429f      	cmp	r7, r3
 8002960:	dd00      	ble.n	8002964 <__aeabi_dsub+0x380>
 8002962:	e0b9      	b.n	8002ad8 <__aeabi_dsub+0x4f4>
 8002964:	1bdb      	subs	r3, r3, r7
 8002966:	1c58      	adds	r0, r3, #1
 8002968:	281f      	cmp	r0, #31
 800296a:	dc00      	bgt.n	800296e <__aeabi_dsub+0x38a>
 800296c:	e1a0      	b.n	8002cb0 <__aeabi_dsub+0x6cc>
 800296e:	0015      	movs	r5, r2
 8002970:	3b1f      	subs	r3, #31
 8002972:	40dd      	lsrs	r5, r3
 8002974:	2820      	cmp	r0, #32
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x3a0>
 8002978:	2340      	movs	r3, #64	@ 0x40
 800297a:	1a1b      	subs	r3, r3, r0
 800297c:	409a      	lsls	r2, r3
 800297e:	1e53      	subs	r3, r2, #1
 8002980:	419a      	sbcs	r2, r3
 8002982:	4315      	orrs	r5, r2
 8002984:	2307      	movs	r3, #7
 8002986:	2700      	movs	r7, #0
 8002988:	402b      	ands	r3, r5
 800298a:	e7d0      	b.n	800292e <__aeabi_dsub+0x34a>
 800298c:	08c0      	lsrs	r0, r0, #3
 800298e:	0762      	lsls	r2, r4, #29
 8002990:	4302      	orrs	r2, r0
 8002992:	08e4      	lsrs	r4, r4, #3
 8002994:	e737      	b.n	8002806 <__aeabi_dsub+0x222>
 8002996:	08ea      	lsrs	r2, r5, #3
 8002998:	0763      	lsls	r3, r4, #29
 800299a:	431a      	orrs	r2, r3
 800299c:	4bd3      	ldr	r3, [pc, #844]	@ (8002cec <__aeabi_dsub+0x708>)
 800299e:	08e4      	lsrs	r4, r4, #3
 80029a0:	429f      	cmp	r7, r3
 80029a2:	d100      	bne.n	80029a6 <__aeabi_dsub+0x3c2>
 80029a4:	e72f      	b.n	8002806 <__aeabi_dsub+0x222>
 80029a6:	0324      	lsls	r4, r4, #12
 80029a8:	0b25      	lsrs	r5, r4, #12
 80029aa:	057c      	lsls	r4, r7, #21
 80029ac:	0d64      	lsrs	r4, r4, #21
 80029ae:	e6c2      	b.n	8002736 <__aeabi_dsub+0x152>
 80029b0:	46ca      	mov	sl, r9
 80029b2:	0022      	movs	r2, r4
 80029b4:	4302      	orrs	r2, r0
 80029b6:	d158      	bne.n	8002a6a <__aeabi_dsub+0x486>
 80029b8:	4663      	mov	r3, ip
 80029ba:	000e      	movs	r6, r1
 80029bc:	9c02      	ldr	r4, [sp, #8]
 80029be:	9303      	str	r3, [sp, #12]
 80029c0:	9b03      	ldr	r3, [sp, #12]
 80029c2:	4657      	mov	r7, sl
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	e7e7      	b.n	8002998 <__aeabi_dsub+0x3b4>
 80029c8:	4cc9      	ldr	r4, [pc, #804]	@ (8002cf0 <__aeabi_dsub+0x70c>)
 80029ca:	1aff      	subs	r7, r7, r3
 80029cc:	4014      	ands	r4, r2
 80029ce:	e692      	b.n	80026f6 <__aeabi_dsub+0x112>
 80029d0:	4dc8      	ldr	r5, [pc, #800]	@ (8002cf4 <__aeabi_dsub+0x710>)
 80029d2:	1c7a      	adds	r2, r7, #1
 80029d4:	422a      	tst	r2, r5
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x3f6>
 80029d8:	e084      	b.n	8002ae4 <__aeabi_dsub+0x500>
 80029da:	0022      	movs	r2, r4
 80029dc:	4302      	orrs	r2, r0
 80029de:	2f00      	cmp	r7, #0
 80029e0:	d000      	beq.n	80029e4 <__aeabi_dsub+0x400>
 80029e2:	e0ef      	b.n	8002bc4 <__aeabi_dsub+0x5e0>
 80029e4:	2a00      	cmp	r2, #0
 80029e6:	d100      	bne.n	80029ea <__aeabi_dsub+0x406>
 80029e8:	e0e5      	b.n	8002bb6 <__aeabi_dsub+0x5d2>
 80029ea:	4662      	mov	r2, ip
 80029ec:	9902      	ldr	r1, [sp, #8]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	d100      	bne.n	80029f4 <__aeabi_dsub+0x410>
 80029f2:	e0c5      	b.n	8002b80 <__aeabi_dsub+0x59c>
 80029f4:	4663      	mov	r3, ip
 80029f6:	18c5      	adds	r5, r0, r3
 80029f8:	468c      	mov	ip, r1
 80029fa:	4285      	cmp	r5, r0
 80029fc:	4180      	sbcs	r0, r0
 80029fe:	4464      	add	r4, ip
 8002a00:	4240      	negs	r0, r0
 8002a02:	1824      	adds	r4, r4, r0
 8002a04:	0223      	lsls	r3, r4, #8
 8002a06:	d502      	bpl.n	8002a0e <__aeabi_dsub+0x42a>
 8002a08:	4bb9      	ldr	r3, [pc, #740]	@ (8002cf0 <__aeabi_dsub+0x70c>)
 8002a0a:	3701      	adds	r7, #1
 8002a0c:	401c      	ands	r4, r3
 8002a0e:	46ba      	mov	sl, r7
 8002a10:	9503      	str	r5, [sp, #12]
 8002a12:	e7d5      	b.n	80029c0 <__aeabi_dsub+0x3dc>
 8002a14:	4662      	mov	r2, ip
 8002a16:	1a85      	subs	r5, r0, r2
 8002a18:	42a8      	cmp	r0, r5
 8002a1a:	4192      	sbcs	r2, r2
 8002a1c:	4252      	negs	r2, r2
 8002a1e:	4691      	mov	r9, r2
 8002a20:	9b02      	ldr	r3, [sp, #8]
 8002a22:	1ae3      	subs	r3, r4, r3
 8002a24:	001a      	movs	r2, r3
 8002a26:	464b      	mov	r3, r9
 8002a28:	1ad2      	subs	r2, r2, r3
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	4691      	mov	r9, r2
 8002a2e:	021a      	lsls	r2, r3, #8
 8002a30:	d46c      	bmi.n	8002b0c <__aeabi_dsub+0x528>
 8002a32:	464a      	mov	r2, r9
 8002a34:	464c      	mov	r4, r9
 8002a36:	432a      	orrs	r2, r5
 8002a38:	d000      	beq.n	8002a3c <__aeabi_dsub+0x458>
 8002a3a:	e63a      	b.n	80026b2 <__aeabi_dsub+0xce>
 8002a3c:	2600      	movs	r6, #0
 8002a3e:	2400      	movs	r4, #0
 8002a40:	2500      	movs	r5, #0
 8002a42:	e678      	b.n	8002736 <__aeabi_dsub+0x152>
 8002a44:	9902      	ldr	r1, [sp, #8]
 8002a46:	4653      	mov	r3, sl
 8002a48:	000d      	movs	r5, r1
 8002a4a:	3a20      	subs	r2, #32
 8002a4c:	40d5      	lsrs	r5, r2
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d006      	beq.n	8002a60 <__aeabi_dsub+0x47c>
 8002a52:	2240      	movs	r2, #64	@ 0x40
 8002a54:	1ad2      	subs	r2, r2, r3
 8002a56:	000b      	movs	r3, r1
 8002a58:	4093      	lsls	r3, r2
 8002a5a:	4662      	mov	r2, ip
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	4693      	mov	fp, r2
 8002a60:	465b      	mov	r3, fp
 8002a62:	1e5a      	subs	r2, r3, #1
 8002a64:	4193      	sbcs	r3, r2
 8002a66:	431d      	orrs	r5, r3
 8002a68:	e619      	b.n	800269e <__aeabi_dsub+0xba>
 8002a6a:	4653      	mov	r3, sl
 8002a6c:	1e5a      	subs	r2, r3, #1
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d100      	bne.n	8002a74 <__aeabi_dsub+0x490>
 8002a72:	e0c6      	b.n	8002c02 <__aeabi_dsub+0x61e>
 8002a74:	4e9d      	ldr	r6, [pc, #628]	@ (8002cec <__aeabi_dsub+0x708>)
 8002a76:	45b2      	cmp	sl, r6
 8002a78:	d100      	bne.n	8002a7c <__aeabi_dsub+0x498>
 8002a7a:	e6bd      	b.n	80027f8 <__aeabi_dsub+0x214>
 8002a7c:	4688      	mov	r8, r1
 8002a7e:	000e      	movs	r6, r1
 8002a80:	2501      	movs	r5, #1
 8002a82:	2a38      	cmp	r2, #56	@ 0x38
 8002a84:	dc10      	bgt.n	8002aa8 <__aeabi_dsub+0x4c4>
 8002a86:	2a1f      	cmp	r2, #31
 8002a88:	dc7f      	bgt.n	8002b8a <__aeabi_dsub+0x5a6>
 8002a8a:	2120      	movs	r1, #32
 8002a8c:	0025      	movs	r5, r4
 8002a8e:	1a89      	subs	r1, r1, r2
 8002a90:	0007      	movs	r7, r0
 8002a92:	4088      	lsls	r0, r1
 8002a94:	408d      	lsls	r5, r1
 8002a96:	40d7      	lsrs	r7, r2
 8002a98:	40d4      	lsrs	r4, r2
 8002a9a:	1e41      	subs	r1, r0, #1
 8002a9c:	4188      	sbcs	r0, r1
 8002a9e:	9b02      	ldr	r3, [sp, #8]
 8002aa0:	433d      	orrs	r5, r7
 8002aa2:	1b1b      	subs	r3, r3, r4
 8002aa4:	4305      	orrs	r5, r0
 8002aa6:	9302      	str	r3, [sp, #8]
 8002aa8:	4662      	mov	r2, ip
 8002aaa:	1b55      	subs	r5, r2, r5
 8002aac:	45ac      	cmp	ip, r5
 8002aae:	4192      	sbcs	r2, r2
 8002ab0:	9b02      	ldr	r3, [sp, #8]
 8002ab2:	4252      	negs	r2, r2
 8002ab4:	464f      	mov	r7, r9
 8002ab6:	1a9c      	subs	r4, r3, r2
 8002ab8:	e5f6      	b.n	80026a8 <__aeabi_dsub+0xc4>
 8002aba:	2d00      	cmp	r5, #0
 8002abc:	d000      	beq.n	8002ac0 <__aeabi_dsub+0x4dc>
 8002abe:	e0b7      	b.n	8002c30 <__aeabi_dsub+0x64c>
 8002ac0:	2a00      	cmp	r2, #0
 8002ac2:	d100      	bne.n	8002ac6 <__aeabi_dsub+0x4e2>
 8002ac4:	e0f0      	b.n	8002ca8 <__aeabi_dsub+0x6c4>
 8002ac6:	2601      	movs	r6, #1
 8002ac8:	400e      	ands	r6, r1
 8002aca:	4663      	mov	r3, ip
 8002acc:	9802      	ldr	r0, [sp, #8]
 8002ace:	08d9      	lsrs	r1, r3, #3
 8002ad0:	0742      	lsls	r2, r0, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	08c4      	lsrs	r4, r0, #3
 8002ad6:	e696      	b.n	8002806 <__aeabi_dsub+0x222>
 8002ad8:	4c85      	ldr	r4, [pc, #532]	@ (8002cf0 <__aeabi_dsub+0x70c>)
 8002ada:	1aff      	subs	r7, r7, r3
 8002adc:	4014      	ands	r4, r2
 8002ade:	0762      	lsls	r2, r4, #29
 8002ae0:	08e4      	lsrs	r4, r4, #3
 8002ae2:	e760      	b.n	80029a6 <__aeabi_dsub+0x3c2>
 8002ae4:	4981      	ldr	r1, [pc, #516]	@ (8002cec <__aeabi_dsub+0x708>)
 8002ae6:	428a      	cmp	r2, r1
 8002ae8:	d100      	bne.n	8002aec <__aeabi_dsub+0x508>
 8002aea:	e0c9      	b.n	8002c80 <__aeabi_dsub+0x69c>
 8002aec:	4663      	mov	r3, ip
 8002aee:	18c1      	adds	r1, r0, r3
 8002af0:	4281      	cmp	r1, r0
 8002af2:	4180      	sbcs	r0, r0
 8002af4:	9b02      	ldr	r3, [sp, #8]
 8002af6:	4240      	negs	r0, r0
 8002af8:	18e3      	adds	r3, r4, r3
 8002afa:	181b      	adds	r3, r3, r0
 8002afc:	07dd      	lsls	r5, r3, #31
 8002afe:	085c      	lsrs	r4, r3, #1
 8002b00:	2307      	movs	r3, #7
 8002b02:	0849      	lsrs	r1, r1, #1
 8002b04:	430d      	orrs	r5, r1
 8002b06:	0017      	movs	r7, r2
 8002b08:	402b      	ands	r3, r5
 8002b0a:	e710      	b.n	800292e <__aeabi_dsub+0x34a>
 8002b0c:	4663      	mov	r3, ip
 8002b0e:	1a1d      	subs	r5, r3, r0
 8002b10:	45ac      	cmp	ip, r5
 8002b12:	4192      	sbcs	r2, r2
 8002b14:	2601      	movs	r6, #1
 8002b16:	9b02      	ldr	r3, [sp, #8]
 8002b18:	4252      	negs	r2, r2
 8002b1a:	1b1c      	subs	r4, r3, r4
 8002b1c:	4688      	mov	r8, r1
 8002b1e:	1aa4      	subs	r4, r4, r2
 8002b20:	400e      	ands	r6, r1
 8002b22:	e5c6      	b.n	80026b2 <__aeabi_dsub+0xce>
 8002b24:	4663      	mov	r3, ip
 8002b26:	18c5      	adds	r5, r0, r3
 8002b28:	9b02      	ldr	r3, [sp, #8]
 8002b2a:	4285      	cmp	r5, r0
 8002b2c:	4180      	sbcs	r0, r0
 8002b2e:	469c      	mov	ip, r3
 8002b30:	4240      	negs	r0, r0
 8002b32:	4464      	add	r4, ip
 8002b34:	1824      	adds	r4, r4, r0
 8002b36:	2701      	movs	r7, #1
 8002b38:	0223      	lsls	r3, r4, #8
 8002b3a:	d400      	bmi.n	8002b3e <__aeabi_dsub+0x55a>
 8002b3c:	e6f5      	b.n	800292a <__aeabi_dsub+0x346>
 8002b3e:	2702      	movs	r7, #2
 8002b40:	e641      	b.n	80027c6 <__aeabi_dsub+0x1e2>
 8002b42:	4663      	mov	r3, ip
 8002b44:	1ac5      	subs	r5, r0, r3
 8002b46:	42a8      	cmp	r0, r5
 8002b48:	4180      	sbcs	r0, r0
 8002b4a:	9b02      	ldr	r3, [sp, #8]
 8002b4c:	4240      	negs	r0, r0
 8002b4e:	1ae4      	subs	r4, r4, r3
 8002b50:	2701      	movs	r7, #1
 8002b52:	1a24      	subs	r4, r4, r0
 8002b54:	e5a8      	b.n	80026a8 <__aeabi_dsub+0xc4>
 8002b56:	9d02      	ldr	r5, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	002b      	movs	r3, r5
 8002b5c:	3a20      	subs	r2, #32
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	4653      	mov	r3, sl
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d006      	beq.n	8002b76 <__aeabi_dsub+0x592>
 8002b68:	2240      	movs	r2, #64	@ 0x40
 8002b6a:	1ad2      	subs	r2, r2, r3
 8002b6c:	002b      	movs	r3, r5
 8002b6e:	4093      	lsls	r3, r2
 8002b70:	4662      	mov	r2, ip
 8002b72:	431a      	orrs	r2, r3
 8002b74:	4693      	mov	fp, r2
 8002b76:	465d      	mov	r5, fp
 8002b78:	1e6b      	subs	r3, r5, #1
 8002b7a:	419d      	sbcs	r5, r3
 8002b7c:	430d      	orrs	r5, r1
 8002b7e:	e615      	b.n	80027ac <__aeabi_dsub+0x1c8>
 8002b80:	0762      	lsls	r2, r4, #29
 8002b82:	08c0      	lsrs	r0, r0, #3
 8002b84:	4302      	orrs	r2, r0
 8002b86:	08e4      	lsrs	r4, r4, #3
 8002b88:	e70d      	b.n	80029a6 <__aeabi_dsub+0x3c2>
 8002b8a:	0011      	movs	r1, r2
 8002b8c:	0027      	movs	r7, r4
 8002b8e:	3920      	subs	r1, #32
 8002b90:	40cf      	lsrs	r7, r1
 8002b92:	2a20      	cmp	r2, #32
 8002b94:	d005      	beq.n	8002ba2 <__aeabi_dsub+0x5be>
 8002b96:	2140      	movs	r1, #64	@ 0x40
 8002b98:	1a8a      	subs	r2, r1, r2
 8002b9a:	4094      	lsls	r4, r2
 8002b9c:	0025      	movs	r5, r4
 8002b9e:	4305      	orrs	r5, r0
 8002ba0:	9503      	str	r5, [sp, #12]
 8002ba2:	9d03      	ldr	r5, [sp, #12]
 8002ba4:	1e6a      	subs	r2, r5, #1
 8002ba6:	4195      	sbcs	r5, r2
 8002ba8:	433d      	orrs	r5, r7
 8002baa:	e77d      	b.n	8002aa8 <__aeabi_dsub+0x4c4>
 8002bac:	2a00      	cmp	r2, #0
 8002bae:	d100      	bne.n	8002bb2 <__aeabi_dsub+0x5ce>
 8002bb0:	e744      	b.n	8002a3c <__aeabi_dsub+0x458>
 8002bb2:	2601      	movs	r6, #1
 8002bb4:	400e      	ands	r6, r1
 8002bb6:	4663      	mov	r3, ip
 8002bb8:	08d9      	lsrs	r1, r3, #3
 8002bba:	9b02      	ldr	r3, [sp, #8]
 8002bbc:	075a      	lsls	r2, r3, #29
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	08dc      	lsrs	r4, r3, #3
 8002bc2:	e6f0      	b.n	80029a6 <__aeabi_dsub+0x3c2>
 8002bc4:	2a00      	cmp	r2, #0
 8002bc6:	d028      	beq.n	8002c1a <__aeabi_dsub+0x636>
 8002bc8:	4662      	mov	r2, ip
 8002bca:	9f02      	ldr	r7, [sp, #8]
 8002bcc:	08c0      	lsrs	r0, r0, #3
 8002bce:	433a      	orrs	r2, r7
 8002bd0:	d100      	bne.n	8002bd4 <__aeabi_dsub+0x5f0>
 8002bd2:	e6dc      	b.n	800298e <__aeabi_dsub+0x3aa>
 8002bd4:	0762      	lsls	r2, r4, #29
 8002bd6:	4310      	orrs	r0, r2
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	08e4      	lsrs	r4, r4, #3
 8002bdc:	0312      	lsls	r2, r2, #12
 8002bde:	4214      	tst	r4, r2
 8002be0:	d009      	beq.n	8002bf6 <__aeabi_dsub+0x612>
 8002be2:	08fd      	lsrs	r5, r7, #3
 8002be4:	4215      	tst	r5, r2
 8002be6:	d106      	bne.n	8002bf6 <__aeabi_dsub+0x612>
 8002be8:	4663      	mov	r3, ip
 8002bea:	2601      	movs	r6, #1
 8002bec:	002c      	movs	r4, r5
 8002bee:	08d8      	lsrs	r0, r3, #3
 8002bf0:	077b      	lsls	r3, r7, #29
 8002bf2:	4318      	orrs	r0, r3
 8002bf4:	400e      	ands	r6, r1
 8002bf6:	0f42      	lsrs	r2, r0, #29
 8002bf8:	00c0      	lsls	r0, r0, #3
 8002bfa:	08c0      	lsrs	r0, r0, #3
 8002bfc:	0752      	lsls	r2, r2, #29
 8002bfe:	4302      	orrs	r2, r0
 8002c00:	e601      	b.n	8002806 <__aeabi_dsub+0x222>
 8002c02:	4663      	mov	r3, ip
 8002c04:	1a1d      	subs	r5, r3, r0
 8002c06:	45ac      	cmp	ip, r5
 8002c08:	4192      	sbcs	r2, r2
 8002c0a:	9b02      	ldr	r3, [sp, #8]
 8002c0c:	4252      	negs	r2, r2
 8002c0e:	1b1c      	subs	r4, r3, r4
 8002c10:	000e      	movs	r6, r1
 8002c12:	4688      	mov	r8, r1
 8002c14:	2701      	movs	r7, #1
 8002c16:	1aa4      	subs	r4, r4, r2
 8002c18:	e546      	b.n	80026a8 <__aeabi_dsub+0xc4>
 8002c1a:	4663      	mov	r3, ip
 8002c1c:	08d9      	lsrs	r1, r3, #3
 8002c1e:	9b02      	ldr	r3, [sp, #8]
 8002c20:	075a      	lsls	r2, r3, #29
 8002c22:	430a      	orrs	r2, r1
 8002c24:	08dc      	lsrs	r4, r3, #3
 8002c26:	e5ee      	b.n	8002806 <__aeabi_dsub+0x222>
 8002c28:	4663      	mov	r3, ip
 8002c2a:	9c02      	ldr	r4, [sp, #8]
 8002c2c:	9303      	str	r3, [sp, #12]
 8002c2e:	e6c7      	b.n	80029c0 <__aeabi_dsub+0x3dc>
 8002c30:	08c0      	lsrs	r0, r0, #3
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d100      	bne.n	8002c38 <__aeabi_dsub+0x654>
 8002c36:	e6aa      	b.n	800298e <__aeabi_dsub+0x3aa>
 8002c38:	0762      	lsls	r2, r4, #29
 8002c3a:	4310      	orrs	r0, r2
 8002c3c:	2280      	movs	r2, #128	@ 0x80
 8002c3e:	08e4      	lsrs	r4, r4, #3
 8002c40:	0312      	lsls	r2, r2, #12
 8002c42:	4214      	tst	r4, r2
 8002c44:	d0d7      	beq.n	8002bf6 <__aeabi_dsub+0x612>
 8002c46:	9f02      	ldr	r7, [sp, #8]
 8002c48:	08fd      	lsrs	r5, r7, #3
 8002c4a:	4215      	tst	r5, r2
 8002c4c:	d1d3      	bne.n	8002bf6 <__aeabi_dsub+0x612>
 8002c4e:	4663      	mov	r3, ip
 8002c50:	2601      	movs	r6, #1
 8002c52:	08d8      	lsrs	r0, r3, #3
 8002c54:	077b      	lsls	r3, r7, #29
 8002c56:	002c      	movs	r4, r5
 8002c58:	4318      	orrs	r0, r3
 8002c5a:	400e      	ands	r6, r1
 8002c5c:	e7cb      	b.n	8002bf6 <__aeabi_dsub+0x612>
 8002c5e:	000a      	movs	r2, r1
 8002c60:	0027      	movs	r7, r4
 8002c62:	3a20      	subs	r2, #32
 8002c64:	40d7      	lsrs	r7, r2
 8002c66:	2920      	cmp	r1, #32
 8002c68:	d005      	beq.n	8002c76 <__aeabi_dsub+0x692>
 8002c6a:	2240      	movs	r2, #64	@ 0x40
 8002c6c:	1a52      	subs	r2, r2, r1
 8002c6e:	4094      	lsls	r4, r2
 8002c70:	0025      	movs	r5, r4
 8002c72:	4305      	orrs	r5, r0
 8002c74:	9503      	str	r5, [sp, #12]
 8002c76:	9d03      	ldr	r5, [sp, #12]
 8002c78:	1e6a      	subs	r2, r5, #1
 8002c7a:	4195      	sbcs	r5, r2
 8002c7c:	432f      	orrs	r7, r5
 8002c7e:	e610      	b.n	80028a2 <__aeabi_dsub+0x2be>
 8002c80:	0014      	movs	r4, r2
 8002c82:	2500      	movs	r5, #0
 8002c84:	2200      	movs	r2, #0
 8002c86:	e556      	b.n	8002736 <__aeabi_dsub+0x152>
 8002c88:	9b02      	ldr	r3, [sp, #8]
 8002c8a:	4460      	add	r0, ip
 8002c8c:	4699      	mov	r9, r3
 8002c8e:	4560      	cmp	r0, ip
 8002c90:	4192      	sbcs	r2, r2
 8002c92:	444c      	add	r4, r9
 8002c94:	4252      	negs	r2, r2
 8002c96:	0005      	movs	r5, r0
 8002c98:	18a4      	adds	r4, r4, r2
 8002c9a:	e74c      	b.n	8002b36 <__aeabi_dsub+0x552>
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	001c      	movs	r4, r3
 8002ca0:	432a      	orrs	r2, r5
 8002ca2:	d000      	beq.n	8002ca6 <__aeabi_dsub+0x6c2>
 8002ca4:	e6b3      	b.n	8002a0e <__aeabi_dsub+0x42a>
 8002ca6:	e6c9      	b.n	8002a3c <__aeabi_dsub+0x458>
 8002ca8:	2480      	movs	r4, #128	@ 0x80
 8002caa:	2600      	movs	r6, #0
 8002cac:	0324      	lsls	r4, r4, #12
 8002cae:	e5ae      	b.n	800280e <__aeabi_dsub+0x22a>
 8002cb0:	2120      	movs	r1, #32
 8002cb2:	2500      	movs	r5, #0
 8002cb4:	1a09      	subs	r1, r1, r0
 8002cb6:	e517      	b.n	80026e8 <__aeabi_dsub+0x104>
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2500      	movs	r5, #0
 8002cbc:	4c0b      	ldr	r4, [pc, #44]	@ (8002cec <__aeabi_dsub+0x708>)
 8002cbe:	e53a      	b.n	8002736 <__aeabi_dsub+0x152>
 8002cc0:	2d00      	cmp	r5, #0
 8002cc2:	d100      	bne.n	8002cc6 <__aeabi_dsub+0x6e2>
 8002cc4:	e5f6      	b.n	80028b4 <__aeabi_dsub+0x2d0>
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	1bda      	subs	r2, r3, r7
 8002cca:	4692      	mov	sl, r2
 8002ccc:	2f00      	cmp	r7, #0
 8002cce:	d100      	bne.n	8002cd2 <__aeabi_dsub+0x6ee>
 8002cd0:	e66f      	b.n	80029b2 <__aeabi_dsub+0x3ce>
 8002cd2:	2a38      	cmp	r2, #56	@ 0x38
 8002cd4:	dc05      	bgt.n	8002ce2 <__aeabi_dsub+0x6fe>
 8002cd6:	2680      	movs	r6, #128	@ 0x80
 8002cd8:	0436      	lsls	r6, r6, #16
 8002cda:	4334      	orrs	r4, r6
 8002cdc:	4688      	mov	r8, r1
 8002cde:	000e      	movs	r6, r1
 8002ce0:	e6d1      	b.n	8002a86 <__aeabi_dsub+0x4a2>
 8002ce2:	4688      	mov	r8, r1
 8002ce4:	000e      	movs	r6, r1
 8002ce6:	2501      	movs	r5, #1
 8002ce8:	e6de      	b.n	8002aa8 <__aeabi_dsub+0x4c4>
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	000007ff 	.word	0x000007ff
 8002cf0:	ff7fffff 	.word	0xff7fffff
 8002cf4:	000007fe 	.word	0x000007fe
 8002cf8:	2d00      	cmp	r5, #0
 8002cfa:	d100      	bne.n	8002cfe <__aeabi_dsub+0x71a>
 8002cfc:	e668      	b.n	80029d0 <__aeabi_dsub+0x3ec>
 8002cfe:	464b      	mov	r3, r9
 8002d00:	1bd9      	subs	r1, r3, r7
 8002d02:	2f00      	cmp	r7, #0
 8002d04:	d101      	bne.n	8002d0a <__aeabi_dsub+0x726>
 8002d06:	468a      	mov	sl, r1
 8002d08:	e5a7      	b.n	800285a <__aeabi_dsub+0x276>
 8002d0a:	2701      	movs	r7, #1
 8002d0c:	2938      	cmp	r1, #56	@ 0x38
 8002d0e:	dd00      	ble.n	8002d12 <__aeabi_dsub+0x72e>
 8002d10:	e5c7      	b.n	80028a2 <__aeabi_dsub+0x2be>
 8002d12:	2280      	movs	r2, #128	@ 0x80
 8002d14:	0412      	lsls	r2, r2, #16
 8002d16:	4314      	orrs	r4, r2
 8002d18:	e5af      	b.n	800287a <__aeabi_dsub+0x296>
 8002d1a:	46c0      	nop			@ (mov r8, r8)

08002d1c <__aeabi_dcmpun>:
 8002d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1e:	46c6      	mov	lr, r8
 8002d20:	031e      	lsls	r6, r3, #12
 8002d22:	0b36      	lsrs	r6, r6, #12
 8002d24:	46b0      	mov	r8, r6
 8002d26:	4e0d      	ldr	r6, [pc, #52]	@ (8002d5c <__aeabi_dcmpun+0x40>)
 8002d28:	030c      	lsls	r4, r1, #12
 8002d2a:	004d      	lsls	r5, r1, #1
 8002d2c:	005f      	lsls	r7, r3, #1
 8002d2e:	b500      	push	{lr}
 8002d30:	0b24      	lsrs	r4, r4, #12
 8002d32:	0d6d      	lsrs	r5, r5, #21
 8002d34:	0d7f      	lsrs	r7, r7, #21
 8002d36:	42b5      	cmp	r5, r6
 8002d38:	d00b      	beq.n	8002d52 <__aeabi_dcmpun+0x36>
 8002d3a:	4908      	ldr	r1, [pc, #32]	@ (8002d5c <__aeabi_dcmpun+0x40>)
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	428f      	cmp	r7, r1
 8002d40:	d104      	bne.n	8002d4c <__aeabi_dcmpun+0x30>
 8002d42:	4646      	mov	r6, r8
 8002d44:	4316      	orrs	r6, r2
 8002d46:	0030      	movs	r0, r6
 8002d48:	1e43      	subs	r3, r0, #1
 8002d4a:	4198      	sbcs	r0, r3
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	46b8      	mov	r8, r7
 8002d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d52:	4304      	orrs	r4, r0
 8002d54:	2001      	movs	r0, #1
 8002d56:	2c00      	cmp	r4, #0
 8002d58:	d1f8      	bne.n	8002d4c <__aeabi_dcmpun+0x30>
 8002d5a:	e7ee      	b.n	8002d3a <__aeabi_dcmpun+0x1e>
 8002d5c:	000007ff 	.word	0x000007ff

08002d60 <__aeabi_d2iz>:
 8002d60:	000b      	movs	r3, r1
 8002d62:	0002      	movs	r2, r0
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	4d16      	ldr	r5, [pc, #88]	@ (8002dc0 <__aeabi_d2iz+0x60>)
 8002d68:	030c      	lsls	r4, r1, #12
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	0049      	lsls	r1, r1, #1
 8002d6e:	2000      	movs	r0, #0
 8002d70:	9200      	str	r2, [sp, #0]
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	0b24      	lsrs	r4, r4, #12
 8002d76:	0d49      	lsrs	r1, r1, #21
 8002d78:	0fde      	lsrs	r6, r3, #31
 8002d7a:	42a9      	cmp	r1, r5
 8002d7c:	dd04      	ble.n	8002d88 <__aeabi_d2iz+0x28>
 8002d7e:	4811      	ldr	r0, [pc, #68]	@ (8002dc4 <__aeabi_d2iz+0x64>)
 8002d80:	4281      	cmp	r1, r0
 8002d82:	dd03      	ble.n	8002d8c <__aeabi_d2iz+0x2c>
 8002d84:	4b10      	ldr	r3, [pc, #64]	@ (8002dc8 <__aeabi_d2iz+0x68>)
 8002d86:	18f0      	adds	r0, r6, r3
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd70      	pop	{r4, r5, r6, pc}
 8002d8c:	2080      	movs	r0, #128	@ 0x80
 8002d8e:	0340      	lsls	r0, r0, #13
 8002d90:	4320      	orrs	r0, r4
 8002d92:	4c0e      	ldr	r4, [pc, #56]	@ (8002dcc <__aeabi_d2iz+0x6c>)
 8002d94:	1a64      	subs	r4, r4, r1
 8002d96:	2c1f      	cmp	r4, #31
 8002d98:	dd08      	ble.n	8002dac <__aeabi_d2iz+0x4c>
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <__aeabi_d2iz+0x70>)
 8002d9c:	1a5b      	subs	r3, r3, r1
 8002d9e:	40d8      	lsrs	r0, r3
 8002da0:	0003      	movs	r3, r0
 8002da2:	4258      	negs	r0, r3
 8002da4:	2e00      	cmp	r6, #0
 8002da6:	d1ef      	bne.n	8002d88 <__aeabi_d2iz+0x28>
 8002da8:	0018      	movs	r0, r3
 8002daa:	e7ed      	b.n	8002d88 <__aeabi_d2iz+0x28>
 8002dac:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <__aeabi_d2iz+0x74>)
 8002dae:	9a00      	ldr	r2, [sp, #0]
 8002db0:	469c      	mov	ip, r3
 8002db2:	0003      	movs	r3, r0
 8002db4:	4461      	add	r1, ip
 8002db6:	408b      	lsls	r3, r1
 8002db8:	40e2      	lsrs	r2, r4
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	e7f1      	b.n	8002da2 <__aeabi_d2iz+0x42>
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	000003fe 	.word	0x000003fe
 8002dc4:	0000041d 	.word	0x0000041d
 8002dc8:	7fffffff 	.word	0x7fffffff
 8002dcc:	00000433 	.word	0x00000433
 8002dd0:	00000413 	.word	0x00000413
 8002dd4:	fffffbed 	.word	0xfffffbed

08002dd8 <__aeabi_i2d>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d016      	beq.n	8002e0c <__aeabi_i2d+0x34>
 8002dde:	17c3      	asrs	r3, r0, #31
 8002de0:	18c5      	adds	r5, r0, r3
 8002de2:	405d      	eors	r5, r3
 8002de4:	0fc4      	lsrs	r4, r0, #31
 8002de6:	0028      	movs	r0, r5
 8002de8:	f000 f914 	bl	8003014 <__clzsi2>
 8002dec:	4b10      	ldr	r3, [pc, #64]	@ (8002e30 <__aeabi_i2d+0x58>)
 8002dee:	1a1b      	subs	r3, r3, r0
 8002df0:	055b      	lsls	r3, r3, #21
 8002df2:	0d5b      	lsrs	r3, r3, #21
 8002df4:	280a      	cmp	r0, #10
 8002df6:	dc14      	bgt.n	8002e22 <__aeabi_i2d+0x4a>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	002e      	movs	r6, r5
 8002dfc:	3215      	adds	r2, #21
 8002dfe:	4096      	lsls	r6, r2
 8002e00:	220b      	movs	r2, #11
 8002e02:	1a12      	subs	r2, r2, r0
 8002e04:	40d5      	lsrs	r5, r2
 8002e06:	032d      	lsls	r5, r5, #12
 8002e08:	0b2d      	lsrs	r5, r5, #12
 8002e0a:	e003      	b.n	8002e14 <__aeabi_i2d+0x3c>
 8002e0c:	2400      	movs	r4, #0
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2500      	movs	r5, #0
 8002e12:	2600      	movs	r6, #0
 8002e14:	051b      	lsls	r3, r3, #20
 8002e16:	432b      	orrs	r3, r5
 8002e18:	07e4      	lsls	r4, r4, #31
 8002e1a:	4323      	orrs	r3, r4
 8002e1c:	0030      	movs	r0, r6
 8002e1e:	0019      	movs	r1, r3
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
 8002e22:	380b      	subs	r0, #11
 8002e24:	4085      	lsls	r5, r0
 8002e26:	032d      	lsls	r5, r5, #12
 8002e28:	2600      	movs	r6, #0
 8002e2a:	0b2d      	lsrs	r5, r5, #12
 8002e2c:	e7f2      	b.n	8002e14 <__aeabi_i2d+0x3c>
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	0000041e 	.word	0x0000041e

08002e34 <__aeabi_ui2d>:
 8002e34:	b510      	push	{r4, lr}
 8002e36:	1e04      	subs	r4, r0, #0
 8002e38:	d010      	beq.n	8002e5c <__aeabi_ui2d+0x28>
 8002e3a:	f000 f8eb 	bl	8003014 <__clzsi2>
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <__aeabi_ui2d+0x44>)
 8002e40:	1a1b      	subs	r3, r3, r0
 8002e42:	055b      	lsls	r3, r3, #21
 8002e44:	0d5b      	lsrs	r3, r3, #21
 8002e46:	280a      	cmp	r0, #10
 8002e48:	dc0f      	bgt.n	8002e6a <__aeabi_ui2d+0x36>
 8002e4a:	220b      	movs	r2, #11
 8002e4c:	0021      	movs	r1, r4
 8002e4e:	1a12      	subs	r2, r2, r0
 8002e50:	40d1      	lsrs	r1, r2
 8002e52:	3015      	adds	r0, #21
 8002e54:	030a      	lsls	r2, r1, #12
 8002e56:	4084      	lsls	r4, r0
 8002e58:	0b12      	lsrs	r2, r2, #12
 8002e5a:	e001      	b.n	8002e60 <__aeabi_ui2d+0x2c>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2200      	movs	r2, #0
 8002e60:	051b      	lsls	r3, r3, #20
 8002e62:	4313      	orrs	r3, r2
 8002e64:	0020      	movs	r0, r4
 8002e66:	0019      	movs	r1, r3
 8002e68:	bd10      	pop	{r4, pc}
 8002e6a:	0022      	movs	r2, r4
 8002e6c:	380b      	subs	r0, #11
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	0312      	lsls	r2, r2, #12
 8002e72:	2400      	movs	r4, #0
 8002e74:	0b12      	lsrs	r2, r2, #12
 8002e76:	e7f3      	b.n	8002e60 <__aeabi_ui2d+0x2c>
 8002e78:	0000041e 	.word	0x0000041e

08002e7c <__aeabi_f2d>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	0242      	lsls	r2, r0, #9
 8002e80:	0043      	lsls	r3, r0, #1
 8002e82:	0fc4      	lsrs	r4, r0, #31
 8002e84:	20fe      	movs	r0, #254	@ 0xfe
 8002e86:	0e1b      	lsrs	r3, r3, #24
 8002e88:	1c59      	adds	r1, r3, #1
 8002e8a:	0a55      	lsrs	r5, r2, #9
 8002e8c:	4208      	tst	r0, r1
 8002e8e:	d00c      	beq.n	8002eaa <__aeabi_f2d+0x2e>
 8002e90:	21e0      	movs	r1, #224	@ 0xe0
 8002e92:	0089      	lsls	r1, r1, #2
 8002e94:	468c      	mov	ip, r1
 8002e96:	076d      	lsls	r5, r5, #29
 8002e98:	0b12      	lsrs	r2, r2, #12
 8002e9a:	4463      	add	r3, ip
 8002e9c:	051b      	lsls	r3, r3, #20
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	07e4      	lsls	r4, r4, #31
 8002ea2:	4323      	orrs	r3, r4
 8002ea4:	0028      	movs	r0, r5
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	bd70      	pop	{r4, r5, r6, pc}
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d114      	bne.n	8002ed8 <__aeabi_f2d+0x5c>
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	d01b      	beq.n	8002eea <__aeabi_f2d+0x6e>
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	f000 f8ae 	bl	8003014 <__clzsi2>
 8002eb8:	280a      	cmp	r0, #10
 8002eba:	dc1c      	bgt.n	8002ef6 <__aeabi_f2d+0x7a>
 8002ebc:	230b      	movs	r3, #11
 8002ebe:	002a      	movs	r2, r5
 8002ec0:	1a1b      	subs	r3, r3, r0
 8002ec2:	40da      	lsrs	r2, r3
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	3315      	adds	r3, #21
 8002ec8:	409d      	lsls	r5, r3
 8002eca:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <__aeabi_f2d+0x88>)
 8002ecc:	0312      	lsls	r2, r2, #12
 8002ece:	1a1b      	subs	r3, r3, r0
 8002ed0:	055b      	lsls	r3, r3, #21
 8002ed2:	0b12      	lsrs	r2, r2, #12
 8002ed4:	0d5b      	lsrs	r3, r3, #21
 8002ed6:	e7e1      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ed8:	2d00      	cmp	r5, #0
 8002eda:	d009      	beq.n	8002ef0 <__aeabi_f2d+0x74>
 8002edc:	0b13      	lsrs	r3, r2, #12
 8002ede:	2280      	movs	r2, #128	@ 0x80
 8002ee0:	0312      	lsls	r2, r2, #12
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	076d      	lsls	r5, r5, #29
 8002ee6:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <__aeabi_f2d+0x8c>)
 8002ee8:	e7d8      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2200      	movs	r2, #0
 8002eee:	e7d5      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <__aeabi_f2d+0x8c>)
 8002ef4:	e7d2      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	002a      	movs	r2, r5
 8002efa:	3b0b      	subs	r3, #11
 8002efc:	409a      	lsls	r2, r3
 8002efe:	2500      	movs	r5, #0
 8002f00:	e7e3      	b.n	8002eca <__aeabi_f2d+0x4e>
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	00000389 	.word	0x00000389
 8002f08:	000007ff 	.word	0x000007ff

08002f0c <__aeabi_d2f>:
 8002f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0e:	004b      	lsls	r3, r1, #1
 8002f10:	030f      	lsls	r7, r1, #12
 8002f12:	0d5b      	lsrs	r3, r3, #21
 8002f14:	4c3b      	ldr	r4, [pc, #236]	@ (8003004 <__aeabi_d2f+0xf8>)
 8002f16:	0f45      	lsrs	r5, r0, #29
 8002f18:	b083      	sub	sp, #12
 8002f1a:	0a7f      	lsrs	r7, r7, #9
 8002f1c:	1c5e      	adds	r6, r3, #1
 8002f1e:	432f      	orrs	r7, r5
 8002f20:	9000      	str	r0, [sp, #0]
 8002f22:	9101      	str	r1, [sp, #4]
 8002f24:	0fca      	lsrs	r2, r1, #31
 8002f26:	00c5      	lsls	r5, r0, #3
 8002f28:	4226      	tst	r6, r4
 8002f2a:	d00b      	beq.n	8002f44 <__aeabi_d2f+0x38>
 8002f2c:	4936      	ldr	r1, [pc, #216]	@ (8003008 <__aeabi_d2f+0xfc>)
 8002f2e:	185c      	adds	r4, r3, r1
 8002f30:	2cfe      	cmp	r4, #254	@ 0xfe
 8002f32:	dd13      	ble.n	8002f5c <__aeabi_d2f+0x50>
 8002f34:	20ff      	movs	r0, #255	@ 0xff
 8002f36:	2300      	movs	r3, #0
 8002f38:	05c0      	lsls	r0, r0, #23
 8002f3a:	4318      	orrs	r0, r3
 8002f3c:	07d2      	lsls	r2, r2, #31
 8002f3e:	4310      	orrs	r0, r2
 8002f40:	b003      	add	sp, #12
 8002f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <__aeabi_d2f+0x42>
 8002f48:	2000      	movs	r0, #0
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e7f4      	b.n	8002f38 <__aeabi_d2f+0x2c>
 8002f4e:	433d      	orrs	r5, r7
 8002f50:	d0f0      	beq.n	8002f34 <__aeabi_d2f+0x28>
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	03db      	lsls	r3, r3, #15
 8002f56:	20ff      	movs	r0, #255	@ 0xff
 8002f58:	433b      	orrs	r3, r7
 8002f5a:	e7ed      	b.n	8002f38 <__aeabi_d2f+0x2c>
 8002f5c:	2c00      	cmp	r4, #0
 8002f5e:	dd14      	ble.n	8002f8a <__aeabi_d2f+0x7e>
 8002f60:	9b00      	ldr	r3, [sp, #0]
 8002f62:	00ff      	lsls	r7, r7, #3
 8002f64:	019b      	lsls	r3, r3, #6
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	4183      	sbcs	r3, r0
 8002f6a:	0f69      	lsrs	r1, r5, #29
 8002f6c:	433b      	orrs	r3, r7
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	0759      	lsls	r1, r3, #29
 8002f72:	d041      	beq.n	8002ff8 <__aeabi_d2f+0xec>
 8002f74:	210f      	movs	r1, #15
 8002f76:	4019      	ands	r1, r3
 8002f78:	2904      	cmp	r1, #4
 8002f7a:	d028      	beq.n	8002fce <__aeabi_d2f+0xc2>
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	0159      	lsls	r1, r3, #5
 8002f80:	d525      	bpl.n	8002fce <__aeabi_d2f+0xc2>
 8002f82:	3401      	adds	r4, #1
 8002f84:	2300      	movs	r3, #0
 8002f86:	b2e0      	uxtb	r0, r4
 8002f88:	e7d6      	b.n	8002f38 <__aeabi_d2f+0x2c>
 8002f8a:	0021      	movs	r1, r4
 8002f8c:	3117      	adds	r1, #23
 8002f8e:	dbdb      	blt.n	8002f48 <__aeabi_d2f+0x3c>
 8002f90:	2180      	movs	r1, #128	@ 0x80
 8002f92:	201e      	movs	r0, #30
 8002f94:	0409      	lsls	r1, r1, #16
 8002f96:	4339      	orrs	r1, r7
 8002f98:	1b00      	subs	r0, r0, r4
 8002f9a:	281f      	cmp	r0, #31
 8002f9c:	dd1b      	ble.n	8002fd6 <__aeabi_d2f+0xca>
 8002f9e:	2602      	movs	r6, #2
 8002fa0:	4276      	negs	r6, r6
 8002fa2:	1b34      	subs	r4, r6, r4
 8002fa4:	000e      	movs	r6, r1
 8002fa6:	40e6      	lsrs	r6, r4
 8002fa8:	0034      	movs	r4, r6
 8002faa:	2820      	cmp	r0, #32
 8002fac:	d004      	beq.n	8002fb8 <__aeabi_d2f+0xac>
 8002fae:	4817      	ldr	r0, [pc, #92]	@ (800300c <__aeabi_d2f+0x100>)
 8002fb0:	4684      	mov	ip, r0
 8002fb2:	4463      	add	r3, ip
 8002fb4:	4099      	lsls	r1, r3
 8002fb6:	430d      	orrs	r5, r1
 8002fb8:	002b      	movs	r3, r5
 8002fba:	1e59      	subs	r1, r3, #1
 8002fbc:	418b      	sbcs	r3, r1
 8002fbe:	4323      	orrs	r3, r4
 8002fc0:	0759      	lsls	r1, r3, #29
 8002fc2:	d015      	beq.n	8002ff0 <__aeabi_d2f+0xe4>
 8002fc4:	210f      	movs	r1, #15
 8002fc6:	2400      	movs	r4, #0
 8002fc8:	4019      	ands	r1, r3
 8002fca:	2904      	cmp	r1, #4
 8002fcc:	d117      	bne.n	8002ffe <__aeabi_d2f+0xf2>
 8002fce:	019b      	lsls	r3, r3, #6
 8002fd0:	0a5b      	lsrs	r3, r3, #9
 8002fd2:	b2e0      	uxtb	r0, r4
 8002fd4:	e7b0      	b.n	8002f38 <__aeabi_d2f+0x2c>
 8002fd6:	4c0e      	ldr	r4, [pc, #56]	@ (8003010 <__aeabi_d2f+0x104>)
 8002fd8:	191c      	adds	r4, r3, r4
 8002fda:	002b      	movs	r3, r5
 8002fdc:	40a5      	lsls	r5, r4
 8002fde:	40c3      	lsrs	r3, r0
 8002fe0:	40a1      	lsls	r1, r4
 8002fe2:	1e68      	subs	r0, r5, #1
 8002fe4:	4185      	sbcs	r5, r0
 8002fe6:	4329      	orrs	r1, r5
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	2400      	movs	r4, #0
 8002fec:	0759      	lsls	r1, r3, #29
 8002fee:	d1c1      	bne.n	8002f74 <__aeabi_d2f+0x68>
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	0a5b      	lsrs	r3, r3, #9
 8002ff6:	e79f      	b.n	8002f38 <__aeabi_d2f+0x2c>
 8002ff8:	08db      	lsrs	r3, r3, #3
 8002ffa:	b2e0      	uxtb	r0, r4
 8002ffc:	e79c      	b.n	8002f38 <__aeabi_d2f+0x2c>
 8002ffe:	3304      	adds	r3, #4
 8003000:	e7e5      	b.n	8002fce <__aeabi_d2f+0xc2>
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	000007fe 	.word	0x000007fe
 8003008:	fffffc80 	.word	0xfffffc80
 800300c:	fffffca2 	.word	0xfffffca2
 8003010:	fffffc82 	.word	0xfffffc82

08003014 <__clzsi2>:
 8003014:	211c      	movs	r1, #28
 8003016:	2301      	movs	r3, #1
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	4298      	cmp	r0, r3
 800301c:	d301      	bcc.n	8003022 <__clzsi2+0xe>
 800301e:	0c00      	lsrs	r0, r0, #16
 8003020:	3910      	subs	r1, #16
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	4298      	cmp	r0, r3
 8003026:	d301      	bcc.n	800302c <__clzsi2+0x18>
 8003028:	0a00      	lsrs	r0, r0, #8
 800302a:	3908      	subs	r1, #8
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	4298      	cmp	r0, r3
 8003030:	d301      	bcc.n	8003036 <__clzsi2+0x22>
 8003032:	0900      	lsrs	r0, r0, #4
 8003034:	3904      	subs	r1, #4
 8003036:	a202      	add	r2, pc, #8	@ (adr r2, 8003040 <__clzsi2+0x2c>)
 8003038:	5c10      	ldrb	r0, [r2, r0]
 800303a:	1840      	adds	r0, r0, r1
 800303c:	4770      	bx	lr
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	02020304 	.word	0x02020304
 8003044:	01010101 	.word	0x01010101
	...

08003050 <__clzdi2>:
 8003050:	b510      	push	{r4, lr}
 8003052:	2900      	cmp	r1, #0
 8003054:	d103      	bne.n	800305e <__clzdi2+0xe>
 8003056:	f7ff ffdd 	bl	8003014 <__clzsi2>
 800305a:	3020      	adds	r0, #32
 800305c:	e002      	b.n	8003064 <__clzdi2+0x14>
 800305e:	0008      	movs	r0, r1
 8003060:	f7ff ffd8 	bl	8003014 <__clzsi2>
 8003064:	bd10      	pop	{r4, pc}
 8003066:	46c0      	nop			@ (mov r8, r8)

08003068 <HAL_UART_TxCpltCallback>:

uint8_t data[100];
volatile uint8_t uart_tx_complete = 0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a04      	ldr	r2, [pc, #16]	@ (8003088 <HAL_UART_TxCpltCallback+0x20>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d102      	bne.n	8003080 <HAL_UART_TxCpltCallback+0x18>
	        uart_tx_complete = 1;
 800307a:	4b04      	ldr	r3, [pc, #16]	@ (800308c <HAL_UART_TxCpltCallback+0x24>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
	    }
}
 8003080:	46c0      	nop			@ (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40004400 	.word	0x40004400
 800308c:	2000076c 	.word	0x2000076c

08003090 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	adc_conv_complete_flag = 1;
 8003098:	4b03      	ldr	r3, [pc, #12]	@ (80030a8 <HAL_ADC_ConvCpltCallback+0x18>)
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b002      	add	sp, #8
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			@ (mov r8, r8)
 80030a8:	200006e4 	.word	0x200006e4

080030ac <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	NextionUpdate(&huart1, &nextion);
 80030b4:	4a04      	ldr	r2, [pc, #16]	@ (80030c8 <HAL_UART_RxCpltCallback+0x1c>)
 80030b6:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <HAL_UART_RxCpltCallback+0x20>)
 80030b8:	0011      	movs	r1, r2
 80030ba:	0018      	movs	r0, r3
 80030bc:	f001 fd35 	bl	8004b2a <NextionUpdate>
}
 80030c0:	46c0      	nop			@ (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b002      	add	sp, #8
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200004d0 	.word	0x200004d0
 80030cc:	200003a8 	.word	0x200003a8

080030d0 <buttonCallback>:
void buttonCallback(){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RELAY_GPIO_Port, RELAY_Pin);
 80030d4:	2380      	movs	r3, #128	@ 0x80
 80030d6:	021a      	lsls	r2, r3, #8
 80030d8:	23a0      	movs	r3, #160	@ 0xa0
 80030da:	05db      	lsls	r3, r3, #23
 80030dc:	0011      	movs	r1, r2
 80030de:	0018      	movs	r0, r3
 80030e0:	f003 fb42 	bl	8006768 <HAL_GPIO_TogglePin>
}
 80030e4:	46c0      	nop			@ (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <ResetVariable>:
void ResetVariable(){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
	MaxRPM=0;
 80030f0:	4906      	ldr	r1, [pc, #24]	@ (800310c <ResetVariable+0x20>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	2300      	movs	r3, #0
 80030f6:	600a      	str	r2, [r1, #0]
 80030f8:	604b      	str	r3, [r1, #4]
	MaxCurr=0;
 80030fa:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <ResetVariable+0x24>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
	MaxTorque=0;
 8003100:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <ResetVariable+0x28>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	200006e8 	.word	0x200006e8
 8003110:	200006fc 	.word	0x200006fc
 8003114:	20000700 	.word	0x20000700

08003118 <init_weight>:

void init_weight(hx711_t *hx711){
 8003118:	b5b0      	push	{r4, r5, r7, lr}
 800311a:	b0a4      	sub	sp, #144	@ 0x90
 800311c:	af02      	add	r7, sp, #8
 800311e:	6078      	str	r0, [r7, #4]
	char buffer[128] = {0};
 8003120:	2508      	movs	r5, #8
 8003122:	197b      	adds	r3, r7, r5
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	3304      	adds	r3, #4
 800312a:	227c      	movs	r2, #124	@ 0x7c
 800312c:	2100      	movs	r1, #0
 800312e:	0018      	movs	r0, r3
 8003130:	f008 fa06 	bl	800b540 <memset>
	sprintf(buffer,"HX711 initialization\n\r");
 8003134:	4a1b      	ldr	r2, [pc, #108]	@ (80031a4 <init_weight+0x8c>)
 8003136:	197b      	adds	r3, r7, r5
 8003138:	0011      	movs	r1, r2
 800313a:	0018      	movs	r0, r3
 800313c:	f008 f994 	bl	800b468 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)(buffer), sizeof(buffer), 100);
 8003140:	1979      	adds	r1, r7, r5
 8003142:	4819      	ldr	r0, [pc, #100]	@ (80031a8 <init_weight+0x90>)
 8003144:	2364      	movs	r3, #100	@ 0x64
 8003146:	2280      	movs	r2, #128	@ 0x80
 8003148:	f004 fea8 	bl	8007e9c <HAL_UART_Transmit>
	hx711_init(hx711, GPIOB, GPIO_PIN_8, GPIOB, GPIO_PIN_2); //HX711 CLK on PA1, Data on PA4
 800314c:	4c17      	ldr	r4, [pc, #92]	@ (80031ac <init_weight+0x94>)
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	005a      	lsls	r2, r3, #1
 8003152:	4916      	ldr	r1, [pc, #88]	@ (80031ac <init_weight+0x94>)
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	2304      	movs	r3, #4
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	0023      	movs	r3, r4
 800315c:	f001 f9cd 	bl	80044fa <hx711_init>
	set_gain(hx711, 128, 32); //setting gain for ch A ir B
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	2180      	movs	r1, #128	@ 0x80
 8003166:	0018      	movs	r0, r3
 8003168:	f001 fa2c 	bl	80045c4 <set_gain>
	set_scale(hx711, -225.245, -10.98); //scale factor
 800316c:	4a10      	ldr	r2, [pc, #64]	@ (80031b0 <init_weight+0x98>)
 800316e:	4911      	ldr	r1, [pc, #68]	@ (80031b4 <init_weight+0x9c>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	0018      	movs	r0, r3
 8003174:	f001 fa16 	bl	80045a4 <set_scale>
	tare_all(hx711, 10); //tare
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	210a      	movs	r1, #10
 800317c:	0018      	movs	r0, r3
 800317e:	f001 fc19 	bl	80049b4 <tare_all>

	sprintf(buffer,"HX711 module has been initialized\n\r");
 8003182:	4a0d      	ldr	r2, [pc, #52]	@ (80031b8 <init_weight+0xa0>)
 8003184:	197b      	adds	r3, r7, r5
 8003186:	0011      	movs	r1, r2
 8003188:	0018      	movs	r0, r3
 800318a:	f008 f96d 	bl	800b468 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)(buffer), sizeof(buffer), 100);
 800318e:	1979      	adds	r1, r7, r5
 8003190:	4805      	ldr	r0, [pc, #20]	@ (80031a8 <init_weight+0x90>)
 8003192:	2364      	movs	r3, #100	@ 0x64
 8003194:	2280      	movs	r2, #128	@ 0x80
 8003196:	f004 fe81 	bl	8007e9c <HAL_UART_Transmit>
}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b022      	add	sp, #136	@ 0x88
 80031a0:	bdb0      	pop	{r4, r5, r7, pc}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	0800d6d8 	.word	0x0800d6d8
 80031a8:	2000043c 	.word	0x2000043c
 80031ac:	50000400 	.word	0x50000400
 80031b0:	c12fae14 	.word	0xc12fae14
 80031b4:	c3613eb8 	.word	0xc3613eb8
 80031b8:	0800d6f0 	.word	0x0800d6f0

080031bc <measure_weight>:

float measure_weight(hx711_t hx711){
 80031bc:	b084      	sub	sp, #16
 80031be:	b5b0      	push	{r4, r5, r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	2518      	movs	r5, #24
 80031c6:	197c      	adds	r4, r7, r5
 80031c8:	6020      	str	r0, [r4, #0]
 80031ca:	6061      	str	r1, [r4, #4]
 80031cc:	60a2      	str	r2, [r4, #8]
 80031ce:	60e3      	str	r3, [r4, #12]
	float weightA = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	607b      	str	r3, [r7, #4]
	weightA = get_weight(&hx711, 1, CHANNEL_A); //measure weight
 80031d4:	197b      	adds	r3, r7, r5
 80031d6:	2200      	movs	r2, #0
 80031d8:	2101      	movs	r1, #1
 80031da:	0018      	movs	r0, r3
 80031dc:	f001 fc03 	bl	80049e6 <get_weight>
 80031e0:	1c03      	adds	r3, r0, #0
 80031e2:	607b      	str	r3, [r7, #4]
	weightA = (weightA < 0) ? 0 : weightA; //cannot get into negative
 80031e4:	2100      	movs	r1, #0
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd f96e 	bl	80004c8 <__aeabi_fcmplt>
 80031ec:	1e03      	subs	r3, r0, #0
 80031ee:	d001      	beq.n	80031f4 <measure_weight+0x38>
 80031f0:	2300      	movs	r3, #0
 80031f2:	e000      	b.n	80031f6 <measure_weight+0x3a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	607b      	str	r3, [r7, #4]
	return weightA;
 80031f8:	687b      	ldr	r3, [r7, #4]
}
 80031fa:	1c18      	adds	r0, r3, #0
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b002      	add	sp, #8
 8003200:	bcb0      	pop	{r4, r5, r7}
 8003202:	bc08      	pop	{r3}
 8003204:	b004      	add	sp, #16
 8003206:	4718      	bx	r3

08003208 <doEncoder>:

void doEncoder(TIM_HandleTypeDef *htim){
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	static uint32_t lastTicks = 0;
	static uint32_t lastCount = 0;
	uint32_t ticks = HAL_GetTick();
 8003210:	f001 fe8c 	bl	8004f2c <HAL_GetTick>
 8003214:	0003      	movs	r3, r0
 8003216:	617b      	str	r3, [r7, #20]

	if(ticks - lastTicks > encoder_sample_period){
 8003218:	4b19      	ldr	r3, [pc, #100]	@ (8003280 <doEncoder+0x78>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	1ad2      	subs	r2, r2, r3
 8003220:	23fa      	movs	r3, #250	@ 0xfa
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	429a      	cmp	r2, r3
 8003226:	d927      	bls.n	8003278 <doEncoder+0x70>
		lastTicks = ticks;
 8003228:	4b15      	ldr	r3, [pc, #84]	@ (8003280 <doEncoder+0x78>)
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	601a      	str	r2, [r3, #0]
		uint32_t count = TIM2->CNT;
 800322e:	2380      	movs	r3, #128	@ 0x80
 8003230:	05db      	lsls	r3, r3, #23
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003234:	613b      	str	r3, [r7, #16]
		double tmp = count - lastCount;
 8003236:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <doEncoder+0x7c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	0018      	movs	r0, r3
 8003240:	f7ff fdf8 	bl	8002e34 <__aeabi_ui2d>
 8003244:	0002      	movs	r2, r0
 8003246:	000b      	movs	r3, r1
 8003248:	60ba      	str	r2, [r7, #8]
 800324a:	60fb      	str	r3, [r7, #12]
		lastCount = count;
 800324c:	4b0d      	ldr	r3, [pc, #52]	@ (8003284 <doEncoder+0x7c>)
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	601a      	str	r2, [r3, #0]
		RPM = (tmp / 100)*60; //Tmp 100==1rotation, *
 8003252:	2200      	movs	r2, #0
 8003254:	4b0c      	ldr	r3, [pc, #48]	@ (8003288 <doEncoder+0x80>)
 8003256:	68b8      	ldr	r0, [r7, #8]
 8003258:	68f9      	ldr	r1, [r7, #12]
 800325a:	f7fe fab7 	bl	80017cc <__aeabi_ddiv>
 800325e:	0002      	movs	r2, r0
 8003260:	000b      	movs	r3, r1
 8003262:	0010      	movs	r0, r2
 8003264:	0019      	movs	r1, r3
 8003266:	2200      	movs	r2, #0
 8003268:	4b08      	ldr	r3, [pc, #32]	@ (800328c <doEncoder+0x84>)
 800326a:	f7fe fef3 	bl	8002054 <__aeabi_dmul>
 800326e:	0002      	movs	r2, r0
 8003270:	000b      	movs	r3, r1
 8003272:	4907      	ldr	r1, [pc, #28]	@ (8003290 <doEncoder+0x88>)
 8003274:	600a      	str	r2, [r1, #0]
 8003276:	604b      	str	r3, [r1, #4]
	}
}
 8003278:	46c0      	nop			@ (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b006      	add	sp, #24
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000770 	.word	0x20000770
 8003284:	20000774 	.word	0x20000774
 8003288:	40590000 	.word	0x40590000
 800328c:	404e0000 	.word	0x404e0000
 8003290:	200006f0 	.word	0x200006f0

08003294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003296:	b093      	sub	sp, #76	@ 0x4c
 8003298:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800329a:	f001 fdcb 	bl	8004e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800329e:	f000 fb2f 	bl	8003900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032a2:	f000 fd69 	bl	8003d78 <MX_GPIO_Init>
  MX_DMA_Init();
 80032a6:	f000 fd49 	bl	8003d3c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80032aa:	f000 fd13 	bl	8003cd4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80032ae:	f000 fcc3 	bl	8003c38 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80032b2:	f000 fb83 	bl	80039bc <MX_ADC1_Init>
  MX_TIM2_Init();
 80032b6:	f000 fc0f 	bl	8003ad8 <MX_TIM2_Init>
  MX_TIM16_Init();
 80032ba:	f000 fc69 	bl	8003b90 <MX_TIM16_Init>
  MX_TIM17_Init();
 80032be:	f000 fc91 	bl	8003be4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80032c2:	4bf6      	ldr	r3, [pc, #984]	@ (800369c <main+0x408>)
 80032c4:	0018      	movs	r0, r3
 80032c6:	f004 f999 	bl	80075fc <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start(&htim2);
  //HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
  init_weight(&hx711);
 80032ca:	4bf5      	ldr	r3, [pc, #980]	@ (80036a0 <main+0x40c>)
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7ff ff23 	bl	8003118 <init_weight>

  NextionInit(&nextion, &huart1);
 80032d2:	4af4      	ldr	r2, [pc, #976]	@ (80036a4 <main+0x410>)
 80032d4:	4bf4      	ldr	r3, [pc, #976]	@ (80036a8 <main+0x414>)
 80032d6:	0011      	movs	r1, r2
 80032d8:	0018      	movs	r0, r3
 80032da:	f001 fc05 	bl	8004ae8 <NextionInit>

  NextionAddComp(&nextion, &button1, "b0", 0, 1, buttonCallback, NULL); //ON button
 80032de:	4af3      	ldr	r2, [pc, #972]	@ (80036ac <main+0x418>)
 80032e0:	49f3      	ldr	r1, [pc, #972]	@ (80036b0 <main+0x41c>)
 80032e2:	48f1      	ldr	r0, [pc, #964]	@ (80036a8 <main+0x414>)
 80032e4:	2300      	movs	r3, #0
 80032e6:	9302      	str	r3, [sp, #8]
 80032e8:	4bf2      	ldr	r3, [pc, #968]	@ (80036b4 <main+0x420>)
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	2301      	movs	r3, #1
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2300      	movs	r3, #0
 80032f2:	f001 fbb7 	bl	8004a64 <NextionAddComp>
  NextionAddComp(&nextion, &button2, "b1", 0, 5, ResetVariable, NULL); //Reset button
 80032f6:	4af0      	ldr	r2, [pc, #960]	@ (80036b8 <main+0x424>)
 80032f8:	49f0      	ldr	r1, [pc, #960]	@ (80036bc <main+0x428>)
 80032fa:	48eb      	ldr	r0, [pc, #940]	@ (80036a8 <main+0x414>)
 80032fc:	2300      	movs	r3, #0
 80032fe:	9302      	str	r3, [sp, #8]
 8003300:	4bef      	ldr	r3, [pc, #956]	@ (80036c0 <main+0x42c>)
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	2305      	movs	r3, #5
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2300      	movs	r3, #0
 800330a:	f001 fbab 	bl	8004a64 <NextionAddComp>
  NextionAddComp(&nextion, &currV, "t12", 0, 16, NULL, NULL); //Current variable
 800330e:	4aed      	ldr	r2, [pc, #948]	@ (80036c4 <main+0x430>)
 8003310:	49ed      	ldr	r1, [pc, #948]	@ (80036c8 <main+0x434>)
 8003312:	48e5      	ldr	r0, [pc, #916]	@ (80036a8 <main+0x414>)
 8003314:	2300      	movs	r3, #0
 8003316:	9302      	str	r3, [sp, #8]
 8003318:	2300      	movs	r3, #0
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	2310      	movs	r3, #16
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2300      	movs	r3, #0
 8003322:	f001 fb9f 	bl	8004a64 <NextionAddComp>
  NextionAddComp(&nextion, &tempV, "t10", 0, 14, NULL, NULL); //Temp variable
 8003326:	4ae9      	ldr	r2, [pc, #932]	@ (80036cc <main+0x438>)
 8003328:	49e9      	ldr	r1, [pc, #932]	@ (80036d0 <main+0x43c>)
 800332a:	48df      	ldr	r0, [pc, #892]	@ (80036a8 <main+0x414>)
 800332c:	2300      	movs	r3, #0
 800332e:	9302      	str	r3, [sp, #8]
 8003330:	2300      	movs	r3, #0
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	230e      	movs	r3, #14
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2300      	movs	r3, #0
 800333a:	f001 fb93 	bl	8004a64 <NextionAddComp>
  NextionAddComp(&nextion, &vinV, "t11", 0, 15, NULL, NULL); //Vin variable
 800333e:	4ae5      	ldr	r2, [pc, #916]	@ (80036d4 <main+0x440>)
 8003340:	49e5      	ldr	r1, [pc, #916]	@ (80036d8 <main+0x444>)
 8003342:	48d9      	ldr	r0, [pc, #868]	@ (80036a8 <main+0x414>)
 8003344:	2300      	movs	r3, #0
 8003346:	9302      	str	r3, [sp, #8]
 8003348:	2300      	movs	r3, #0
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	230f      	movs	r3, #15
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	2300      	movs	r3, #0
 8003352:	f001 fb87 	bl	8004a64 <NextionAddComp>
  NextionAddComp(&nextion, &RPMV, "t8", 0, 12, NULL, NULL); //RPM variable
 8003356:	4ae1      	ldr	r2, [pc, #900]	@ (80036dc <main+0x448>)
 8003358:	49e1      	ldr	r1, [pc, #900]	@ (80036e0 <main+0x44c>)
 800335a:	48d3      	ldr	r0, [pc, #844]	@ (80036a8 <main+0x414>)
 800335c:	2300      	movs	r3, #0
 800335e:	9302      	str	r3, [sp, #8]
 8003360:	2300      	movs	r3, #0
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	230c      	movs	r3, #12
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2300      	movs	r3, #0
 800336a:	f001 fb7b 	bl	8004a64 <NextionAddComp>
  NextionAddComp(&nextion, &TorqueV, "t14", 0, 18, NULL, NULL); //Torque variable
 800336e:	4add      	ldr	r2, [pc, #884]	@ (80036e4 <main+0x450>)
 8003370:	49dd      	ldr	r1, [pc, #884]	@ (80036e8 <main+0x454>)
 8003372:	48cd      	ldr	r0, [pc, #820]	@ (80036a8 <main+0x414>)
 8003374:	2300      	movs	r3, #0
 8003376:	9302      	str	r3, [sp, #8]
 8003378:	2300      	movs	r3, #0
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	2312      	movs	r3, #18
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2300      	movs	r3, #0
 8003382:	f001 fb6f 	bl	8004a64 <NextionAddComp>
  NextionAddComp(&nextion, &MaxcurrV, "t13", 0, 17, NULL, NULL); //Max current variable
 8003386:	4ad9      	ldr	r2, [pc, #868]	@ (80036ec <main+0x458>)
 8003388:	49d9      	ldr	r1, [pc, #868]	@ (80036f0 <main+0x45c>)
 800338a:	48c7      	ldr	r0, [pc, #796]	@ (80036a8 <main+0x414>)
 800338c:	2300      	movs	r3, #0
 800338e:	9302      	str	r3, [sp, #8]
 8003390:	2300      	movs	r3, #0
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	2311      	movs	r3, #17
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	2300      	movs	r3, #0
 800339a:	f001 fb63 	bl	8004a64 <NextionAddComp>
  NextionAddComp(&nextion, &MaxRPMV, "t9", 0, 13, NULL, NULL); //Max RPM variable
 800339e:	4ad5      	ldr	r2, [pc, #852]	@ (80036f4 <main+0x460>)
 80033a0:	49d5      	ldr	r1, [pc, #852]	@ (80036f8 <main+0x464>)
 80033a2:	48c1      	ldr	r0, [pc, #772]	@ (80036a8 <main+0x414>)
 80033a4:	2300      	movs	r3, #0
 80033a6:	9302      	str	r3, [sp, #8]
 80033a8:	2300      	movs	r3, #0
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	230d      	movs	r3, #13
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2300      	movs	r3, #0
 80033b2:	f001 fb57 	bl	8004a64 <NextionAddComp>
  NextionAddComp(&nextion, &MaxTorqueV, "t15", 0, 19, NULL, NULL); //Max torque variable
 80033b6:	4ad1      	ldr	r2, [pc, #836]	@ (80036fc <main+0x468>)
 80033b8:	49d1      	ldr	r1, [pc, #836]	@ (8003700 <main+0x46c>)
 80033ba:	48bb      	ldr	r0, [pc, #748]	@ (80036a8 <main+0x414>)
 80033bc:	2300      	movs	r3, #0
 80033be:	9302      	str	r3, [sp, #8]
 80033c0:	2300      	movs	r3, #0
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	2313      	movs	r3, #19
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	2300      	movs	r3, #0
 80033ca:	f001 fb4b 	bl	8004a64 <NextionAddComp>

  HAL_ADC_Start_DMA(&hadc1, value, 3); // start adc in DMA mode
 80033ce:	49cd      	ldr	r1, [pc, #820]	@ (8003704 <main+0x470>)
 80033d0:	4bcd      	ldr	r3, [pc, #820]	@ (8003708 <main+0x474>)
 80033d2:	2203      	movs	r2, #3
 80033d4:	0018      	movs	r0, r3
 80033d6:	f002 f8a3 	bl	8005520 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim16); //start nextion update timer
 80033da:	4bcc      	ldr	r3, [pc, #816]	@ (800370c <main+0x478>)
 80033dc:	0018      	movs	r0, r3
 80033de:	f004 f8c1 	bl	8007564 <HAL_TIM_Base_Start>
  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80033e2:	4bca      	ldr	r3, [pc, #808]	@ (800370c <main+0x478>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033e8:	2316      	movs	r3, #22
 80033ea:	2410      	movs	r4, #16
 80033ec:	191b      	adds	r3, r3, r4
 80033ee:	19db      	adds	r3, r3, r7
 80033f0:	801a      	strh	r2, [r3, #0]

  HAL_TIM_Base_Start(&htim17); //start uart update timer
 80033f2:	4bc7      	ldr	r3, [pc, #796]	@ (8003710 <main+0x47c>)
 80033f4:	0018      	movs	r0, r3
 80033f6:	f004 f8b5 	bl	8007564 <HAL_TIM_Base_Start>
  timer1_val = __HAL_TIM_GET_COUNTER(&htim17);
 80033fa:	4bc5      	ldr	r3, [pc, #788]	@ (8003710 <main+0x47c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003400:	2314      	movs	r3, #20
 8003402:	191b      	adds	r3, r3, r4
 8003404:	19db      	adds	r3, r3, r7
 8003406:	801a      	strh	r2, [r3, #0]
  {
	//HAL_ADC_Start_DMA(&hadc1, value, 3);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 doEncoder(&htim2);
 8003408:	4ba4      	ldr	r3, [pc, #656]	@ (800369c <main+0x408>)
 800340a:	0018      	movs	r0, r3
 800340c:	f7ff fefc 	bl	8003208 <doEncoder>

	  float weight = measure_weight(hx711);
 8003410:	4ba3      	ldr	r3, [pc, #652]	@ (80036a0 <main+0x40c>)
 8003412:	466a      	mov	r2, sp
 8003414:	0011      	movs	r1, r2
 8003416:	001a      	movs	r2, r3
 8003418:	3210      	adds	r2, #16
 800341a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800341c:	c131      	stmia	r1!, {r0, r4, r5}
 800341e:	ca11      	ldmia	r2!, {r0, r4}
 8003420:	c111      	stmia	r1!, {r0, r4}
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f7ff fec7 	bl	80031bc <measure_weight>
 800342e:	1c03      	adds	r3, r0, #0
 8003430:	623b      	str	r3, [r7, #32]
	  Torque = weight/1000 * ArmLength;
 8003432:	49b8      	ldr	r1, [pc, #736]	@ (8003714 <main+0x480>)
 8003434:	6a38      	ldr	r0, [r7, #32]
 8003436:	f7fd f95b 	bl	80006f0 <__aeabi_fdiv>
 800343a:	1c03      	adds	r3, r0, #0
 800343c:	1c18      	adds	r0, r3, #0
 800343e:	f7ff fd1d 	bl	8002e7c <__aeabi_f2d>
 8003442:	4ab5      	ldr	r2, [pc, #724]	@ (8003718 <main+0x484>)
 8003444:	4bb5      	ldr	r3, [pc, #724]	@ (800371c <main+0x488>)
 8003446:	f7fe fe05 	bl	8002054 <__aeabi_dmul>
 800344a:	0002      	movs	r2, r0
 800344c:	000b      	movs	r3, r1
 800344e:	0010      	movs	r0, r2
 8003450:	0019      	movs	r1, r3
 8003452:	f7ff fd5b 	bl	8002f0c <__aeabi_d2f>
 8003456:	1c02      	adds	r2, r0, #0
 8003458:	4bb1      	ldr	r3, [pc, #708]	@ (8003720 <main+0x48c>)
 800345a:	601a      	str	r2, [r3, #0]

	  HAL_ADC_Start_DMA(&hadc1, value, 3); // start adc in DMA mode
 800345c:	49a9      	ldr	r1, [pc, #676]	@ (8003704 <main+0x470>)
 800345e:	4baa      	ldr	r3, [pc, #680]	@ (8003708 <main+0x474>)
 8003460:	2203      	movs	r2, #3
 8003462:	0018      	movs	r0, r3
 8003464:	f002 f85c 	bl	8005520 <HAL_ADC_Start_DMA>
	  logR2 = log(R2);
	  T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
	  T = T - 273.15;
	  T = ((T * 9.0)/ 5.0 + 32.0) *-1;
	  */
	  float voltage = ((float)value[1]/4096.0)*V_0;
 8003468:	4ba6      	ldr	r3, [pc, #664]	@ (8003704 <main+0x470>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	0018      	movs	r0, r3
 800346e:	f7fd fe07 	bl	8001080 <__aeabi_ui2f>
 8003472:	1c03      	adds	r3, r0, #0
 8003474:	1c18      	adds	r0, r3, #0
 8003476:	f7ff fd01 	bl	8002e7c <__aeabi_f2d>
 800347a:	2200      	movs	r2, #0
 800347c:	4ba9      	ldr	r3, [pc, #676]	@ (8003724 <main+0x490>)
 800347e:	f7fe f9a5 	bl	80017cc <__aeabi_ddiv>
 8003482:	0002      	movs	r2, r0
 8003484:	000b      	movs	r3, r1
 8003486:	0014      	movs	r4, r2
 8003488:	001d      	movs	r5, r3
 800348a:	4ba7      	ldr	r3, [pc, #668]	@ (8003728 <main+0x494>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	1c18      	adds	r0, r3, #0
 8003490:	f7ff fcf4 	bl	8002e7c <__aeabi_f2d>
 8003494:	0002      	movs	r2, r0
 8003496:	000b      	movs	r3, r1
 8003498:	0020      	movs	r0, r4
 800349a:	0029      	movs	r1, r5
 800349c:	f7fe fdda 	bl	8002054 <__aeabi_dmul>
 80034a0:	0002      	movs	r2, r0
 80034a2:	000b      	movs	r3, r1
 80034a4:	0010      	movs	r0, r2
 80034a6:	0019      	movs	r1, r3
 80034a8:	f7ff fd30 	bl	8002f0c <__aeabi_d2f>
 80034ac:	1c03      	adds	r3, r0, #0
 80034ae:	61fb      	str	r3, [r7, #28]
	  T=(-1.0/b)*(log(((R_1*voltage)/(a*(V_0-voltage)))-(c/a)));
 80034b0:	4b9e      	ldr	r3, [pc, #632]	@ (800372c <main+0x498>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	1c18      	adds	r0, r3, #0
 80034b6:	f7ff fce1 	bl	8002e7c <__aeabi_f2d>
 80034ba:	0002      	movs	r2, r0
 80034bc:	000b      	movs	r3, r1
 80034be:	2000      	movs	r0, #0
 80034c0:	499b      	ldr	r1, [pc, #620]	@ (8003730 <main+0x49c>)
 80034c2:	f7fe f983 	bl	80017cc <__aeabi_ddiv>
 80034c6:	0002      	movs	r2, r0
 80034c8:	000b      	movs	r3, r1
 80034ca:	0014      	movs	r4, r2
 80034cc:	001d      	movs	r5, r3
 80034ce:	4b99      	ldr	r3, [pc, #612]	@ (8003734 <main+0x4a0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69f9      	ldr	r1, [r7, #28]
 80034d4:	1c18      	adds	r0, r3, #0
 80034d6:	f7fd faf1 	bl	8000abc <__aeabi_fmul>
 80034da:	1c03      	adds	r3, r0, #0
 80034dc:	1c1e      	adds	r6, r3, #0
 80034de:	4b92      	ldr	r3, [pc, #584]	@ (8003728 <main+0x494>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69f9      	ldr	r1, [r7, #28]
 80034e4:	1c18      	adds	r0, r3, #0
 80034e6:	f7fd fc27 	bl	8000d38 <__aeabi_fsub>
 80034ea:	1c03      	adds	r3, r0, #0
 80034ec:	1c1a      	adds	r2, r3, #0
 80034ee:	4b92      	ldr	r3, [pc, #584]	@ (8003738 <main+0x4a4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1c19      	adds	r1, r3, #0
 80034f4:	1c10      	adds	r0, r2, #0
 80034f6:	f7fd fae1 	bl	8000abc <__aeabi_fmul>
 80034fa:	1c03      	adds	r3, r0, #0
 80034fc:	1c19      	adds	r1, r3, #0
 80034fe:	1c30      	adds	r0, r6, #0
 8003500:	f7fd f8f6 	bl	80006f0 <__aeabi_fdiv>
 8003504:	1c03      	adds	r3, r0, #0
 8003506:	1c1e      	adds	r6, r3, #0
 8003508:	4b8c      	ldr	r3, [pc, #560]	@ (800373c <main+0x4a8>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b8a      	ldr	r3, [pc, #552]	@ (8003738 <main+0x4a4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	1c19      	adds	r1, r3, #0
 8003512:	1c10      	adds	r0, r2, #0
 8003514:	f7fd f8ec 	bl	80006f0 <__aeabi_fdiv>
 8003518:	1c03      	adds	r3, r0, #0
 800351a:	1c19      	adds	r1, r3, #0
 800351c:	1c30      	adds	r0, r6, #0
 800351e:	f7fd fc0b 	bl	8000d38 <__aeabi_fsub>
 8003522:	1c03      	adds	r3, r0, #0
 8003524:	1c18      	adds	r0, r3, #0
 8003526:	f7ff fca9 	bl	8002e7c <__aeabi_f2d>
 800352a:	0002      	movs	r2, r0
 800352c:	000b      	movs	r3, r1
 800352e:	0010      	movs	r0, r2
 8003530:	0019      	movs	r1, r3
 8003532:	f006 ff95 	bl	800a460 <log>
 8003536:	0002      	movs	r2, r0
 8003538:	000b      	movs	r3, r1
 800353a:	0020      	movs	r0, r4
 800353c:	0029      	movs	r1, r5
 800353e:	f7fe fd89 	bl	8002054 <__aeabi_dmul>
 8003542:	0002      	movs	r2, r0
 8003544:	000b      	movs	r3, r1
 8003546:	0010      	movs	r0, r2
 8003548:	0019      	movs	r1, r3
 800354a:	f7ff fcdf 	bl	8002f0c <__aeabi_d2f>
 800354e:	1c02      	adds	r2, r0, #0
 8003550:	4b7b      	ldr	r3, [pc, #492]	@ (8003740 <main+0x4ac>)
 8003552:	601a      	str	r2, [r3, #0]

	  float Vin = value[0] * VIN_Step; //convert ADC to voltage
 8003554:	4b6b      	ldr	r3, [pc, #428]	@ (8003704 <main+0x470>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	0018      	movs	r0, r3
 800355a:	f7ff fc6b 	bl	8002e34 <__aeabi_ui2d>
 800355e:	2200      	movs	r2, #0
 8003560:	4b78      	ldr	r3, [pc, #480]	@ (8003744 <main+0x4b0>)
 8003562:	f7fe fd77 	bl	8002054 <__aeabi_dmul>
 8003566:	0002      	movs	r2, r0
 8003568:	000b      	movs	r3, r1
 800356a:	0010      	movs	r0, r2
 800356c:	0019      	movs	r1, r3
 800356e:	f7ff fccd 	bl	8002f0c <__aeabi_d2f>
 8003572:	1c03      	adds	r3, r0, #0
 8003574:	61bb      	str	r3, [r7, #24]
	  float Curr = ((Curr_Ref*Vref_Step) - (value[2]*Vref_Step))/CurrDiv;
 8003576:	4b63      	ldr	r3, [pc, #396]	@ (8003704 <main+0x470>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff fc5a 	bl	8002e34 <__aeabi_ui2d>
 8003580:	4a71      	ldr	r2, [pc, #452]	@ (8003748 <main+0x4b4>)
 8003582:	4b72      	ldr	r3, [pc, #456]	@ (800374c <main+0x4b8>)
 8003584:	f7fe fd66 	bl	8002054 <__aeabi_dmul>
 8003588:	0002      	movs	r2, r0
 800358a:	000b      	movs	r3, r1
 800358c:	4870      	ldr	r0, [pc, #448]	@ (8003750 <main+0x4bc>)
 800358e:	4971      	ldr	r1, [pc, #452]	@ (8003754 <main+0x4c0>)
 8003590:	f7ff f828 	bl	80025e4 <__aeabi_dsub>
 8003594:	0002      	movs	r2, r0
 8003596:	000b      	movs	r3, r1
 8003598:	0010      	movs	r0, r2
 800359a:	0019      	movs	r1, r3
 800359c:	4a6e      	ldr	r2, [pc, #440]	@ (8003758 <main+0x4c4>)
 800359e:	4b6f      	ldr	r3, [pc, #444]	@ (800375c <main+0x4c8>)
 80035a0:	f7fe f914 	bl	80017cc <__aeabi_ddiv>
 80035a4:	0002      	movs	r2, r0
 80035a6:	000b      	movs	r3, r1
 80035a8:	0010      	movs	r0, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	f7ff fcae 	bl	8002f0c <__aeabi_d2f>
 80035b0:	1c03      	adds	r3, r0, #0
 80035b2:	617b      	str	r3, [r7, #20]

	  if(Curr > MaxCurr)
 80035b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003760 <main+0x4cc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	1c19      	adds	r1, r3, #0
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f7fc ff98 	bl	80004f0 <__aeabi_fcmpgt>
 80035c0:	1e03      	subs	r3, r0, #0
 80035c2:	d002      	beq.n	80035ca <main+0x336>
	  	MaxCurr = Curr;
 80035c4:	4b66      	ldr	r3, [pc, #408]	@ (8003760 <main+0x4cc>)
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	601a      	str	r2, [r3, #0]
	  if(RPM > MaxRPM)
 80035ca:	4b66      	ldr	r3, [pc, #408]	@ (8003764 <main+0x4d0>)
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	4b65      	ldr	r3, [pc, #404]	@ (8003768 <main+0x4d4>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f7fc ff51 	bl	800047c <__aeabi_dcmpgt>
 80035da:	1e03      	subs	r3, r0, #0
 80035dc:	d005      	beq.n	80035ea <main+0x356>
	  	MaxRPM = RPM;
 80035de:	4b61      	ldr	r3, [pc, #388]	@ (8003764 <main+0x4d0>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4960      	ldr	r1, [pc, #384]	@ (8003768 <main+0x4d4>)
 80035e6:	600a      	str	r2, [r1, #0]
 80035e8:	604b      	str	r3, [r1, #4]
	  if(Torque > MaxTorque)
 80035ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003720 <main+0x48c>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b5f      	ldr	r3, [pc, #380]	@ (800376c <main+0x4d8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	1c19      	adds	r1, r3, #0
 80035f4:	1c10      	adds	r0, r2, #0
 80035f6:	f7fc ff7b 	bl	80004f0 <__aeabi_fcmpgt>
 80035fa:	1e03      	subs	r3, r0, #0
 80035fc:	d003      	beq.n	8003606 <main+0x372>
	  	MaxTorque = Torque;
 80035fe:	4b48      	ldr	r3, [pc, #288]	@ (8003720 <main+0x48c>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	4b5a      	ldr	r3, [pc, #360]	@ (800376c <main+0x4d8>)
 8003604:	601a      	str	r2, [r3, #0]

	  if (__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 5000){ //64kHz/6400-1 =10kHz, update screen every x ms*10, so 500ms=5000
 8003606:	4b41      	ldr	r3, [pc, #260]	@ (800370c <main+0x478>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800360c:	2416      	movs	r4, #22
 800360e:	2510      	movs	r5, #16
 8003610:	1963      	adds	r3, r4, r5
 8003612:	19db      	adds	r3, r3, r7
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	4a55      	ldr	r2, [pc, #340]	@ (8003770 <main+0x4dc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d800      	bhi.n	8003620 <main+0x38c>
 800361e:	e0ff      	b.n	8003820 <main+0x58c>
		  if(adc_conv_complete_flag == 1){
 8003620:	4b54      	ldr	r3, [pc, #336]	@ (8003774 <main+0x4e0>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d000      	beq.n	800362a <main+0x396>
 8003628:	e0fa      	b.n	8003820 <main+0x58c>
			  sprintf(myChar, "%0.2f", Torque);
 800362a:	4b3d      	ldr	r3, [pc, #244]	@ (8003720 <main+0x48c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	1c18      	adds	r0, r3, #0
 8003630:	f7ff fc24 	bl	8002e7c <__aeabi_f2d>
 8003634:	0002      	movs	r2, r0
 8003636:	000b      	movs	r3, r1
 8003638:	494f      	ldr	r1, [pc, #316]	@ (8003778 <main+0x4e4>)
 800363a:	4850      	ldr	r0, [pc, #320]	@ (800377c <main+0x4e8>)
 800363c:	f007 ff14 	bl	800b468 <siprintf>
			  NextionSetText(&nextion, &TorqueV, myChar);
 8003640:	4a4e      	ldr	r2, [pc, #312]	@ (800377c <main+0x4e8>)
 8003642:	4929      	ldr	r1, [pc, #164]	@ (80036e8 <main+0x454>)
 8003644:	4b18      	ldr	r3, [pc, #96]	@ (80036a8 <main+0x414>)
 8003646:	0018      	movs	r0, r3
 8003648:	f001 fb84 	bl	8004d54 <NextionSetText>

			  sprintf(myChar, "%0.2f", Vin);
 800364c:	69b8      	ldr	r0, [r7, #24]
 800364e:	f7ff fc15 	bl	8002e7c <__aeabi_f2d>
 8003652:	0002      	movs	r2, r0
 8003654:	000b      	movs	r3, r1
 8003656:	4948      	ldr	r1, [pc, #288]	@ (8003778 <main+0x4e4>)
 8003658:	4848      	ldr	r0, [pc, #288]	@ (800377c <main+0x4e8>)
 800365a:	f007 ff05 	bl	800b468 <siprintf>
			  NextionSetText(&nextion, &vinV, myChar);
 800365e:	4a47      	ldr	r2, [pc, #284]	@ (800377c <main+0x4e8>)
 8003660:	491d      	ldr	r1, [pc, #116]	@ (80036d8 <main+0x444>)
 8003662:	4b11      	ldr	r3, [pc, #68]	@ (80036a8 <main+0x414>)
 8003664:	0018      	movs	r0, r3
 8003666:	f001 fb75 	bl	8004d54 <NextionSetText>
			  sprintf(myChar, "%0.2f", Curr);
 800366a:	6978      	ldr	r0, [r7, #20]
 800366c:	f7ff fc06 	bl	8002e7c <__aeabi_f2d>
 8003670:	0002      	movs	r2, r0
 8003672:	000b      	movs	r3, r1
 8003674:	4940      	ldr	r1, [pc, #256]	@ (8003778 <main+0x4e4>)
 8003676:	4841      	ldr	r0, [pc, #260]	@ (800377c <main+0x4e8>)
 8003678:	f007 fef6 	bl	800b468 <siprintf>
			  NextionSetText(&nextion, &currV, myChar);
 800367c:	4a3f      	ldr	r2, [pc, #252]	@ (800377c <main+0x4e8>)
 800367e:	4912      	ldr	r1, [pc, #72]	@ (80036c8 <main+0x434>)
 8003680:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <main+0x414>)
 8003682:	0018      	movs	r0, r3
 8003684:	f001 fb66 	bl	8004d54 <NextionSetText>
			  sprintf(myChar, "%0.1f", T);
 8003688:	4b2d      	ldr	r3, [pc, #180]	@ (8003740 <main+0x4ac>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	1c18      	adds	r0, r3, #0
 800368e:	f7ff fbf5 	bl	8002e7c <__aeabi_f2d>
 8003692:	0002      	movs	r2, r0
 8003694:	000b      	movs	r3, r1
 8003696:	493a      	ldr	r1, [pc, #232]	@ (8003780 <main+0x4ec>)
 8003698:	e074      	b.n	8003784 <main+0x4f0>
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	200002c4 	.word	0x200002c4
 80036a0:	200006a0 	.word	0x200006a0
 80036a4:	200003a8 	.word	0x200003a8
 80036a8:	200004d0 	.word	0x200004d0
 80036ac:	0800d714 	.word	0x0800d714
 80036b0:	20000600 	.word	0x20000600
 80036b4:	080030d1 	.word	0x080030d1
 80036b8:	0800d718 	.word	0x0800d718
 80036bc:	20000610 	.word	0x20000610
 80036c0:	080030ed 	.word	0x080030ed
 80036c4:	0800d71c 	.word	0x0800d71c
 80036c8:	20000620 	.word	0x20000620
 80036cc:	0800d720 	.word	0x0800d720
 80036d0:	20000630 	.word	0x20000630
 80036d4:	0800d724 	.word	0x0800d724
 80036d8:	20000640 	.word	0x20000640
 80036dc:	0800d728 	.word	0x0800d728
 80036e0:	20000650 	.word	0x20000650
 80036e4:	0800d72c 	.word	0x0800d72c
 80036e8:	20000660 	.word	0x20000660
 80036ec:	0800d730 	.word	0x0800d730
 80036f0:	20000670 	.word	0x20000670
 80036f4:	0800d734 	.word	0x0800d734
 80036f8:	20000680 	.word	0x20000680
 80036fc:	0800d738 	.word	0x0800d738
 8003700:	20000690 	.word	0x20000690
 8003704:	200006d8 	.word	0x200006d8
 8003708:	20000204 	.word	0x20000204
 800370c:	20000310 	.word	0x20000310
 8003710:	2000035c 	.word	0x2000035c
 8003714:	447a0000 	.word	0x447a0000
 8003718:	33333333 	.word	0x33333333
 800371c:	40153333 	.word	0x40153333
 8003720:	200006f8 	.word	0x200006f8
 8003724:	40b00000 	.word	0x40b00000
 8003728:	20000000 	.word	0x20000000
 800372c:	2000000c 	.word	0x2000000c
 8003730:	bff00000 	.word	0xbff00000
 8003734:	20000004 	.word	0x20000004
 8003738:	20000008 	.word	0x20000008
 800373c:	20000010 	.word	0x20000010
 8003740:	20000704 	.word	0x20000704
 8003744:	3f700000 	.word	0x3f700000
 8003748:	b4395810 	.word	0xb4395810
 800374c:	3f4a76c8 	.word	0x3f4a76c8
 8003750:	1eb851eb 	.word	0x1eb851eb
 8003754:	40036a45 	.word	0x40036a45
 8003758:	b020c49c 	.word	0xb020c49c
 800375c:	3fb16872 	.word	0x3fb16872
 8003760:	200006fc 	.word	0x200006fc
 8003764:	200006f0 	.word	0x200006f0
 8003768:	200006e8 	.word	0x200006e8
 800376c:	20000700 	.word	0x20000700
 8003770:	00001387 	.word	0x00001387
 8003774:	200006e4 	.word	0x200006e4
 8003778:	0800d73c 	.word	0x0800d73c
 800377c:	200006c4 	.word	0x200006c4
 8003780:	0800d744 	.word	0x0800d744
 8003784:	484a      	ldr	r0, [pc, #296]	@ (80038b0 <main+0x61c>)
 8003786:	f007 fe6f 	bl	800b468 <siprintf>
			  NextionSetText(&nextion, &tempV, myChar);
 800378a:	4a49      	ldr	r2, [pc, #292]	@ (80038b0 <main+0x61c>)
 800378c:	4949      	ldr	r1, [pc, #292]	@ (80038b4 <main+0x620>)
 800378e:	4b4a      	ldr	r3, [pc, #296]	@ (80038b8 <main+0x624>)
 8003790:	0018      	movs	r0, r3
 8003792:	f001 fadf 	bl	8004d54 <NextionSetText>
			  sprintf(myChar, "%0.1f", RPM);
 8003796:	4b49      	ldr	r3, [pc, #292]	@ (80038bc <main+0x628>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4948      	ldr	r1, [pc, #288]	@ (80038c0 <main+0x62c>)
 800379e:	4844      	ldr	r0, [pc, #272]	@ (80038b0 <main+0x61c>)
 80037a0:	f007 fe62 	bl	800b468 <siprintf>
		  	  NextionSetText(&nextion, &RPMV, myChar);
 80037a4:	4a42      	ldr	r2, [pc, #264]	@ (80038b0 <main+0x61c>)
 80037a6:	4947      	ldr	r1, [pc, #284]	@ (80038c4 <main+0x630>)
 80037a8:	4b43      	ldr	r3, [pc, #268]	@ (80038b8 <main+0x624>)
 80037aa:	0018      	movs	r0, r3
 80037ac:	f001 fad2 	bl	8004d54 <NextionSetText>

		  	  sprintf(myChar, "%0.1f", MaxRPM);
 80037b0:	4b45      	ldr	r3, [pc, #276]	@ (80038c8 <main+0x634>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4942      	ldr	r1, [pc, #264]	@ (80038c0 <main+0x62c>)
 80037b8:	483d      	ldr	r0, [pc, #244]	@ (80038b0 <main+0x61c>)
 80037ba:	f007 fe55 	bl	800b468 <siprintf>
		  	  NextionSetText(&nextion, &MaxRPMV, myChar);
 80037be:	4a3c      	ldr	r2, [pc, #240]	@ (80038b0 <main+0x61c>)
 80037c0:	4942      	ldr	r1, [pc, #264]	@ (80038cc <main+0x638>)
 80037c2:	4b3d      	ldr	r3, [pc, #244]	@ (80038b8 <main+0x624>)
 80037c4:	0018      	movs	r0, r3
 80037c6:	f001 fac5 	bl	8004d54 <NextionSetText>
		  	  sprintf(myChar, "%0.2f", MaxCurr);
 80037ca:	4b41      	ldr	r3, [pc, #260]	@ (80038d0 <main+0x63c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1c18      	adds	r0, r3, #0
 80037d0:	f7ff fb54 	bl	8002e7c <__aeabi_f2d>
 80037d4:	0002      	movs	r2, r0
 80037d6:	000b      	movs	r3, r1
 80037d8:	493e      	ldr	r1, [pc, #248]	@ (80038d4 <main+0x640>)
 80037da:	4835      	ldr	r0, [pc, #212]	@ (80038b0 <main+0x61c>)
 80037dc:	f007 fe44 	bl	800b468 <siprintf>
		  	  NextionSetText(&nextion, &MaxcurrV, myChar);
 80037e0:	4a33      	ldr	r2, [pc, #204]	@ (80038b0 <main+0x61c>)
 80037e2:	493d      	ldr	r1, [pc, #244]	@ (80038d8 <main+0x644>)
 80037e4:	4b34      	ldr	r3, [pc, #208]	@ (80038b8 <main+0x624>)
 80037e6:	0018      	movs	r0, r3
 80037e8:	f001 fab4 	bl	8004d54 <NextionSetText>
		  	  sprintf(myChar, "%0.2f", MaxTorque);
 80037ec:	4b3b      	ldr	r3, [pc, #236]	@ (80038dc <main+0x648>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	1c18      	adds	r0, r3, #0
 80037f2:	f7ff fb43 	bl	8002e7c <__aeabi_f2d>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	4936      	ldr	r1, [pc, #216]	@ (80038d4 <main+0x640>)
 80037fc:	482c      	ldr	r0, [pc, #176]	@ (80038b0 <main+0x61c>)
 80037fe:	f007 fe33 	bl	800b468 <siprintf>
		  	  NextionSetText(&nextion, &MaxTorqueV, myChar);
 8003802:	4a2b      	ldr	r2, [pc, #172]	@ (80038b0 <main+0x61c>)
 8003804:	4936      	ldr	r1, [pc, #216]	@ (80038e0 <main+0x64c>)
 8003806:	4b2c      	ldr	r3, [pc, #176]	@ (80038b8 <main+0x624>)
 8003808:	0018      	movs	r0, r3
 800380a:	f001 faa3 	bl	8004d54 <NextionSetText>

		  	  adc_conv_complete_flag = 0;
 800380e:	4b35      	ldr	r3, [pc, #212]	@ (80038e4 <main+0x650>)
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
		  	  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 8003814:	4b34      	ldr	r3, [pc, #208]	@ (80038e8 <main+0x654>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800381a:	1963      	adds	r3, r4, r5
 800381c:	19db      	adds	r3, r3, r7
 800381e:	801a      	strh	r2, [r3, #0]
		  }
	  }

	  if (__HAL_TIM_GET_COUNTER(&htim17) - timer1_val >= 1000){ //64kHz/6400-1 =10kHz, update screen every x ms*10, so 100ms=1000
 8003820:	4b32      	ldr	r3, [pc, #200]	@ (80038ec <main+0x658>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003826:	2614      	movs	r6, #20
 8003828:	2310      	movs	r3, #16
 800382a:	18f1      	adds	r1, r6, r3
 800382c:	19cb      	adds	r3, r1, r7
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	1ad2      	subs	r2, r2, r3
 8003832:	23fa      	movs	r3, #250	@ 0xfa
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	429a      	cmp	r2, r3
 8003838:	d200      	bcs.n	800383c <main+0x5a8>
 800383a:	e5e5      	b.n	8003408 <main+0x174>
		  snprintf(data, sizeof(data), "RPM: %.2f  Vin: %.2f Curr: %.2f Temp: %.2f\r\n", RPM, Vin, Curr, T);
 800383c:	4b1f      	ldr	r3, [pc, #124]	@ (80038bc <main+0x628>)
 800383e:	681c      	ldr	r4, [r3, #0]
 8003840:	685d      	ldr	r5, [r3, #4]
 8003842:	69b8      	ldr	r0, [r7, #24]
 8003844:	f7ff fb1a 	bl	8002e7c <__aeabi_f2d>
 8003848:	60b8      	str	r0, [r7, #8]
 800384a:	60f9      	str	r1, [r7, #12]
 800384c:	6978      	ldr	r0, [r7, #20]
 800384e:	f7ff fb15 	bl	8002e7c <__aeabi_f2d>
 8003852:	6038      	str	r0, [r7, #0]
 8003854:	6079      	str	r1, [r7, #4]
 8003856:	4b26      	ldr	r3, [pc, #152]	@ (80038f0 <main+0x65c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	1c18      	adds	r0, r3, #0
 800385c:	f7ff fb0e 	bl	8002e7c <__aeabi_f2d>
 8003860:	0002      	movs	r2, r0
 8003862:	000b      	movs	r3, r1
 8003864:	4923      	ldr	r1, [pc, #140]	@ (80038f4 <main+0x660>)
 8003866:	4824      	ldr	r0, [pc, #144]	@ (80038f8 <main+0x664>)
 8003868:	9206      	str	r2, [sp, #24]
 800386a:	9307      	str	r3, [sp, #28]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	9204      	str	r2, [sp, #16]
 8003872:	9305      	str	r3, [sp, #20]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	9202      	str	r2, [sp, #8]
 800387a:	9303      	str	r3, [sp, #12]
 800387c:	9400      	str	r4, [sp, #0]
 800387e:	9501      	str	r5, [sp, #4]
 8003880:	000a      	movs	r2, r1
 8003882:	2164      	movs	r1, #100	@ 0x64
 8003884:	f007 fdbc 	bl	800b400 <sniprintf>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)data, strlen(data));
 8003888:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <main+0x664>)
 800388a:	0018      	movs	r0, r3
 800388c:	f7fc fc3a 	bl	8000104 <strlen>
 8003890:	0003      	movs	r3, r0
 8003892:	b29a      	uxth	r2, r3
 8003894:	4918      	ldr	r1, [pc, #96]	@ (80038f8 <main+0x664>)
 8003896:	4b19      	ldr	r3, [pc, #100]	@ (80038fc <main+0x668>)
 8003898:	0018      	movs	r0, r3
 800389a:	f004 fba3 	bl	8007fe4 <HAL_UART_Transmit_IT>
		  timer1_val = __HAL_TIM_GET_COUNTER(&htim17);
 800389e:	4b13      	ldr	r3, [pc, #76]	@ (80038ec <main+0x658>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038a4:	2310      	movs	r3, #16
 80038a6:	18f3      	adds	r3, r6, r3
 80038a8:	19db      	adds	r3, r3, r7
 80038aa:	801a      	strh	r2, [r3, #0]
  {
 80038ac:	e5ac      	b.n	8003408 <main+0x174>
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	200006c4 	.word	0x200006c4
 80038b4:	20000630 	.word	0x20000630
 80038b8:	200004d0 	.word	0x200004d0
 80038bc:	200006f0 	.word	0x200006f0
 80038c0:	0800d744 	.word	0x0800d744
 80038c4:	20000650 	.word	0x20000650
 80038c8:	200006e8 	.word	0x200006e8
 80038cc:	20000680 	.word	0x20000680
 80038d0:	200006fc 	.word	0x200006fc
 80038d4:	0800d73c 	.word	0x0800d73c
 80038d8:	20000670 	.word	0x20000670
 80038dc:	20000700 	.word	0x20000700
 80038e0:	20000690 	.word	0x20000690
 80038e4:	200006e4 	.word	0x200006e4
 80038e8:	20000310 	.word	0x20000310
 80038ec:	2000035c 	.word	0x2000035c
 80038f0:	20000704 	.word	0x20000704
 80038f4:	0800d74c 	.word	0x0800d74c
 80038f8:	20000708 	.word	0x20000708
 80038fc:	2000043c 	.word	0x2000043c

08003900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b093      	sub	sp, #76	@ 0x4c
 8003904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003906:	2410      	movs	r4, #16
 8003908:	193b      	adds	r3, r7, r4
 800390a:	0018      	movs	r0, r3
 800390c:	2338      	movs	r3, #56	@ 0x38
 800390e:	001a      	movs	r2, r3
 8003910:	2100      	movs	r1, #0
 8003912:	f007 fe15 	bl	800b540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003916:	003b      	movs	r3, r7
 8003918:	0018      	movs	r0, r3
 800391a:	2310      	movs	r3, #16
 800391c:	001a      	movs	r2, r3
 800391e:	2100      	movs	r1, #0
 8003920:	f007 fe0e 	bl	800b540 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	0018      	movs	r0, r3
 800392a:	f002 ff39 	bl	80067a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800392e:	193b      	adds	r3, r7, r4
 8003930:	2202      	movs	r2, #2
 8003932:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003934:	193b      	adds	r3, r7, r4
 8003936:	2280      	movs	r2, #128	@ 0x80
 8003938:	0052      	lsls	r2, r2, #1
 800393a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800393c:	0021      	movs	r1, r4
 800393e:	187b      	adds	r3, r7, r1
 8003940:	2200      	movs	r2, #0
 8003942:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003944:	187b      	adds	r3, r7, r1
 8003946:	2240      	movs	r2, #64	@ 0x40
 8003948:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800394a:	187b      	adds	r3, r7, r1
 800394c:	2202      	movs	r2, #2
 800394e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003950:	187b      	adds	r3, r7, r1
 8003952:	2202      	movs	r2, #2
 8003954:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003956:	187b      	adds	r3, r7, r1
 8003958:	2200      	movs	r2, #0
 800395a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800395c:	187b      	adds	r3, r7, r1
 800395e:	2208      	movs	r2, #8
 8003960:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003962:	187b      	adds	r3, r7, r1
 8003964:	2280      	movs	r2, #128	@ 0x80
 8003966:	0292      	lsls	r2, r2, #10
 8003968:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800396a:	187b      	adds	r3, r7, r1
 800396c:	2280      	movs	r2, #128	@ 0x80
 800396e:	0492      	lsls	r2, r2, #18
 8003970:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003972:	187b      	adds	r3, r7, r1
 8003974:	2280      	movs	r2, #128	@ 0x80
 8003976:	0592      	lsls	r2, r2, #22
 8003978:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800397a:	187b      	adds	r3, r7, r1
 800397c:	0018      	movs	r0, r3
 800397e:	f002 ff5b 	bl	8006838 <HAL_RCC_OscConfig>
 8003982:	1e03      	subs	r3, r0, #0
 8003984:	d001      	beq.n	800398a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003986:	f000 fabf 	bl	8003f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800398a:	003b      	movs	r3, r7
 800398c:	2207      	movs	r2, #7
 800398e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003990:	003b      	movs	r3, r7
 8003992:	2202      	movs	r2, #2
 8003994:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003996:	003b      	movs	r3, r7
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800399c:	003b      	movs	r3, r7
 800399e:	2200      	movs	r2, #0
 80039a0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039a2:	003b      	movs	r3, r7
 80039a4:	2102      	movs	r1, #2
 80039a6:	0018      	movs	r0, r3
 80039a8:	f003 fa60 	bl	8006e6c <HAL_RCC_ClockConfig>
 80039ac:	1e03      	subs	r3, r0, #0
 80039ae:	d001      	beq.n	80039b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80039b0:	f000 faaa 	bl	8003f08 <Error_Handler>
  }
}
 80039b4:	46c0      	nop			@ (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b013      	add	sp, #76	@ 0x4c
 80039ba:	bd90      	pop	{r4, r7, pc}

080039bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	0018      	movs	r0, r3
 80039c6:	230c      	movs	r3, #12
 80039c8:	001a      	movs	r2, r3
 80039ca:	2100      	movs	r1, #0
 80039cc:	f007 fdb8 	bl	800b540 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80039d0:	4b3c      	ldr	r3, [pc, #240]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 80039d2:	4a3d      	ldr	r2, [pc, #244]	@ (8003ac8 <MX_ADC1_Init+0x10c>)
 80039d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80039d6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 80039d8:	2280      	movs	r2, #128	@ 0x80
 80039da:	05d2      	lsls	r2, r2, #23
 80039dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039de:	4b39      	ldr	r3, [pc, #228]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039e4:	4b37      	ldr	r3, [pc, #220]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80039ea:	4b36      	ldr	r3, [pc, #216]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 80039ec:	2280      	movs	r2, #128	@ 0x80
 80039ee:	0392      	lsls	r2, r2, #14
 80039f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80039f2:	4b34      	ldr	r3, [pc, #208]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 80039f4:	2208      	movs	r2, #8
 80039f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80039f8:	4b32      	ldr	r3, [pc, #200]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80039fe:	4b31      	ldr	r3, [pc, #196]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003a04:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8003a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a10:	4b2c      	ldr	r3, [pc, #176]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a16:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003a1c:	4b29      	ldr	r3, [pc, #164]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a1e:	222c      	movs	r2, #44	@ 0x2c
 8003a20:	2100      	movs	r1, #0
 8003a22:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003a24:	4b27      	ldr	r3, [pc, #156]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003a2a:	4b26      	ldr	r3, [pc, #152]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003a30:	4b24      	ldr	r3, [pc, #144]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003a36:	4b23      	ldr	r3, [pc, #140]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a38:	223c      	movs	r2, #60	@ 0x3c
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003a3e:	4b21      	ldr	r3, [pc, #132]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a44:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a46:	0018      	movs	r0, r3
 8003a48:	f001 fbc2 	bl	80051d0 <HAL_ADC_Init>
 8003a4c:	1e03      	subs	r3, r0, #0
 8003a4e:	d001      	beq.n	8003a54 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003a50:	f000 fa5a 	bl	8003f08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003a54:	1d3b      	adds	r3, r7, #4
 8003a56:	4a1d      	ldr	r2, [pc, #116]	@ (8003acc <MX_ADC1_Init+0x110>)
 8003a58:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003a5a:	1d3b      	adds	r3, r7, #4
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003a60:	1d3b      	adds	r3, r7, #4
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a66:	1d3a      	adds	r2, r7, #4
 8003a68:	4b16      	ldr	r3, [pc, #88]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f001 fdf5 	bl	800565c <HAL_ADC_ConfigChannel>
 8003a72:	1e03      	subs	r3, r0, #0
 8003a74:	d001      	beq.n	8003a7a <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8003a76:	f000 fa47 	bl	8003f08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003a7a:	1d3b      	adds	r3, r7, #4
 8003a7c:	4a14      	ldr	r2, [pc, #80]	@ (8003ad0 <MX_ADC1_Init+0x114>)
 8003a7e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	2204      	movs	r2, #4
 8003a84:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a86:	1d3a      	adds	r2, r7, #4
 8003a88:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003a8a:	0011      	movs	r1, r2
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f001 fde5 	bl	800565c <HAL_ADC_ConfigChannel>
 8003a92:	1e03      	subs	r3, r0, #0
 8003a94:	d001      	beq.n	8003a9a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003a96:	f000 fa37 	bl	8003f08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003a9a:	1d3b      	adds	r3, r7, #4
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad4 <MX_ADC1_Init+0x118>)
 8003a9e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003aa0:	1d3b      	adds	r3, r7, #4
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003aa6:	1d3a      	adds	r2, r7, #4
 8003aa8:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <MX_ADC1_Init+0x108>)
 8003aaa:	0011      	movs	r1, r2
 8003aac:	0018      	movs	r0, r3
 8003aae:	f001 fdd5 	bl	800565c <HAL_ADC_ConfigChannel>
 8003ab2:	1e03      	subs	r3, r0, #0
 8003ab4:	d001      	beq.n	8003aba <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8003ab6:	f000 fa27 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b004      	add	sp, #16
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			@ (mov r8, r8)
 8003ac4:	20000204 	.word	0x20000204
 8003ac8:	40012400 	.word	0x40012400
 8003acc:	10000010 	.word	0x10000010
 8003ad0:	14000020 	.word	0x14000020
 8003ad4:	1c000080 	.word	0x1c000080

08003ad8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ade:	2310      	movs	r3, #16
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	001a      	movs	r2, r3
 8003ae8:	2100      	movs	r1, #0
 8003aea:	f007 fd29 	bl	800b540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aee:	1d3b      	adds	r3, r7, #4
 8003af0:	0018      	movs	r0, r3
 8003af2:	230c      	movs	r3, #12
 8003af4:	001a      	movs	r2, r3
 8003af6:	2100      	movs	r1, #0
 8003af8:	f007 fd22 	bl	800b540 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003afc:	4b23      	ldr	r3, [pc, #140]	@ (8003b8c <MX_TIM2_Init+0xb4>)
 8003afe:	2280      	movs	r2, #128	@ 0x80
 8003b00:	05d2      	lsls	r2, r2, #23
 8003b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003b04:	4b21      	ldr	r3, [pc, #132]	@ (8003b8c <MX_TIM2_Init+0xb4>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b0a:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <MX_TIM2_Init+0xb4>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003b10:	4b1e      	ldr	r3, [pc, #120]	@ (8003b8c <MX_TIM2_Init+0xb4>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	4252      	negs	r2, r2
 8003b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b18:	4b1c      	ldr	r3, [pc, #112]	@ (8003b8c <MX_TIM2_Init+0xb4>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b8c <MX_TIM2_Init+0xb4>)
 8003b20:	2280      	movs	r2, #128	@ 0x80
 8003b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b24:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <MX_TIM2_Init+0xb4>)
 8003b26:	0018      	movs	r0, r3
 8003b28:	f003 fcc4 	bl	80074b4 <HAL_TIM_Base_Init>
 8003b2c:	1e03      	subs	r3, r0, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003b30:	f000 f9ea 	bl	8003f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003b34:	2110      	movs	r1, #16
 8003b36:	187b      	adds	r3, r7, r1
 8003b38:	2280      	movs	r2, #128	@ 0x80
 8003b3a:	0192      	lsls	r2, r2, #6
 8003b3c:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003b3e:	187b      	adds	r3, r7, r1
 8003b40:	2200      	movs	r2, #0
 8003b42:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003b4a:	187b      	adds	r3, r7, r1
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b50:	187a      	adds	r2, r7, r1
 8003b52:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <MX_TIM2_Init+0xb4>)
 8003b54:	0011      	movs	r1, r2
 8003b56:	0018      	movs	r0, r3
 8003b58:	f003 feac 	bl	80078b4 <HAL_TIM_ConfigClockSource>
 8003b5c:	1e03      	subs	r3, r0, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003b60:	f000 f9d2 	bl	8003f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b64:	1d3b      	adds	r3, r7, #4
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b6a:	1d3b      	adds	r3, r7, #4
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b70:	1d3a      	adds	r2, r7, #4
 8003b72:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <MX_TIM2_Init+0xb4>)
 8003b74:	0011      	movs	r1, r2
 8003b76:	0018      	movs	r0, r3
 8003b78:	f004 f8ba 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b7c:	1e03      	subs	r3, r0, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8003b80:	f000 f9c2 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b84:	46c0      	nop			@ (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b008      	add	sp, #32
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	200002c4 	.word	0x200002c4

08003b90 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003b94:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd4 <MX_TIM16_Init+0x44>)
 8003b96:	4a10      	ldr	r2, [pc, #64]	@ (8003bd8 <MX_TIM16_Init+0x48>)
 8003b98:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6400-1;
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <MX_TIM16_Init+0x44>)
 8003b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003bdc <MX_TIM16_Init+0x4c>)
 8003b9e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <MX_TIM16_Init+0x44>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <MX_TIM16_Init+0x44>)
 8003ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8003be0 <MX_TIM16_Init+0x50>)
 8003baa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bac:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <MX_TIM16_Init+0x44>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003bb2:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <MX_TIM16_Init+0x44>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb8:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <MX_TIM16_Init+0x44>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003bbe:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <MX_TIM16_Init+0x44>)
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f003 fc77 	bl	80074b4 <HAL_TIM_Base_Init>
 8003bc6:	1e03      	subs	r3, r0, #0
 8003bc8:	d001      	beq.n	8003bce <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8003bca:	f000 f99d 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000310 	.word	0x20000310
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	000018ff 	.word	0x000018ff
 8003be0:	0000ffff 	.word	0x0000ffff

08003be4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003be8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c28 <MX_TIM17_Init+0x44>)
 8003bea:	4a10      	ldr	r2, [pc, #64]	@ (8003c2c <MX_TIM17_Init+0x48>)
 8003bec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6400-1;
 8003bee:	4b0e      	ldr	r3, [pc, #56]	@ (8003c28 <MX_TIM17_Init+0x44>)
 8003bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8003c30 <MX_TIM17_Init+0x4c>)
 8003bf2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c28 <MX_TIM17_Init+0x44>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <MX_TIM17_Init+0x44>)
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c34 <MX_TIM17_Init+0x50>)
 8003bfe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c00:	4b09      	ldr	r3, [pc, #36]	@ (8003c28 <MX_TIM17_Init+0x44>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003c06:	4b08      	ldr	r3, [pc, #32]	@ (8003c28 <MX_TIM17_Init+0x44>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c0c:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <MX_TIM17_Init+0x44>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003c12:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <MX_TIM17_Init+0x44>)
 8003c14:	0018      	movs	r0, r3
 8003c16:	f003 fc4d 	bl	80074b4 <HAL_TIM_Base_Init>
 8003c1a:	1e03      	subs	r3, r0, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8003c1e:	f000 f973 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	2000035c 	.word	0x2000035c
 8003c2c:	40014800 	.word	0x40014800
 8003c30:	000018ff 	.word	0x000018ff
 8003c34:	0000ffff 	.word	0x0000ffff

08003c38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c3c:	4b23      	ldr	r3, [pc, #140]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c3e:	4a24      	ldr	r2, [pc, #144]	@ (8003cd0 <MX_USART1_UART_Init+0x98>)
 8003c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003c42:	4b22      	ldr	r3, [pc, #136]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c44:	2296      	movs	r2, #150	@ 0x96
 8003c46:	0192      	lsls	r2, r2, #6
 8003c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c4a:	4b20      	ldr	r3, [pc, #128]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c50:	4b1e      	ldr	r3, [pc, #120]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c56:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c5e:	220c      	movs	r2, #12
 8003c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c62:	4b1a      	ldr	r3, [pc, #104]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c68:	4b18      	ldr	r3, [pc, #96]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c6e:	4b17      	ldr	r3, [pc, #92]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c74:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c7a:	4b14      	ldr	r3, [pc, #80]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c80:	4b12      	ldr	r3, [pc, #72]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c82:	0018      	movs	r0, r3
 8003c84:	f004 f8b4 	bl	8007df0 <HAL_UART_Init>
 8003c88:	1e03      	subs	r3, r0, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003c8c:	f000 f93c 	bl	8003f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c90:	4b0e      	ldr	r3, [pc, #56]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003c92:	2100      	movs	r1, #0
 8003c94:	0018      	movs	r0, r3
 8003c96:	f006 fb03 	bl	800a2a0 <HAL_UARTEx_SetTxFifoThreshold>
 8003c9a:	1e03      	subs	r3, r0, #0
 8003c9c:	d001      	beq.n	8003ca2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003c9e:	f000 f933 	bl	8003f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f006 fb3a 	bl	800a320 <HAL_UARTEx_SetRxFifoThreshold>
 8003cac:	1e03      	subs	r3, r0, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003cb0:	f000 f92a 	bl	8003f08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003cb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <MX_USART1_UART_Init+0x94>)
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f006 fab8 	bl	800a22c <HAL_UARTEx_DisableFifoMode>
 8003cbc:	1e03      	subs	r3, r0, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003cc0:	f000 f922 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003cc4:	46c0      	nop			@ (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	200003a8 	.word	0x200003a8
 8003cd0:	40013800 	.word	0x40013800

08003cd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003cd8:	4b16      	ldr	r3, [pc, #88]	@ (8003d34 <MX_USART2_UART_Init+0x60>)
 8003cda:	4a17      	ldr	r2, [pc, #92]	@ (8003d38 <MX_USART2_UART_Init+0x64>)
 8003cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003cde:	4b15      	ldr	r3, [pc, #84]	@ (8003d34 <MX_USART2_UART_Init+0x60>)
 8003ce0:	22e1      	movs	r2, #225	@ 0xe1
 8003ce2:	0252      	lsls	r2, r2, #9
 8003ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ce6:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <MX_USART2_UART_Init+0x60>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cec:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <MX_USART2_UART_Init+0x60>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cf2:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <MX_USART2_UART_Init+0x60>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d34 <MX_USART2_UART_Init+0x60>)
 8003cfa:	220c      	movs	r2, #12
 8003cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003d34 <MX_USART2_UART_Init+0x60>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d04:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <MX_USART2_UART_Init+0x60>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d34 <MX_USART2_UART_Init+0x60>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d10:	4b08      	ldr	r3, [pc, #32]	@ (8003d34 <MX_USART2_UART_Init+0x60>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d16:	4b07      	ldr	r3, [pc, #28]	@ (8003d34 <MX_USART2_UART_Init+0x60>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d1c:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <MX_USART2_UART_Init+0x60>)
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f004 f866 	bl	8007df0 <HAL_UART_Init>
 8003d24:	1e03      	subs	r3, r0, #0
 8003d26:	d001      	beq.n	8003d2c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003d28:	f000 f8ee 	bl	8003f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d2c:	46c0      	nop			@ (mov r8, r8)
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	2000043c 	.word	0x2000043c
 8003d38:	40004400 	.word	0x40004400

08003d3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d42:	4b0c      	ldr	r3, [pc, #48]	@ (8003d74 <MX_DMA_Init+0x38>)
 8003d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d46:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <MX_DMA_Init+0x38>)
 8003d48:	2101      	movs	r1, #1
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d4e:	4b09      	ldr	r3, [pc, #36]	@ (8003d74 <MX_DMA_Init+0x38>)
 8003d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d52:	2201      	movs	r2, #1
 8003d54:	4013      	ands	r3, r2
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	2009      	movs	r0, #9
 8003d60:	f002 f814 	bl	8005d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003d64:	2009      	movs	r0, #9
 8003d66:	f002 f826 	bl	8005db6 <HAL_NVIC_EnableIRQ>

}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b002      	add	sp, #8
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	40021000 	.word	0x40021000

08003d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b08b      	sub	sp, #44	@ 0x2c
 8003d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7e:	2414      	movs	r4, #20
 8003d80:	193b      	adds	r3, r7, r4
 8003d82:	0018      	movs	r0, r3
 8003d84:	2314      	movs	r3, #20
 8003d86:	001a      	movs	r2, r3
 8003d88:	2100      	movs	r1, #0
 8003d8a:	f007 fbd9 	bl	800b540 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d92:	4b59      	ldr	r3, [pc, #356]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003d94:	2104      	movs	r1, #4
 8003d96:	430a      	orrs	r2, r1
 8003d98:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d9a:	4b57      	ldr	r3, [pc, #348]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d9e:	2204      	movs	r2, #4
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003da6:	4b54      	ldr	r3, [pc, #336]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003daa:	4b53      	ldr	r3, [pc, #332]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003dac:	2120      	movs	r1, #32
 8003dae:	430a      	orrs	r2, r1
 8003db0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003db2:	4b51      	ldr	r3, [pc, #324]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db6:	2220      	movs	r2, #32
 8003db8:	4013      	ands	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dca:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dce:	2201      	movs	r2, #1
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd6:	4b48      	ldr	r3, [pc, #288]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dda:	4b47      	ldr	r3, [pc, #284]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003ddc:	2102      	movs	r1, #2
 8003dde:	430a      	orrs	r2, r1
 8003de0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003de2:	4b45      	ldr	r3, [pc, #276]	@ (8003ef8 <MX_GPIO_Init+0x180>)
 8003de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de6:	2202      	movs	r2, #2
 8003de8:	4013      	ands	r3, r2
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003dee:	4b43      	ldr	r3, [pc, #268]	@ (8003efc <MX_GPIO_Init+0x184>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	2140      	movs	r1, #64	@ 0x40
 8003df4:	0018      	movs	r0, r3
 8003df6:	f002 fc9a 	bl	800672e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8003dfa:	2380      	movs	r3, #128	@ 0x80
 8003dfc:	0219      	lsls	r1, r3, #8
 8003dfe:	23a0      	movs	r3, #160	@ 0xa0
 8003e00:	05db      	lsls	r3, r3, #23
 8003e02:	2200      	movs	r2, #0
 8003e04:	0018      	movs	r0, r3
 8003e06:	f002 fc92 	bl	800672e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX_CLK_GPIO_Port, HX_CLK_Pin, GPIO_PIN_RESET);
 8003e0a:	2380      	movs	r3, #128	@ 0x80
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	483c      	ldr	r0, [pc, #240]	@ (8003f00 <MX_GPIO_Init+0x188>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	0019      	movs	r1, r3
 8003e14:	f002 fc8b 	bl	800672e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8003e18:	193b      	adds	r3, r7, r4
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e1e:	193b      	adds	r3, r7, r4
 8003e20:	2288      	movs	r2, #136	@ 0x88
 8003e22:	0352      	lsls	r2, r2, #13
 8003e24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	193b      	adds	r3, r7, r4
 8003e28:	2200      	movs	r2, #0
 8003e2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8003e2c:	193b      	adds	r3, r7, r4
 8003e2e:	4a35      	ldr	r2, [pc, #212]	@ (8003f04 <MX_GPIO_Init+0x18c>)
 8003e30:	0019      	movs	r1, r3
 8003e32:	0010      	movs	r0, r2
 8003e34:	f002 fafa 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 8003e38:	193b      	adds	r3, r7, r4
 8003e3a:	2240      	movs	r2, #64	@ 0x40
 8003e3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e3e:	193b      	adds	r3, r7, r4
 8003e40:	2200      	movs	r2, #0
 8003e42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	193b      	adds	r3, r7, r4
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 8003e4a:	193a      	adds	r2, r7, r4
 8003e4c:	23a0      	movs	r3, #160	@ 0xa0
 8003e4e:	05db      	lsls	r3, r3, #23
 8003e50:	0011      	movs	r1, r2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f002 faea 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pin : HX_Data_Pin */
  GPIO_InitStruct.Pin = HX_Data_Pin;
 8003e58:	193b      	adds	r3, r7, r4
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e5e:	193b      	adds	r3, r7, r4
 8003e60:	2200      	movs	r2, #0
 8003e62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e64:	193b      	adds	r3, r7, r4
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HX_Data_GPIO_Port, &GPIO_InitStruct);
 8003e6a:	193b      	adds	r3, r7, r4
 8003e6c:	4a24      	ldr	r2, [pc, #144]	@ (8003f00 <MX_GPIO_Init+0x188>)
 8003e6e:	0019      	movs	r1, r3
 8003e70:	0010      	movs	r0, r2
 8003e72:	f002 fadb 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003e76:	193b      	adds	r3, r7, r4
 8003e78:	2240      	movs	r2, #64	@ 0x40
 8003e7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e7c:	193b      	adds	r3, r7, r4
 8003e7e:	2201      	movs	r2, #1
 8003e80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	193b      	adds	r3, r7, r4
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e88:	193b      	adds	r3, r7, r4
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003e8e:	193b      	adds	r3, r7, r4
 8003e90:	4a1a      	ldr	r2, [pc, #104]	@ (8003efc <MX_GPIO_Init+0x184>)
 8003e92:	0019      	movs	r1, r3
 8003e94:	0010      	movs	r0, r2
 8003e96:	f002 fac9 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 8003e9a:	0021      	movs	r1, r4
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	2280      	movs	r2, #128	@ 0x80
 8003ea0:	0212      	lsls	r2, r2, #8
 8003ea2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003ea4:	000c      	movs	r4, r1
 8003ea6:	193b      	adds	r3, r7, r4
 8003ea8:	2211      	movs	r2, #17
 8003eaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	193b      	adds	r3, r7, r4
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb2:	193b      	adds	r3, r7, r4
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8003eb8:	193a      	adds	r2, r7, r4
 8003eba:	23a0      	movs	r3, #160	@ 0xa0
 8003ebc:	05db      	lsls	r3, r3, #23
 8003ebe:	0011      	movs	r1, r2
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f002 fab3 	bl	800642c <HAL_GPIO_Init>

  /*Configure GPIO pin : HX_CLK_Pin */
  GPIO_InitStruct.Pin = HX_CLK_Pin;
 8003ec6:	0021      	movs	r1, r4
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	2280      	movs	r2, #128	@ 0x80
 8003ecc:	0052      	lsls	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	2200      	movs	r2, #0
 8003ee0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HX_CLK_GPIO_Port, &GPIO_InitStruct);
 8003ee2:	187b      	adds	r3, r7, r1
 8003ee4:	4a06      	ldr	r2, [pc, #24]	@ (8003f00 <MX_GPIO_Init+0x188>)
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	0010      	movs	r0, r2
 8003eea:	f002 fa9f 	bl	800642c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003eee:	46c0      	nop			@ (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b00b      	add	sp, #44	@ 0x2c
 8003ef4:	bd90      	pop	{r4, r7, pc}
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	50000800 	.word	0x50000800
 8003f00:	50000400 	.word	0x50000400
 8003f04:	50001400 	.word	0x50001400

08003f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f0c:	b672      	cpsid	i
}
 8003f0e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f10:	46c0      	nop			@ (mov r8, r8)
 8003f12:	e7fd      	b.n	8003f10 <Error_Handler+0x8>

08003f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f58 <HAL_MspInit+0x44>)
 8003f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f58 <HAL_MspInit+0x44>)
 8003f20:	2101      	movs	r1, #1
 8003f22:	430a      	orrs	r2, r1
 8003f24:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f26:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <HAL_MspInit+0x44>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <HAL_MspInit+0x44>)
 8003f34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f36:	4b08      	ldr	r3, [pc, #32]	@ (8003f58 <HAL_MspInit+0x44>)
 8003f38:	2180      	movs	r1, #128	@ 0x80
 8003f3a:	0549      	lsls	r1, r1, #21
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f40:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_MspInit+0x44>)
 8003f42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f44:	2380      	movs	r3, #128	@ 0x80
 8003f46:	055b      	lsls	r3, r3, #21
 8003f48:	4013      	ands	r3, r2
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b002      	add	sp, #8
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			@ (mov r8, r8)
 8003f58:	40021000 	.word	0x40021000

08003f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b08b      	sub	sp, #44	@ 0x2c
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	2414      	movs	r4, #20
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	0018      	movs	r0, r3
 8003f6a:	2314      	movs	r3, #20
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	2100      	movs	r1, #0
 8003f70:	f007 fae6 	bl	800b540 <memset>
  if(hadc->Instance==ADC1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a2d      	ldr	r2, [pc, #180]	@ (8004030 <HAL_ADC_MspInit+0xd4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d154      	bne.n	8004028 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8004034 <HAL_ADC_MspInit+0xd8>)
 8003f80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f82:	4b2c      	ldr	r3, [pc, #176]	@ (8004034 <HAL_ADC_MspInit+0xd8>)
 8003f84:	2180      	movs	r1, #128	@ 0x80
 8003f86:	0349      	lsls	r1, r1, #13
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f8c:	4b29      	ldr	r3, [pc, #164]	@ (8004034 <HAL_ADC_MspInit+0xd8>)
 8003f8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f90:	2380      	movs	r3, #128	@ 0x80
 8003f92:	035b      	lsls	r3, r3, #13
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9a:	4b26      	ldr	r3, [pc, #152]	@ (8004034 <HAL_ADC_MspInit+0xd8>)
 8003f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f9e:	4b25      	ldr	r3, [pc, #148]	@ (8004034 <HAL_ADC_MspInit+0xd8>)
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fa6:	4b23      	ldr	r3, [pc, #140]	@ (8004034 <HAL_ADC_MspInit+0xd8>)
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003faa:	2201      	movs	r2, #1
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|VIN_Pin|CURR_Pin;
 8003fb2:	193b      	adds	r3, r7, r4
 8003fb4:	2292      	movs	r2, #146	@ 0x92
 8003fb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fb8:	193b      	adds	r3, r7, r4
 8003fba:	2203      	movs	r2, #3
 8003fbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	193b      	adds	r3, r7, r4
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc4:	193a      	adds	r2, r7, r4
 8003fc6:	23a0      	movs	r3, #160	@ 0xa0
 8003fc8:	05db      	lsls	r3, r3, #23
 8003fca:	0011      	movs	r1, r2
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f002 fa2d 	bl	800642c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003fd2:	4b19      	ldr	r3, [pc, #100]	@ (8004038 <HAL_ADC_MspInit+0xdc>)
 8003fd4:	4a19      	ldr	r2, [pc, #100]	@ (800403c <HAL_ADC_MspInit+0xe0>)
 8003fd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003fd8:	4b17      	ldr	r3, [pc, #92]	@ (8004038 <HAL_ADC_MspInit+0xdc>)
 8003fda:	2205      	movs	r2, #5
 8003fdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fde:	4b16      	ldr	r3, [pc, #88]	@ (8004038 <HAL_ADC_MspInit+0xdc>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fe4:	4b14      	ldr	r3, [pc, #80]	@ (8004038 <HAL_ADC_MspInit+0xdc>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fea:	4b13      	ldr	r3, [pc, #76]	@ (8004038 <HAL_ADC_MspInit+0xdc>)
 8003fec:	2280      	movs	r2, #128	@ 0x80
 8003fee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ff0:	4b11      	ldr	r3, [pc, #68]	@ (8004038 <HAL_ADC_MspInit+0xdc>)
 8003ff2:	2280      	movs	r2, #128	@ 0x80
 8003ff4:	0092      	lsls	r2, r2, #2
 8003ff6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8004038 <HAL_ADC_MspInit+0xdc>)
 8003ffa:	2280      	movs	r2, #128	@ 0x80
 8003ffc:	0112      	lsls	r2, r2, #4
 8003ffe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004000:	4b0d      	ldr	r3, [pc, #52]	@ (8004038 <HAL_ADC_MspInit+0xdc>)
 8004002:	2220      	movs	r2, #32
 8004004:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004006:	4b0c      	ldr	r3, [pc, #48]	@ (8004038 <HAL_ADC_MspInit+0xdc>)
 8004008:	2200      	movs	r2, #0
 800400a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800400c:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <HAL_ADC_MspInit+0xdc>)
 800400e:	0018      	movs	r0, r3
 8004010:	f001 feee 	bl	8005df0 <HAL_DMA_Init>
 8004014:	1e03      	subs	r3, r0, #0
 8004016:	d001      	beq.n	800401c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8004018:	f7ff ff76 	bl	8003f08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a06      	ldr	r2, [pc, #24]	@ (8004038 <HAL_ADC_MspInit+0xdc>)
 8004020:	651a      	str	r2, [r3, #80]	@ 0x50
 8004022:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <HAL_ADC_MspInit+0xdc>)
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004028:	46c0      	nop			@ (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	b00b      	add	sp, #44	@ 0x2c
 800402e:	bd90      	pop	{r4, r7, pc}
 8004030:	40012400 	.word	0x40012400
 8004034:	40021000 	.word	0x40021000
 8004038:	20000268 	.word	0x20000268
 800403c:	40020008 	.word	0x40020008

08004040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b08d      	sub	sp, #52	@ 0x34
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004048:	241c      	movs	r4, #28
 800404a:	193b      	adds	r3, r7, r4
 800404c:	0018      	movs	r0, r3
 800404e:	2314      	movs	r3, #20
 8004050:	001a      	movs	r2, r3
 8004052:	2100      	movs	r1, #0
 8004054:	f007 fa74 	bl	800b540 <memset>
  if(htim_base->Instance==TIM2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	2380      	movs	r3, #128	@ 0x80
 800405e:	05db      	lsls	r3, r3, #23
 8004060:	429a      	cmp	r2, r3
 8004062:	d137      	bne.n	80040d4 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004064:	4b31      	ldr	r3, [pc, #196]	@ (800412c <HAL_TIM_Base_MspInit+0xec>)
 8004066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004068:	4b30      	ldr	r3, [pc, #192]	@ (800412c <HAL_TIM_Base_MspInit+0xec>)
 800406a:	2101      	movs	r1, #1
 800406c:	430a      	orrs	r2, r1
 800406e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004070:	4b2e      	ldr	r3, [pc, #184]	@ (800412c <HAL_TIM_Base_MspInit+0xec>)
 8004072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004074:	2201      	movs	r2, #1
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800407c:	4b2b      	ldr	r3, [pc, #172]	@ (800412c <HAL_TIM_Base_MspInit+0xec>)
 800407e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004080:	4b2a      	ldr	r3, [pc, #168]	@ (800412c <HAL_TIM_Base_MspInit+0xec>)
 8004082:	2101      	movs	r1, #1
 8004084:	430a      	orrs	r2, r1
 8004086:	635a      	str	r2, [r3, #52]	@ 0x34
 8004088:	4b28      	ldr	r3, [pc, #160]	@ (800412c <HAL_TIM_Base_MspInit+0xec>)
 800408a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408c:	2201      	movs	r2, #1
 800408e:	4013      	ands	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004094:	0021      	movs	r1, r4
 8004096:	187b      	adds	r3, r7, r1
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409c:	187b      	adds	r3, r7, r1
 800409e:	2202      	movs	r2, #2
 80040a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	187b      	adds	r3, r7, r1
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a8:	187b      	adds	r3, r7, r1
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80040ae:	187b      	adds	r3, r7, r1
 80040b0:	2202      	movs	r2, #2
 80040b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b4:	187a      	adds	r2, r7, r1
 80040b6:	23a0      	movs	r3, #160	@ 0xa0
 80040b8:	05db      	lsls	r3, r3, #23
 80040ba:	0011      	movs	r1, r2
 80040bc:	0018      	movs	r0, r3
 80040be:	f002 f9b5 	bl	800642c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80040c2:	2200      	movs	r2, #0
 80040c4:	2100      	movs	r1, #0
 80040c6:	200f      	movs	r0, #15
 80040c8:	f001 fe60 	bl	8005d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040cc:	200f      	movs	r0, #15
 80040ce:	f001 fe72 	bl	8005db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80040d2:	e026      	b.n	8004122 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM16)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a15      	ldr	r2, [pc, #84]	@ (8004130 <HAL_TIM_Base_MspInit+0xf0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10e      	bne.n	80040fc <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80040de:	4b13      	ldr	r3, [pc, #76]	@ (800412c <HAL_TIM_Base_MspInit+0xec>)
 80040e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040e2:	4b12      	ldr	r3, [pc, #72]	@ (800412c <HAL_TIM_Base_MspInit+0xec>)
 80040e4:	2180      	movs	r1, #128	@ 0x80
 80040e6:	0289      	lsls	r1, r1, #10
 80040e8:	430a      	orrs	r2, r1
 80040ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80040ec:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <HAL_TIM_Base_MspInit+0xec>)
 80040ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040f0:	2380      	movs	r3, #128	@ 0x80
 80040f2:	029b      	lsls	r3, r3, #10
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	693b      	ldr	r3, [r7, #16]
}
 80040fa:	e012      	b.n	8004122 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM17)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0c      	ldr	r2, [pc, #48]	@ (8004134 <HAL_TIM_Base_MspInit+0xf4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10d      	bne.n	8004122 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004106:	4b09      	ldr	r3, [pc, #36]	@ (800412c <HAL_TIM_Base_MspInit+0xec>)
 8004108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800410a:	4b08      	ldr	r3, [pc, #32]	@ (800412c <HAL_TIM_Base_MspInit+0xec>)
 800410c:	2180      	movs	r1, #128	@ 0x80
 800410e:	02c9      	lsls	r1, r1, #11
 8004110:	430a      	orrs	r2, r1
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <HAL_TIM_Base_MspInit+0xec>)
 8004116:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004118:	2380      	movs	r3, #128	@ 0x80
 800411a:	02db      	lsls	r3, r3, #11
 800411c:	4013      	ands	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
}
 8004122:	46c0      	nop			@ (mov r8, r8)
 8004124:	46bd      	mov	sp, r7
 8004126:	b00d      	add	sp, #52	@ 0x34
 8004128:	bd90      	pop	{r4, r7, pc}
 800412a:	46c0      	nop			@ (mov r8, r8)
 800412c:	40021000 	.word	0x40021000
 8004130:	40014400 	.word	0x40014400
 8004134:	40014800 	.word	0x40014800

08004138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b097      	sub	sp, #92	@ 0x5c
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004140:	2344      	movs	r3, #68	@ 0x44
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	0018      	movs	r0, r3
 8004146:	2314      	movs	r3, #20
 8004148:	001a      	movs	r2, r3
 800414a:	2100      	movs	r1, #0
 800414c:	f007 f9f8 	bl	800b540 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004150:	241c      	movs	r4, #28
 8004152:	193b      	adds	r3, r7, r4
 8004154:	0018      	movs	r0, r3
 8004156:	2328      	movs	r3, #40	@ 0x28
 8004158:	001a      	movs	r2, r3
 800415a:	2100      	movs	r1, #0
 800415c:	f007 f9f0 	bl	800b540 <memset>
  if(huart->Instance==USART1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a46      	ldr	r2, [pc, #280]	@ (8004280 <HAL_UART_MspInit+0x148>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d148      	bne.n	80041fc <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800416a:	193b      	adds	r3, r7, r4
 800416c:	2201      	movs	r2, #1
 800416e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004170:	193b      	adds	r3, r7, r4
 8004172:	2200      	movs	r2, #0
 8004174:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004176:	193b      	adds	r3, r7, r4
 8004178:	0018      	movs	r0, r3
 800417a:	f003 f821 	bl	80071c0 <HAL_RCCEx_PeriphCLKConfig>
 800417e:	1e03      	subs	r3, r0, #0
 8004180:	d001      	beq.n	8004186 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004182:	f7ff fec1 	bl	8003f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004186:	4b3f      	ldr	r3, [pc, #252]	@ (8004284 <HAL_UART_MspInit+0x14c>)
 8004188:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800418a:	4b3e      	ldr	r3, [pc, #248]	@ (8004284 <HAL_UART_MspInit+0x14c>)
 800418c:	2180      	movs	r1, #128	@ 0x80
 800418e:	01c9      	lsls	r1, r1, #7
 8004190:	430a      	orrs	r2, r1
 8004192:	641a      	str	r2, [r3, #64]	@ 0x40
 8004194:	4b3b      	ldr	r3, [pc, #236]	@ (8004284 <HAL_UART_MspInit+0x14c>)
 8004196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004198:	2380      	movs	r3, #128	@ 0x80
 800419a:	01db      	lsls	r3, r3, #7
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a2:	4b38      	ldr	r3, [pc, #224]	@ (8004284 <HAL_UART_MspInit+0x14c>)
 80041a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041a6:	4b37      	ldr	r3, [pc, #220]	@ (8004284 <HAL_UART_MspInit+0x14c>)
 80041a8:	2101      	movs	r1, #1
 80041aa:	430a      	orrs	r2, r1
 80041ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80041ae:	4b35      	ldr	r3, [pc, #212]	@ (8004284 <HAL_UART_MspInit+0x14c>)
 80041b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b2:	2201      	movs	r2, #1
 80041b4:	4013      	ands	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041ba:	2144      	movs	r1, #68	@ 0x44
 80041bc:	187b      	adds	r3, r7, r1
 80041be:	22c0      	movs	r2, #192	@ 0xc0
 80041c0:	00d2      	lsls	r2, r2, #3
 80041c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c4:	187b      	adds	r3, r7, r1
 80041c6:	2202      	movs	r2, #2
 80041c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ca:	187b      	adds	r3, r7, r1
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	2200      	movs	r2, #0
 80041d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80041d6:	187b      	adds	r3, r7, r1
 80041d8:	2201      	movs	r2, #1
 80041da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041dc:	187a      	adds	r2, r7, r1
 80041de:	23a0      	movs	r3, #160	@ 0xa0
 80041e0:	05db      	lsls	r3, r3, #23
 80041e2:	0011      	movs	r1, r2
 80041e4:	0018      	movs	r0, r3
 80041e6:	f002 f921 	bl	800642c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80041ea:	2200      	movs	r2, #0
 80041ec:	2100      	movs	r1, #0
 80041ee:	201b      	movs	r0, #27
 80041f0:	f001 fdcc 	bl	8005d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80041f4:	201b      	movs	r0, #27
 80041f6:	f001 fdde 	bl	8005db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041fa:	e03d      	b.n	8004278 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a21      	ldr	r2, [pc, #132]	@ (8004288 <HAL_UART_MspInit+0x150>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d138      	bne.n	8004278 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004206:	4b1f      	ldr	r3, [pc, #124]	@ (8004284 <HAL_UART_MspInit+0x14c>)
 8004208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800420a:	4b1e      	ldr	r3, [pc, #120]	@ (8004284 <HAL_UART_MspInit+0x14c>)
 800420c:	2180      	movs	r1, #128	@ 0x80
 800420e:	0289      	lsls	r1, r1, #10
 8004210:	430a      	orrs	r2, r1
 8004212:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004214:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <HAL_UART_MspInit+0x14c>)
 8004216:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004218:	2380      	movs	r3, #128	@ 0x80
 800421a:	029b      	lsls	r3, r3, #10
 800421c:	4013      	ands	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004222:	4b18      	ldr	r3, [pc, #96]	@ (8004284 <HAL_UART_MspInit+0x14c>)
 8004224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004226:	4b17      	ldr	r3, [pc, #92]	@ (8004284 <HAL_UART_MspInit+0x14c>)
 8004228:	2101      	movs	r1, #1
 800422a:	430a      	orrs	r2, r1
 800422c:	635a      	str	r2, [r3, #52]	@ 0x34
 800422e:	4b15      	ldr	r3, [pc, #84]	@ (8004284 <HAL_UART_MspInit+0x14c>)
 8004230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004232:	2201      	movs	r2, #1
 8004234:	4013      	ands	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800423a:	2144      	movs	r1, #68	@ 0x44
 800423c:	187b      	adds	r3, r7, r1
 800423e:	220c      	movs	r2, #12
 8004240:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004242:	187b      	adds	r3, r7, r1
 8004244:	2202      	movs	r2, #2
 8004246:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004248:	187b      	adds	r3, r7, r1
 800424a:	2201      	movs	r2, #1
 800424c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800424e:	187b      	adds	r3, r7, r1
 8004250:	2200      	movs	r2, #0
 8004252:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004254:	187b      	adds	r3, r7, r1
 8004256:	2201      	movs	r2, #1
 8004258:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800425a:	187a      	adds	r2, r7, r1
 800425c:	23a0      	movs	r3, #160	@ 0xa0
 800425e:	05db      	lsls	r3, r3, #23
 8004260:	0011      	movs	r1, r2
 8004262:	0018      	movs	r0, r3
 8004264:	f002 f8e2 	bl	800642c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004268:	2200      	movs	r2, #0
 800426a:	2100      	movs	r1, #0
 800426c:	201c      	movs	r0, #28
 800426e:	f001 fd8d 	bl	8005d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004272:	201c      	movs	r0, #28
 8004274:	f001 fd9f 	bl	8005db6 <HAL_NVIC_EnableIRQ>
}
 8004278:	46c0      	nop			@ (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b017      	add	sp, #92	@ 0x5c
 800427e:	bd90      	pop	{r4, r7, pc}
 8004280:	40013800 	.word	0x40013800
 8004284:	40021000 	.word	0x40021000
 8004288:	40004400 	.word	0x40004400

0800428c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004290:	46c0      	nop			@ (mov r8, r8)
 8004292:	e7fd      	b.n	8004290 <NMI_Handler+0x4>

08004294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004298:	46c0      	nop			@ (mov r8, r8)
 800429a:	e7fd      	b.n	8004298 <HardFault_Handler+0x4>

0800429c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80042a0:	46c0      	nop			@ (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b4:	f000 fe28 	bl	8004f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042b8:	46c0      	nop			@ (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042c4:	4b03      	ldr	r3, [pc, #12]	@ (80042d4 <DMA1_Channel1_IRQHandler+0x14>)
 80042c6:	0018      	movs	r0, r3
 80042c8:	f001 ff6e 	bl	80061a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80042cc:	46c0      	nop			@ (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	46c0      	nop			@ (mov r8, r8)
 80042d4:	20000268 	.word	0x20000268

080042d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042dc:	4b03      	ldr	r3, [pc, #12]	@ (80042ec <TIM2_IRQHandler+0x14>)
 80042de:	0018      	movs	r0, r3
 80042e0:	f003 f9e0 	bl	80076a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80042e4:	46c0      	nop			@ (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	200002c4 	.word	0x200002c4

080042f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042f4:	4b03      	ldr	r3, [pc, #12]	@ (8004304 <USART1_IRQHandler+0x14>)
 80042f6:	0018      	movs	r0, r3
 80042f8:	f003 ff7a 	bl	80081f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80042fc:	46c0      	nop			@ (mov r8, r8)
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	200003a8 	.word	0x200003a8

08004308 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800430c:	4b03      	ldr	r3, [pc, #12]	@ (800431c <USART2_IRQHandler+0x14>)
 800430e:	0018      	movs	r0, r3
 8004310:	f003 ff6e 	bl	80081f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004314:	46c0      	nop			@ (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			@ (mov r8, r8)
 800431c:	2000043c 	.word	0x2000043c

08004320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  return 1;
 8004324:	2301      	movs	r3, #1
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <_kill>:

int _kill(int pid, int sig)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004336:	f007 f96f 	bl	800b618 <__errno>
 800433a:	0003      	movs	r3, r0
 800433c:	2216      	movs	r2, #22
 800433e:	601a      	str	r2, [r3, #0]
  return -1;
 8004340:	2301      	movs	r3, #1
 8004342:	425b      	negs	r3, r3
}
 8004344:	0018      	movs	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <_exit>:

void _exit (int status)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004354:	2301      	movs	r3, #1
 8004356:	425a      	negs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	0011      	movs	r1, r2
 800435c:	0018      	movs	r0, r3
 800435e:	f7ff ffe5 	bl	800432c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	e7fd      	b.n	8004362 <_exit+0x16>

08004366 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	e00a      	b.n	800438e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004378:	e000      	b.n	800437c <_read+0x16>
 800437a:	bf00      	nop
 800437c:	0001      	movs	r1, r0
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	60ba      	str	r2, [r7, #8]
 8004384:	b2ca      	uxtb	r2, r1
 8004386:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3301      	adds	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	dbf0      	blt.n	8004378 <_read+0x12>
  }

  return len;
 8004396:	687b      	ldr	r3, [r7, #4]
}
 8004398:	0018      	movs	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	b006      	add	sp, #24
 800439e:	bd80      	pop	{r7, pc}

080043a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e009      	b.n	80043c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	60ba      	str	r2, [r7, #8]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	0018      	movs	r0, r3
 80043bc:	e000      	b.n	80043c0 <_write+0x20>
 80043be:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3301      	adds	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	dbf1      	blt.n	80043b2 <_write+0x12>
  }
  return len;
 80043ce:	687b      	ldr	r3, [r7, #4]
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b006      	add	sp, #24
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <_close>:

int _close(int file)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043e0:	2301      	movs	r3, #1
 80043e2:	425b      	negs	r3, r3
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2280      	movs	r2, #128	@ 0x80
 80043fa:	0192      	lsls	r2, r2, #6
 80043fc:	605a      	str	r2, [r3, #4]
  return 0;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	b002      	add	sp, #8
 8004406:	bd80      	pop	{r7, pc}

08004408 <_isatty>:

int _isatty(int file)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004410:	2301      	movs	r3, #1
}
 8004412:	0018      	movs	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	b002      	add	sp, #8
 8004418:	bd80      	pop	{r7, pc}

0800441a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004426:	2300      	movs	r3, #0
}
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	b004      	add	sp, #16
 800442e:	bd80      	pop	{r7, pc}

08004430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004438:	4a14      	ldr	r2, [pc, #80]	@ (800448c <_sbrk+0x5c>)
 800443a:	4b15      	ldr	r3, [pc, #84]	@ (8004490 <_sbrk+0x60>)
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004444:	4b13      	ldr	r3, [pc, #76]	@ (8004494 <_sbrk+0x64>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d102      	bne.n	8004452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800444c:	4b11      	ldr	r3, [pc, #68]	@ (8004494 <_sbrk+0x64>)
 800444e:	4a12      	ldr	r2, [pc, #72]	@ (8004498 <_sbrk+0x68>)
 8004450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004452:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <_sbrk+0x64>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	18d3      	adds	r3, r2, r3
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	429a      	cmp	r2, r3
 800445e:	d207      	bcs.n	8004470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004460:	f007 f8da 	bl	800b618 <__errno>
 8004464:	0003      	movs	r3, r0
 8004466:	220c      	movs	r2, #12
 8004468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800446a:	2301      	movs	r3, #1
 800446c:	425b      	negs	r3, r3
 800446e:	e009      	b.n	8004484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004470:	4b08      	ldr	r3, [pc, #32]	@ (8004494 <_sbrk+0x64>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004476:	4b07      	ldr	r3, [pc, #28]	@ (8004494 <_sbrk+0x64>)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	18d2      	adds	r2, r2, r3
 800447e:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <_sbrk+0x64>)
 8004480:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004482:	68fb      	ldr	r3, [r7, #12]
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b006      	add	sp, #24
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20002000 	.word	0x20002000
 8004490:	00000400 	.word	0x00000400
 8004494:	20000778 	.word	0x20000778
 8004498:	200008d0 	.word	0x200008d0

0800449c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044a0:	46c0      	nop			@ (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044a8:	480d      	ldr	r0, [pc, #52]	@ (80044e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80044ac:	f7ff fff6 	bl	800449c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044b0:	480c      	ldr	r0, [pc, #48]	@ (80044e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80044b2:	490d      	ldr	r1, [pc, #52]	@ (80044e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044b4:	4a0d      	ldr	r2, [pc, #52]	@ (80044ec <LoopForever+0xe>)
  movs r3, #0
 80044b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044b8:	e002      	b.n	80044c0 <LoopCopyDataInit>

080044ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044be:	3304      	adds	r3, #4

080044c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044c4:	d3f9      	bcc.n	80044ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044c6:	4a0a      	ldr	r2, [pc, #40]	@ (80044f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044c8:	4c0a      	ldr	r4, [pc, #40]	@ (80044f4 <LoopForever+0x16>)
  movs r3, #0
 80044ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044cc:	e001      	b.n	80044d2 <LoopFillZerobss>

080044ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044d0:	3204      	adds	r2, #4

080044d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044d4:	d3fb      	bcc.n	80044ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80044d6:	f007 f8a5 	bl	800b624 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80044da:	f7fe fedb 	bl	8003294 <main>

080044de <LoopForever>:

LoopForever:
  b LoopForever
 80044de:	e7fe      	b.n	80044de <LoopForever>
  ldr   r0, =_estack
 80044e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80044e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80044ec:	0800dc90 	.word	0x0800dc90
  ldr r2, =_sbss
 80044f0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80044f4:	200008cc 	.word	0x200008cc

080044f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044f8:	e7fe      	b.n	80044f8 <ADC1_IRQHandler>

080044fa <hx711_init>:
 */

#include <HX711.h>

//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 80044fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fc:	b08b      	sub	sp, #44	@ 0x2c
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	1dbb      	adds	r3, r7, #6
 8004508:	801a      	strh	r2, [r3, #0]
  // Setup the pin connections with the STM Board
  hx711->clk_gpio = clk_gpio;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	1dba      	adds	r2, r7, #6
 8004514:	8812      	ldrh	r2, [r2, #0]
 8004516:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	2530      	movs	r5, #48	@ 0x30
 8004522:	2608      	movs	r6, #8
 8004524:	19ab      	adds	r3, r5, r6
 8004526:	2108      	movs	r1, #8
 8004528:	468c      	mov	ip, r1
 800452a:	44bc      	add	ip, r7
 800452c:	4463      	add	r3, ip
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	8153      	strh	r3, [r2, #10]

  GPIO_InitTypeDef  gpio = {0};
 8004532:	2414      	movs	r4, #20
 8004534:	193b      	adds	r3, r7, r4
 8004536:	0018      	movs	r0, r3
 8004538:	2314      	movs	r3, #20
 800453a:	001a      	movs	r2, r3
 800453c:	2100      	movs	r1, #0
 800453e:	f006 ffff 	bl	800b540 <memset>
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8004542:	0021      	movs	r1, r4
 8004544:	187b      	adds	r3, r7, r1
 8004546:	2201      	movs	r2, #1
 8004548:	605a      	str	r2, [r3, #4]
  gpio.Pull = GPIO_NOPULL;
 800454a:	187b      	adds	r3, r7, r1
 800454c:	2200      	movs	r2, #0
 800454e:	609a      	str	r2, [r3, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8004550:	187b      	adds	r3, r7, r1
 8004552:	2202      	movs	r2, #2
 8004554:	60da      	str	r2, [r3, #12]
  gpio.Pin = clk_pin;
 8004556:	1dbb      	adds	r3, r7, #6
 8004558:	881a      	ldrh	r2, [r3, #0]
 800455a:	187b      	adds	r3, r7, r1
 800455c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(clk_gpio, &gpio);
 800455e:	000c      	movs	r4, r1
 8004560:	187a      	adds	r2, r7, r1
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	0011      	movs	r1, r2
 8004566:	0018      	movs	r0, r3
 8004568:	f001 ff60 	bl	800642c <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 800456c:	0021      	movs	r1, r4
 800456e:	187b      	adds	r3, r7, r1
 8004570:	2200      	movs	r2, #0
 8004572:	605a      	str	r2, [r3, #4]
  gpio.Pull = GPIO_PULLUP;
 8004574:	187b      	adds	r3, r7, r1
 8004576:	2201      	movs	r2, #1
 8004578:	609a      	str	r2, [r3, #8]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800457a:	187b      	adds	r3, r7, r1
 800457c:	2202      	movs	r2, #2
 800457e:	60da      	str	r2, [r3, #12]
  gpio.Pin = dat_pin;
 8004580:	19ab      	adds	r3, r5, r6
 8004582:	2208      	movs	r2, #8
 8004584:	4694      	mov	ip, r2
 8004586:	44bc      	add	ip, r7
 8004588:	4463      	add	r3, ip
 800458a:	881a      	ldrh	r2, [r3, #0]
 800458c:	187b      	adds	r3, r7, r1
 800458e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8004590:	187a      	adds	r2, r7, r1
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	0011      	movs	r1, r2
 8004596:	0018      	movs	r0, r3
 8004598:	f001 ff48 	bl	800642c <HAL_GPIO_Init>

}
 800459c:	46c0      	nop			@ (mov r8, r8)
 800459e:	46bd      	mov	sp, r7
 80045a0:	b00b      	add	sp, #44	@ 0x2c
 80045a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045a4 <set_scale>:

//#############################################################################################
void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  // Set the scale. To calibrate the cell, run the program with a scale of 1, call the tare function and then the get_units function. 
  // Divide the obtained weight by the real weight. The result is the parameter to pass to scale
	hx711->Ascale = Ascale;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	61da      	str	r2, [r3, #28]
}
 80045bc:	46c0      	nop			@ (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b004      	add	sp, #16
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <set_gain>:

//#############################################################################################
void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	0008      	movs	r0, r1
 80045ce:	0011      	movs	r1, r2
 80045d0:	1cfb      	adds	r3, r7, #3
 80045d2:	1c02      	adds	r2, r0, #0
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	1cbb      	adds	r3, r7, #2
 80045d8:	1c0a      	adds	r2, r1, #0
 80045da:	701a      	strb	r2, [r3, #0]
  // Define A channel's gain
	switch (Again) {
 80045dc:	1cfb      	adds	r3, r7, #3
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b40      	cmp	r3, #64	@ 0x40
 80045e2:	d005      	beq.n	80045f0 <set_gain+0x2c>
 80045e4:	2b80      	cmp	r3, #128	@ 0x80
 80045e6:	d107      	bne.n	80045f8 <set_gain+0x34>
			case 128:		// channel A, gain factor 128
				hx711->Again = 1;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	751a      	strb	r2, [r3, #20]
				break;
 80045ee:	e003      	b.n	80045f8 <set_gain+0x34>
			case 64:		// channel A, gain factor 64
				hx711->Again = 3;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2203      	movs	r2, #3
 80045f4:	751a      	strb	r2, [r3, #20]
				break;
 80045f6:	46c0      	nop			@ (mov r8, r8)
		}
	hx711->Bgain = 2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	2102      	movs	r1, #2
 80045fe:	5499      	strb	r1, [r3, r2]
}
 8004600:	46c0      	nop			@ (mov r8, r8)
 8004602:	46bd      	mov	sp, r7
 8004604:	b002      	add	sp, #8
 8004606:	bd80      	pop	{r7, pc}

08004608 <set_offset>:

//#############################################################################################
void set_offset(hx711_t *hx711, long offset, uint8_t channel){
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	1dfb      	adds	r3, r7, #7
 8004614:	701a      	strb	r2, [r3, #0]
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8004616:	1dfb      	adds	r3, r7, #7
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <set_offset+0x1e>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	60da      	str	r2, [r3, #12]
	else hx711->Boffset = offset;
}
 8004624:	e002      	b.n	800462c <set_offset+0x24>
	else hx711->Boffset = offset;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	619a      	str	r2, [r3, #24]
}
 800462c:	46c0      	nop			@ (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b004      	add	sp, #16
 8004632:	bd80      	pop	{r7, pc}

08004634 <shiftIn>:

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	000a      	movs	r2, r1
 800463e:	1cfb      	adds	r3, r7, #3
 8004640:	701a      	strb	r2, [r3, #0]
    uint8_t value = 0;
 8004642:	230f      	movs	r3, #15
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    for(i = 0; i < 8; ++i) {
 800464a:	230e      	movs	r3, #14
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	e04c      	b.n	80046ee <shiftIn+0xba>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	891b      	ldrh	r3, [r3, #8]
 800465c:	2201      	movs	r2, #1
 800465e:	0019      	movs	r1, r3
 8004660:	f002 f865 	bl	800672e <HAL_GPIO_WritePin>
        if(bitOrder == 0)
 8004664:	1cfb      	adds	r3, r7, #3
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d118      	bne.n	800469e <shiftIn+0x6a>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	895b      	ldrh	r3, [r3, #10]
 8004674:	0019      	movs	r1, r3
 8004676:	0010      	movs	r0, r2
 8004678:	f002 f83c 	bl	80066f4 <HAL_GPIO_ReadPin>
 800467c:	0003      	movs	r3, r0
 800467e:	001a      	movs	r2, r3
 8004680:	230e      	movs	r3, #14
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	409a      	lsls	r2, r3
 8004688:	0013      	movs	r3, r2
 800468a:	b25a      	sxtb	r2, r3
 800468c:	210f      	movs	r1, #15
 800468e:	187b      	adds	r3, r7, r1
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b25b      	sxtb	r3, r3
 8004694:	4313      	orrs	r3, r2
 8004696:	b25a      	sxtb	r2, r3
 8004698:	187b      	adds	r3, r7, r1
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	e019      	b.n	80046d2 <shiftIn+0x9e>
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	895b      	ldrh	r3, [r3, #10]
 80046a6:	0019      	movs	r1, r3
 80046a8:	0010      	movs	r0, r2
 80046aa:	f002 f823 	bl	80066f4 <HAL_GPIO_ReadPin>
 80046ae:	0003      	movs	r3, r0
 80046b0:	0019      	movs	r1, r3
 80046b2:	230e      	movs	r3, #14
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2207      	movs	r2, #7
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	4099      	lsls	r1, r3
 80046be:	000b      	movs	r3, r1
 80046c0:	b25a      	sxtb	r2, r3
 80046c2:	210f      	movs	r1, #15
 80046c4:	187b      	adds	r3, r7, r1
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b25b      	sxtb	r3, r3
 80046ca:	4313      	orrs	r3, r2
 80046cc:	b25a      	sxtb	r2, r3
 80046ce:	187b      	adds	r3, r7, r1
 80046d0:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	891b      	ldrh	r3, [r3, #8]
 80046da:	2200      	movs	r2, #0
 80046dc:	0019      	movs	r1, r3
 80046de:	f002 f826 	bl	800672e <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 80046e2:	220e      	movs	r2, #14
 80046e4:	18bb      	adds	r3, r7, r2
 80046e6:	18ba      	adds	r2, r7, r2
 80046e8:	7812      	ldrb	r2, [r2, #0]
 80046ea:	3201      	adds	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	230e      	movs	r3, #14
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b07      	cmp	r3, #7
 80046f6:	d9ad      	bls.n	8004654 <shiftIn+0x20>
    }
    return value;
 80046f8:	230f      	movs	r3, #15
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	781b      	ldrb	r3, [r3, #0]
}
 80046fe:	0018      	movs	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	b004      	add	sp, #16
 8004704:	bd80      	pop	{r7, pc}

08004706 <is_ready>:

//############################################################################################
bool is_ready(hx711_t *hx711) {
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	895b      	ldrh	r3, [r3, #10]
 8004716:	0019      	movs	r1, r3
 8004718:	0010      	movs	r0, r2
 800471a:	f001 ffeb 	bl	80066f4 <HAL_GPIO_ReadPin>
 800471e:	1e03      	subs	r3, r0, #0
 8004720:	d101      	bne.n	8004726 <is_ready+0x20>
		return 1;
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <is_ready+0x22>
	}
	return 0;
 8004726:	2300      	movs	r3, #0
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}

08004730 <wait_ready>:

//############################################################################################
void wait_ready(hx711_t *hx711) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	// Wait for the chip to become ready.
	while (!is_ready(hx711)) {
 8004738:	46c0      	nop			@ (mov r8, r8)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0018      	movs	r0, r3
 800473e:	f7ff ffe2 	bl	8004706 <is_ready>
 8004742:	0003      	movs	r3, r0
 8004744:	001a      	movs	r2, r3
 8004746:	2301      	movs	r3, #1
 8004748:	4053      	eors	r3, r2
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f4      	bne.n	800473a <wait_ready+0xa>
	}
}
 8004750:	46c0      	nop			@ (mov r8, r8)
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	46bd      	mov	sp, r7
 8004756:	b002      	add	sp, #8
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <read>:

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	000a      	movs	r2, r1
 8004766:	1cfb      	adds	r3, r7, #3
 8004768:	701a      	strb	r2, [r3, #0]
	wait_ready(hx711);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	0018      	movs	r0, r3
 800476e:	f7ff ffdf 	bl	8004730 <wait_ready>
	unsigned long value = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = { 0 };
 8004776:	2408      	movs	r4, #8
 8004778:	193b      	adds	r3, r7, r4
 800477a:	4a3e      	ldr	r2, [pc, #248]	@ (8004874 <read+0x118>)
 800477c:	8812      	ldrh	r2, [r2, #0]
 800477e:	801a      	strh	r2, [r3, #0]
 8004780:	2202      	movs	r2, #2
 8004782:	2100      	movs	r1, #0
 8004784:	5499      	strb	r1, [r3, r2]
	uint8_t filler = 0x00;
 8004786:	2317      	movs	r3, #23
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800478e:	b672      	cpsid	i
}
 8004790:	46c0      	nop			@ (mov r8, r8)

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2101      	movs	r1, #1
 8004796:	0018      	movs	r0, r3
 8004798:	f7ff ff4c 	bl	8004634 <shiftIn>
 800479c:	0003      	movs	r3, r0
 800479e:	001a      	movs	r2, r3
 80047a0:	193b      	adds	r3, r7, r4
 80047a2:	709a      	strb	r2, [r3, #2]
	data[1] = shiftIn(hx711, 1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2101      	movs	r1, #1
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7ff ff43 	bl	8004634 <shiftIn>
 80047ae:	0003      	movs	r3, r0
 80047b0:	001a      	movs	r2, r3
 80047b2:	193b      	adds	r3, r7, r4
 80047b4:	705a      	strb	r2, [r3, #1]
	data[0] = shiftIn(hx711, 1);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2101      	movs	r1, #1
 80047ba:	0018      	movs	r0, r3
 80047bc:	f7ff ff3a 	bl	8004634 <shiftIn>
 80047c0:	0003      	movs	r3, r0
 80047c2:	001a      	movs	r2, r3
 80047c4:	193b      	adds	r3, r7, r4
 80047c6:	701a      	strb	r2, [r3, #0]

	uint8_t gain = 0;
 80047c8:	2116      	movs	r1, #22
 80047ca:	187b      	adds	r3, r7, r1
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
	if(channel == 0) gain = hx711->Again;
 80047d0:	1cfb      	adds	r3, r7, #3
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <read+0x86>
 80047d8:	187b      	adds	r3, r7, r1
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	7d12      	ldrb	r2, [r2, #20]
 80047de:	701a      	strb	r2, [r3, #0]
 80047e0:	e005      	b.n	80047ee <read+0x92>
	else gain = hx711->Bgain;
 80047e2:	2316      	movs	r3, #22
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	2120      	movs	r1, #32
 80047ea:	5c52      	ldrb	r2, [r2, r1]
 80047ec:	701a      	strb	r2, [r3, #0]

	for (unsigned int i = 0; i < gain; i++) {
 80047ee:	2300      	movs	r3, #0
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	e012      	b.n	800481a <read+0xbe>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	891b      	ldrh	r3, [r3, #8]
 80047fc:	2201      	movs	r2, #1
 80047fe:	0019      	movs	r1, r3
 8004800:	f001 ff95 	bl	800672e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	891b      	ldrh	r3, [r3, #8]
 800480c:	2200      	movs	r2, #0
 800480e:	0019      	movs	r1, r3
 8004810:	f001 ff8d 	bl	800672e <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	3301      	adds	r3, #1
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	2316      	movs	r3, #22
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	429a      	cmp	r2, r3
 8004824:	d3e6      	bcc.n	80047f4 <read+0x98>
  __ASM volatile ("cpsie i" : : : "memory");
 8004826:	b662      	cpsie	i
}
 8004828:	46c0      	nop			@ (mov r8, r8)
	}

	interrupts();

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
 800482a:	2308      	movs	r3, #8
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	789b      	ldrb	r3, [r3, #2]
 8004830:	b25b      	sxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	da04      	bge.n	8004840 <read+0xe4>
		filler = 0xFF;
 8004836:	2317      	movs	r3, #23
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	22ff      	movs	r2, #255	@ 0xff
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e003      	b.n	8004848 <read+0xec>
	} else {
		filler = 0x00;
 8004840:	2317      	movs	r3, #23
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
 8004848:	2317      	movs	r3, #23
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	061a      	lsls	r2, r3, #24
			| (unsigned long)(data[2]) << 16
 8004850:	2108      	movs	r1, #8
 8004852:	187b      	adds	r3, r7, r1
 8004854:	789b      	ldrb	r3, [r3, #2]
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	431a      	orrs	r2, r3
			| (unsigned long)(data[1]) << 8
 800485a:	187b      	adds	r3, r7, r1
 800485c:	785b      	ldrb	r3, [r3, #1]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	4313      	orrs	r3, r2
			| (unsigned long)(data[0]) );
 8004862:	187a      	adds	r2, r7, r1
 8004864:	7812      	ldrb	r2, [r2, #0]
	value = ( (unsigned long)(filler) << 24
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

	return (long)(value);
 800486a:	68fb      	ldr	r3, [r7, #12]
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	b007      	add	sp, #28
 8004872:	bd90      	pop	{r4, r7, pc}
 8004874:	0800d77c 	.word	0x0800d77c

08004878 <read_average>:

//############################################################################################
long read_average(hx711_t *hx711, int8_t times, uint8_t channel) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	0008      	movs	r0, r1
 8004882:	0011      	movs	r1, r2
 8004884:	1cfb      	adds	r3, r7, #3
 8004886:	1c02      	adds	r2, r0, #0
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	1cbb      	adds	r3, r7, #2
 800488c:	1c0a      	adds	r2, r1, #0
 800488e:	701a      	strb	r2, [r3, #0]
	long sum = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 8004894:	230b      	movs	r3, #11
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	e013      	b.n	80048c6 <read_average+0x4e>
		sum += read(hx711, channel);
 800489e:	1cbb      	adds	r3, r7, #2
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	0011      	movs	r1, r2
 80048a6:	0018      	movs	r0, r3
 80048a8:	f7ff ff58 	bl	800475c <read>
 80048ac:	0002      	movs	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	189b      	adds	r3, r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 80048b4:	210b      	movs	r1, #11
 80048b6:	187b      	adds	r3, r7, r1
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	b25b      	sxtb	r3, r3
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	3301      	adds	r3, #1
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	187b      	adds	r3, r7, r1
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	230b      	movs	r3, #11
 80048c8:	18fa      	adds	r2, r7, r3
 80048ca:	1cfb      	adds	r3, r7, #3
 80048cc:	7812      	ldrb	r2, [r2, #0]
 80048ce:	b252      	sxtb	r2, r2
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	b25b      	sxtb	r3, r3
 80048d4:	429a      	cmp	r2, r3
 80048d6:	dbe2      	blt.n	800489e <read_average+0x26>
		//HAL_Delay(0);
	}
	return sum / times;
 80048d8:	1cfb      	adds	r3, r7, #3
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b25b      	sxtb	r3, r3
 80048de:	0019      	movs	r1, r3
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f7fb fcb5 	bl	8000250 <__divsi3>
 80048e6:	0003      	movs	r3, r0
}
 80048e8:	0018      	movs	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b004      	add	sp, #16
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <get_value>:

//############################################################################################
double get_value(hx711_t *hx711, int8_t times, uint8_t channel) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	0008      	movs	r0, r1
 80048fa:	0011      	movs	r1, r2
 80048fc:	1cfb      	adds	r3, r7, #3
 80048fe:	1c02      	adds	r2, r0, #0
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	1cbb      	adds	r3, r7, #2
 8004904:	1c0a      	adds	r2, r1, #0
 8004906:	701a      	strb	r2, [r3, #0]
	long offset = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 800490c:	1cbb      	adds	r3, r7, #2
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d103      	bne.n	800491c <get_value+0x2c>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	e002      	b.n	8004922 <get_value+0x32>
	else offset = hx711->Boffset;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	60fb      	str	r3, [r7, #12]
	return read_average(hx711, times, channel) - offset;
 8004922:	1cbb      	adds	r3, r7, #2
 8004924:	781a      	ldrb	r2, [r3, #0]
 8004926:	1cfb      	adds	r3, r7, #3
 8004928:	2100      	movs	r1, #0
 800492a:	5659      	ldrsb	r1, [r3, r1]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	0018      	movs	r0, r3
 8004930:	f7ff ffa2 	bl	8004878 <read_average>
 8004934:	0002      	movs	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	0018      	movs	r0, r3
 800493c:	f7fe fa4c 	bl	8002dd8 <__aeabi_i2d>
 8004940:	0002      	movs	r2, r0
 8004942:	000b      	movs	r3, r1
}
 8004944:	0010      	movs	r0, r2
 8004946:	0019      	movs	r1, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	b004      	add	sp, #16
 800494c:	bd80      	pop	{r7, pc}

0800494e <tare>:

//############################################################################################
void tare(hx711_t *hx711, uint8_t times, uint8_t channel) {
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	0008      	movs	r0, r1
 8004958:	0011      	movs	r1, r2
 800495a:	1cfb      	adds	r3, r7, #3
 800495c:	1c02      	adds	r2, r0, #0
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	1cbb      	adds	r3, r7, #2
 8004962:	1c0a      	adds	r2, r1, #0
 8004964:	701a      	strb	r2, [r3, #0]
	read(hx711, channel); // Change channel
 8004966:	1cbb      	adds	r3, r7, #2
 8004968:	781a      	ldrb	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0011      	movs	r1, r2
 800496e:	0018      	movs	r0, r3
 8004970:	f7ff fef4 	bl	800475c <read>
	double sum = read_average(hx711, times, channel);
 8004974:	1cfb      	adds	r3, r7, #3
 8004976:	2100      	movs	r1, #0
 8004978:	5659      	ldrsb	r1, [r3, r1]
 800497a:	1cbb      	adds	r3, r7, #2
 800497c:	781a      	ldrb	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0018      	movs	r0, r3
 8004982:	f7ff ff79 	bl	8004878 <read_average>
 8004986:	0003      	movs	r3, r0
 8004988:	0018      	movs	r0, r3
 800498a:	f7fe fa25 	bl	8002dd8 <__aeabi_i2d>
 800498e:	0002      	movs	r2, r0
 8004990:	000b      	movs	r3, r1
 8004992:	60ba      	str	r2, [r7, #8]
 8004994:	60fb      	str	r3, [r7, #12]
	set_offset(hx711, sum, channel);
 8004996:	68b8      	ldr	r0, [r7, #8]
 8004998:	68f9      	ldr	r1, [r7, #12]
 800499a:	f7fe f9e1 	bl	8002d60 <__aeabi_d2iz>
 800499e:	0001      	movs	r1, r0
 80049a0:	1cbb      	adds	r3, r7, #2
 80049a2:	781a      	ldrb	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	0018      	movs	r0, r3
 80049a8:	f7ff fe2e 	bl	8004608 <set_offset>
}
 80049ac:	46c0      	nop			@ (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b004      	add	sp, #16
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <tare_all>:

//############################################################################################
void tare_all(hx711_t *hx711, uint8_t times) {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	000a      	movs	r2, r1
 80049be:	1cfb      	adds	r3, r7, #3
 80049c0:	701a      	strb	r2, [r3, #0]
	tare(hx711, times, CHANNEL_A);
 80049c2:	1cfb      	adds	r3, r7, #3
 80049c4:	7819      	ldrb	r1, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7ff ffbf 	bl	800494e <tare>
	tare(hx711, times, CHANNEL_B);
 80049d0:	1cfb      	adds	r3, r7, #3
 80049d2:	7819      	ldrb	r1, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	0018      	movs	r0, r3
 80049da:	f7ff ffb8 	bl	800494e <tare>
}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b002      	add	sp, #8
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <get_weight>:

//############################################################################################
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 80049e6:	b5b0      	push	{r4, r5, r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	0008      	movs	r0, r1
 80049f0:	0011      	movs	r1, r2
 80049f2:	1cfb      	adds	r3, r7, #3
 80049f4:	1c02      	adds	r2, r0, #0
 80049f6:	701a      	strb	r2, [r3, #0]
 80049f8:	1cbb      	adds	r3, r7, #2
 80049fa:	1c0a      	adds	r2, r1, #0
 80049fc:	701a      	strb	r2, [r3, #0]
  // Read load cell
	read(hx711, channel);
 80049fe:	1cbb      	adds	r3, r7, #2
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0011      	movs	r1, r2
 8004a06:	0018      	movs	r0, r3
 8004a08:	f7ff fea8 	bl	800475c <read>
	float scale = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 8004a10:	1cbb      	adds	r3, r7, #2
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d103      	bne.n	8004a20 <get_weight+0x3a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e002      	b.n	8004a26 <get_weight+0x40>
	else scale = hx711->Bscale;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	60fb      	str	r3, [r7, #12]
	return get_value(hx711, times, channel) / scale;
 8004a26:	1cbb      	adds	r3, r7, #2
 8004a28:	781a      	ldrb	r2, [r3, #0]
 8004a2a:	1cfb      	adds	r3, r7, #3
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	5659      	ldrsb	r1, [r3, r1]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	0018      	movs	r0, r3
 8004a34:	f7ff ff5c 	bl	80048f0 <get_value>
 8004a38:	0004      	movs	r4, r0
 8004a3a:	000d      	movs	r5, r1
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7fe fa1d 	bl	8002e7c <__aeabi_f2d>
 8004a42:	0002      	movs	r2, r0
 8004a44:	000b      	movs	r3, r1
 8004a46:	0020      	movs	r0, r4
 8004a48:	0029      	movs	r1, r5
 8004a4a:	f7fc febf 	bl	80017cc <__aeabi_ddiv>
 8004a4e:	0002      	movs	r2, r0
 8004a50:	000b      	movs	r3, r1
 8004a52:	0010      	movs	r0, r2
 8004a54:	0019      	movs	r1, r3
 8004a56:	f7fe fa59 	bl	8002f0c <__aeabi_d2f>
 8004a5a:	1c03      	adds	r3, r0, #0
}
 8004a5c:	1c18      	adds	r0, r3, #0
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b004      	add	sp, #16
 8004a62:	bdb0      	pop	{r4, r5, r7, pc}

08004a64 <NextionAddComp>:
 */

#include "Nextion.h"

uint8_t NextionAddComp(Nextion* nex, NexComp* _nexcomp, char* objectname, uint8_t __page, uint8_t __id, void (*callbackFuncOnPress)(), void (*callbackFuncOnRelease)())
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	001a      	movs	r2, r3
 8004a72:	1cfb      	adds	r3, r7, #3
 8004a74:	701a      	strb	r2, [r3, #0]
	//Make space before passing the object name to the nexcomp struct
	_nexcomp->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7fb fb43 	bl	8000104 <strlen>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	3301      	adds	r3, #1
 8004a82:	0018      	movs	r0, r3
 8004a84:	f005 feda 	bl	800a83c <malloc>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	001a      	movs	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	60da      	str	r2, [r3, #12]
	//Pass the object name to the struct
	strcpy(_nexcomp->objname, objectname);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	0011      	movs	r1, r2
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f006 fdea 	bl	800b672 <strcpy>

	//Pass the corresponding data from component to component struct
	_nexcomp->_id = __id;
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	2318      	movs	r3, #24
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	7053      	strb	r3, [r2, #1]
	_nexcomp->_page = __page;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	1cfa      	adds	r2, r7, #3
 8004aac:	7812      	ldrb	r2, [r2, #0]
 8004aae:	701a      	strb	r2, [r3, #0]

	//Add the component struct to the list on the Nextion Struct
	nex->_NexCompArr[nex->_NexCompCount] = _nexcomp;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	22e8      	movs	r2, #232	@ 0xe8
 8004ab4:	5c9b      	ldrb	r3, [r3, r2]
 8004ab6:	001a      	movs	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	321a      	adds	r2, #26
 8004abc:	0092      	lsls	r2, r2, #2
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	50d1      	str	r1, [r2, r3]
	nex->_NexCompCount++;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	22e8      	movs	r2, #232	@ 0xe8
 8004ac6:	5c9b      	ldrb	r3, [r3, r2]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	b2d9      	uxtb	r1, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	22e8      	movs	r2, #232	@ 0xe8
 8004ad0:	5499      	strb	r1, [r3, r2]

	//Bind the correct callback functions together
	_nexcomp->callbackOnPress = callbackFuncOnPress;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	605a      	str	r2, [r3, #4]
	_nexcomp->callbackOnRelease = callbackFuncOnRelease;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6a3a      	ldr	r2, [r7, #32]
 8004adc:	609a      	str	r2, [r3, #8]

	//Return OK
	return 0;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b004      	add	sp, #16
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <NextionInit>:

uint8_t NextionInit(Nextion *nex, UART_HandleTypeDef *nextionUARTHandle)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
	//Pass the used UART handle to the struct
	nex->nextionUARTHandle = nextionUARTHandle;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	601a      	str	r2, [r3, #0]

	//Start the parsing counters from zero
	nex->_arrCount = 0;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2265      	movs	r2, #101	@ 0x65
 8004afc:	2100      	movs	r1, #0
 8004afe:	5499      	strb	r1, [r3, r2]
	nex->_pkgCount = 0;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2266      	movs	r2, #102	@ 0x66
 8004b04:	2100      	movs	r1, #0
 8004b06:	5499      	strb	r1, [r3, r2]

	//Start UART transaction using DMA
	HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3364      	adds	r3, #100	@ 0x64
 8004b10:	2201      	movs	r2, #1
 8004b12:	0019      	movs	r1, r3
 8004b14:	f003 fb0e 	bl	8008134 <HAL_UART_Receive_IT>

	//Start the component count variable from zero
	nex->_NexCompCount  = 0;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	22e8      	movs	r2, #232	@ 0xe8
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	5499      	strb	r1, [r3, r2]

	//Return OK
	return 0;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b002      	add	sp, #8
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <NextionUpdate>:

uint8_t NextionUpdate(UART_HandleTypeDef *huart, Nextion *nex)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
	if(huart->Instance == (nex->nextionUARTHandle->Instance))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d000      	beq.n	8004b44 <NextionUpdate+0x1a>
 8004b42:	e101      	b.n	8004d48 <NextionUpdate+0x21e>
	{
		//Add the received byte to the array and increment the counter afterwards
		nex->_RxDataArr[nex->_arrCount] = nex->_RxData;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2265      	movs	r2, #101	@ 0x65
 8004b48:	5c9b      	ldrb	r3, [r3, r2]
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2264      	movs	r2, #100	@ 0x64
 8004b50:	5c9a      	ldrb	r2, [r3, r2]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	185b      	adds	r3, r3, r1
 8004b56:	711a      	strb	r2, [r3, #4]
		nex->_arrCount++;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2265      	movs	r2, #101	@ 0x65
 8004b5c:	5c9b      	ldrb	r3, [r3, r2]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	b2d9      	uxtb	r1, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2265      	movs	r2, #101	@ 0x65
 8004b66:	5499      	strb	r1, [r3, r2]

		//Count 0xFF
		if(nex->_RxData == 0xFF)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2264      	movs	r2, #100	@ 0x64
 8004b6c:	5c9b      	ldrb	r3, [r3, r2]
 8004b6e:	2bff      	cmp	r3, #255	@ 0xff
 8004b70:	d108      	bne.n	8004b84 <NextionUpdate+0x5a>
			nex->_pkgCount++;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2266      	movs	r2, #102	@ 0x66
 8004b76:	5c9b      	ldrb	r3, [r3, r2]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	b2d9      	uxtb	r1, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2266      	movs	r2, #102	@ 0x66
 8004b80:	5499      	strb	r1, [r3, r2]
 8004b82:	e003      	b.n	8004b8c <NextionUpdate+0x62>
		else
			nex->_pkgCount = 0;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2266      	movs	r2, #102	@ 0x66
 8004b88:	2100      	movs	r1, #0
 8004b8a:	5499      	strb	r1, [r3, r2]

		//Assume a package is received after three 0xFF commands,
		//and start processing the data
		if(nex->_pkgCount == 3)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2266      	movs	r2, #102	@ 0x66
 8004b90:	5c9b      	ldrb	r3, [r3, r2]
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d000      	beq.n	8004b98 <NextionUpdate+0x6e>
 8004b96:	e0cf      	b.n	8004d38 <NextionUpdate+0x20e>
		{
			//Determine the length (count) of the data
			uint8_t count = 0, FFCount = 0;
 8004b98:	230f      	movs	r3, #15
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	230e      	movs	r3, #14
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; FFCount < 3; i++)
 8004ba8:	230d      	movs	r3, #13
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e019      	b.n	8004be6 <NextionUpdate+0xbc>
			{
				count++;
 8004bb2:	210f      	movs	r1, #15
 8004bb4:	187b      	adds	r3, r7, r1
 8004bb6:	781a      	ldrb	r2, [r3, #0]
 8004bb8:	187b      	adds	r3, r7, r1
 8004bba:	3201      	adds	r2, #1
 8004bbc:	701a      	strb	r2, [r3, #0]
				if(nex->_RxDataArr[i] == 0xFF) FFCount++;
 8004bbe:	230d      	movs	r3, #13
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	18d3      	adds	r3, r2, r3
 8004bc8:	791b      	ldrb	r3, [r3, #4]
 8004bca:	2bff      	cmp	r3, #255	@ 0xff
 8004bcc:	d105      	bne.n	8004bda <NextionUpdate+0xb0>
 8004bce:	210e      	movs	r1, #14
 8004bd0:	187b      	adds	r3, r7, r1
 8004bd2:	781a      	ldrb	r2, [r3, #0]
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	3201      	adds	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; FFCount < 3; i++)
 8004bda:	210d      	movs	r1, #13
 8004bdc:	187b      	adds	r3, r7, r1
 8004bde:	781a      	ldrb	r2, [r3, #0]
 8004be0:	187b      	adds	r3, r7, r1
 8004be2:	3201      	adds	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	230e      	movs	r3, #14
 8004be8:	18fb      	adds	r3, r7, r3
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d9e0      	bls.n	8004bb2 <NextionUpdate+0x88>
			}

			//In case of a touch event call the callback function accordingly,
			if(nex->_RxDataArr[0] == NEX_RET_EVENT_TOUCH_HEAD)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	791b      	ldrb	r3, [r3, #4]
 8004bf4:	2b65      	cmp	r3, #101	@ 0x65
 8004bf6:	d154      	bne.n	8004ca2 <NextionUpdate+0x178>
			{
				//Loop through the component struct array,
				for(uint8_t i = 0; i < nex->_NexCompCount; i++)
 8004bf8:	230c      	movs	r3, #12
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e047      	b.n	8004c92 <NextionUpdate+0x168>
				{
					//Detect the affected component by its Page and ID
					if( (nex->_RxDataArr[2] == (nex->_NexCompArr[i]->_id)) && (nex->_RxDataArr[1] == (nex->_NexCompArr[i]->_page)) )
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	799a      	ldrb	r2, [r3, #6]
 8004c06:	200c      	movs	r0, #12
 8004c08:	183b      	adds	r3, r7, r0
 8004c0a:	7819      	ldrb	r1, [r3, #0]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	311a      	adds	r1, #26
 8004c10:	0089      	lsls	r1, r1, #2
 8004c12:	58cb      	ldr	r3, [r1, r3]
 8004c14:	785b      	ldrb	r3, [r3, #1]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d135      	bne.n	8004c86 <NextionUpdate+0x15c>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	795a      	ldrb	r2, [r3, #5]
 8004c1e:	183b      	adds	r3, r7, r0
 8004c20:	7819      	ldrb	r1, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	311a      	adds	r1, #26
 8004c26:	0089      	lsls	r1, r1, #2
 8004c28:	58cb      	ldr	r3, [r1, r3]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d12a      	bne.n	8004c86 <NextionUpdate+0x15c>
					{
						//Call the desired On Press or On Release callback function,
						if((nex->_RxDataArr[3] == NEX_EVENT_ON_PRESS) && (nex->_NexCompArr[i]->callbackOnPress != NULL))
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	79db      	ldrb	r3, [r3, #7]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d110      	bne.n	8004c5a <NextionUpdate+0x130>
 8004c38:	183b      	adds	r3, r7, r0
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	321a      	adds	r2, #26
 8004c40:	0092      	lsls	r2, r2, #2
 8004c42:	58d3      	ldr	r3, [r2, r3]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <NextionUpdate+0x130>
							nex->_NexCompArr[i]->callbackOnPress();
 8004c4a:	183b      	adds	r3, r7, r0
 8004c4c:	781a      	ldrb	r2, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	321a      	adds	r2, #26
 8004c52:	0092      	lsls	r2, r2, #2
 8004c54:	58d3      	ldr	r3, [r2, r3]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4798      	blx	r3
						if((nex->_RxDataArr[3] == NEX_EVENT_ON_RELEASE) && (nex->_NexCompArr[i]->callbackOnRelease != NULL))
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	79db      	ldrb	r3, [r3, #7]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d111      	bne.n	8004c86 <NextionUpdate+0x15c>
 8004c62:	210c      	movs	r1, #12
 8004c64:	187b      	adds	r3, r7, r1
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	321a      	adds	r2, #26
 8004c6c:	0092      	lsls	r2, r2, #2
 8004c6e:	58d3      	ldr	r3, [r2, r3]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <NextionUpdate+0x15c>
							nex->_NexCompArr[i]->callbackOnRelease();
 8004c76:	187b      	adds	r3, r7, r1
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	321a      	adds	r2, #26
 8004c7e:	0092      	lsls	r2, r2, #2
 8004c80:	58d3      	ldr	r3, [r2, r3]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4798      	blx	r3
				for(uint8_t i = 0; i < nex->_NexCompCount; i++)
 8004c86:	210c      	movs	r1, #12
 8004c88:	187b      	adds	r3, r7, r1
 8004c8a:	781a      	ldrb	r2, [r3, #0]
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	3201      	adds	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	22e8      	movs	r2, #232	@ 0xe8
 8004c96:	5c9b      	ldrb	r3, [r3, r2]
 8004c98:	220c      	movs	r2, #12
 8004c9a:	18ba      	adds	r2, r7, r2
 8004c9c:	7812      	ldrb	r2, [r2, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d3af      	bcc.n	8004c02 <NextionUpdate+0xd8>
					}
				}
			}

			//If the received package contains string data
			if(nex->_RxDataArr[0] == NEX_RET_STRING_HEAD)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	791b      	ldrb	r3, [r3, #4]
 8004ca6:	2b70      	cmp	r3, #112	@ 0x70
 8004ca8:	d127      	bne.n	8004cfa <NextionUpdate+0x1d0>
			{
				nex->NextTextLen = 0;
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	232a      	movs	r3, #42	@ 0x2a
 8004cae:	33ff      	adds	r3, #255	@ 0xff
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	54d1      	strb	r1, [r2, r3]
				for(int i = 0; i < (count - 4); i++)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	e018      	b.n	8004cec <NextionUpdate+0x1c2>
				{
					nex->NexTextBuff[i] = nex->_RxDataArr[i+1];
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	18d3      	adds	r3, r2, r3
 8004cc2:	7918      	ldrb	r0, [r3, #4]
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	21e9      	movs	r1, #233	@ 0xe9
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	18d3      	adds	r3, r2, r3
 8004ccc:	185b      	adds	r3, r3, r1
 8004cce:	1c02      	adds	r2, r0, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
					nex->NextTextLen++;
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	232a      	movs	r3, #42	@ 0x2a
 8004cd6:	33ff      	adds	r3, #255	@ 0xff
 8004cd8:	5cd3      	ldrb	r3, [r2, r3]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	b2d9      	uxtb	r1, r3
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	232a      	movs	r3, #42	@ 0x2a
 8004ce2:	33ff      	adds	r3, #255	@ 0xff
 8004ce4:	54d1      	strb	r1, [r2, r3]
				for(int i = 0; i < (count - 4); i++)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	60bb      	str	r3, [r7, #8]
 8004cec:	230f      	movs	r3, #15
 8004cee:	18fb      	adds	r3, r7, r3
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	3b04      	subs	r3, #4
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	dbdf      	blt.n	8004cba <NextionUpdate+0x190>
				}
			}

			//If the received package contains integer data
			if(nex->_RxDataArr[0] == NEX_RET_NUMBER_HEAD)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	791b      	ldrb	r3, [r3, #4]
 8004cfe:	2b71      	cmp	r3, #113	@ 0x71
 8004d00:	d112      	bne.n	8004d28 <NextionUpdate+0x1fe>
			{
				nex->NextNumBuff = ((uint32_t)nex->_RxDataArr[4]<<24)|((uint32_t)nex->_RxDataArr[3]<<16)|(nex->_RxDataArr[2]<<8)|(nex->_RxDataArr[1]);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	7a1b      	ldrb	r3, [r3, #8]
 8004d06:	061a      	lsls	r2, r3, #24
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	79db      	ldrb	r3, [r3, #7]
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	799b      	ldrb	r3, [r3, #6]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	4313      	orrs	r3, r2
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	7952      	ldrb	r2, [r2, #5]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	0019      	movs	r1, r3
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	2396      	movs	r3, #150	@ 0x96
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	50d1      	str	r1, [r2, r3]
			}

			//Reset the buffer counters
			nex->_pkgCount = 0;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2266      	movs	r2, #102	@ 0x66
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	5499      	strb	r1, [r3, r2]
			nex->_arrCount = 0;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2265      	movs	r2, #101	@ 0x65
 8004d34:	2100      	movs	r1, #0
 8004d36:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	3364      	adds	r3, #100	@ 0x64
 8004d40:	2201      	movs	r2, #1
 8004d42:	0019      	movs	r1, r3
 8004d44:	f003 f9f6 	bl	8008134 <HAL_UART_Receive_IT>
	}

	//Return OK
	return 0;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b004      	add	sp, #16
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <NextionSetText>:
	//Return OK
	return 0;
}

uint8_t NextionSetText(Nextion *nex, NexComp *comp, char *usertext)
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b095      	sub	sp, #84	@ 0x54
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
	//Allocate a static buffer for combining the transfer command string
	char transmitBuff[NEXTION_TEXT_BUFF_LEN] = {0};
 8004d60:	2410      	movs	r4, #16
 8004d62:	193b      	adds	r3, r7, r4
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	223c      	movs	r2, #60	@ 0x3c
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f006 fbe6 	bl	800b540 <memset>

	//Combine required commands in a single string
	sprintf(transmitBuff, "%s.txt=\"%s\"", comp->objname, usertext);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4907      	ldr	r1, [pc, #28]	@ (8004d98 <NextionSetText+0x44>)
 8004d7c:	1938      	adds	r0, r7, r4
 8004d7e:	f006 fb73 	bl	800b468 <siprintf>

	//Send the combined command to Nextion and wait for the received answer
	NextionSendCommand(nex, transmitBuff);
 8004d82:	193a      	adds	r2, r7, r4
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	0011      	movs	r1, r2
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f000 f807 	bl	8004d9c <NextionSendCommand>

	//Return OK
	return 0;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	0018      	movs	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b015      	add	sp, #84	@ 0x54
 8004d96:	bd90      	pop	{r4, r7, pc}
 8004d98:	0800d78c 	.word	0x0800d78c

08004d9c <NextionSendCommand>:
	return 0;
}

char ENDTERMS[]={255,255,255};
uint8_t NextionSendCommand(Nextion *nex, char *_command)
{
 8004d9c:	b590      	push	{r4, r7, lr}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(nex->nextionUARTHandle, (uint8_t *)_command, strlen((const char*)_command), NEXTION_TIMEOUT);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681c      	ldr	r4, [r3, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	0018      	movs	r0, r3
 8004dae:	f7fb f9a9 	bl	8000104 <strlen>
 8004db2:	0003      	movs	r3, r0
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	23fa      	movs	r3, #250	@ 0xfa
 8004dba:	0020      	movs	r0, r4
 8004dbc:	f003 f86e 	bl	8007e9c <HAL_UART_Transmit>
	NextionEndCommand(nex);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f000 f806 	bl	8004dd4 <NextionEndCommand>

	//Return OK
	return 0;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b003      	add	sp, #12
 8004dd0:	bd90      	pop	{r4, r7, pc}
	...

08004dd4 <NextionEndCommand>:

uint8_t NextionEndCommand(Nextion *nex)
{
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	uint8_t EndCommand[3] = {255, 255, 255};
 8004ddc:	240c      	movs	r4, #12
 8004dde:	193b      	adds	r3, r7, r4
 8004de0:	4a0a      	ldr	r2, [pc, #40]	@ (8004e0c <NextionEndCommand+0x38>)
 8004de2:	8811      	ldrh	r1, [r2, #0]
 8004de4:	8019      	strh	r1, [r3, #0]
 8004de6:	7892      	ldrb	r2, [r2, #2]
 8004de8:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(nex->nextionUARTHandle, EndCommand, 3, NEXTION_TIMEOUT);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	1939      	adds	r1, r7, r4
 8004df0:	23fa      	movs	r3, #250	@ 0xfa
 8004df2:	2203      	movs	r2, #3
 8004df4:	f003 f852 	bl	8007e9c <HAL_UART_Transmit>
	NextionRestartIT(nex);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f000 f808 	bl	8004e10 <NextionRestartIT>

	//Return OK
	return 0;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b005      	add	sp, #20
 8004e08:	bd90      	pop	{r4, r7, pc}
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	0800d7c8 	.word	0x0800d7c8

08004e10 <NextionRestartIT>:

//Following two functions are not needed anymore and will be removed in the future,
uint8_t NextionRestartIT(Nextion *nex)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3364      	adds	r3, #100	@ 0x64
 8004e20:	2201      	movs	r2, #1
 8004e22:	0019      	movs	r1, r3
 8004e24:	f003 f986 	bl	8008134 <HAL_UART_Receive_IT>

	//Return OK
	return 0;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b002      	add	sp, #8
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004e3a:	1dfb      	adds	r3, r7, #7
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e40:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <HAL_Init+0x3c>)
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <HAL_Init+0x3c>)
 8004e46:	2180      	movs	r1, #128	@ 0x80
 8004e48:	0049      	lsls	r1, r1, #1
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e4e:	2000      	movs	r0, #0
 8004e50:	f000 f810 	bl	8004e74 <HAL_InitTick>
 8004e54:	1e03      	subs	r3, r0, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004e58:	1dfb      	adds	r3, r7, #7
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e001      	b.n	8004e64 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004e60:	f7ff f858 	bl	8003f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004e64:	1dfb      	adds	r3, r7, #7
 8004e66:	781b      	ldrb	r3, [r3, #0]
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b002      	add	sp, #8
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40022000 	.word	0x40022000

08004e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004e7c:	230f      	movs	r3, #15
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004e84:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <HAL_InitTick+0x88>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d02b      	beq.n	8004ee4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f00 <HAL_InitTick+0x8c>)
 8004e8e:	681c      	ldr	r4, [r3, #0]
 8004e90:	4b1a      	ldr	r3, [pc, #104]	@ (8004efc <HAL_InitTick+0x88>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	0019      	movs	r1, r3
 8004e96:	23fa      	movs	r3, #250	@ 0xfa
 8004e98:	0098      	lsls	r0, r3, #2
 8004e9a:	f7fb f94f 	bl	800013c <__udivsi3>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	0019      	movs	r1, r3
 8004ea2:	0020      	movs	r0, r4
 8004ea4:	f7fb f94a 	bl	800013c <__udivsi3>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 ff93 	bl	8005dd6 <HAL_SYSTICK_Config>
 8004eb0:	1e03      	subs	r3, r0, #0
 8004eb2:	d112      	bne.n	8004eda <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d80a      	bhi.n	8004ed0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	425b      	negs	r3, r3
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f000 ff62 	bl	8005d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f04 <HAL_InitTick+0x90>)
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e00d      	b.n	8004eec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004ed0:	230f      	movs	r3, #15
 8004ed2:	18fb      	adds	r3, r7, r3
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e008      	b.n	8004eec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004eda:	230f      	movs	r3, #15
 8004edc:	18fb      	adds	r3, r7, r3
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	e003      	b.n	8004eec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ee4:	230f      	movs	r3, #15
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	2201      	movs	r2, #1
 8004eea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004eec:	230f      	movs	r3, #15
 8004eee:	18fb      	adds	r3, r7, r3
 8004ef0:	781b      	ldrb	r3, [r3, #0]
}
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b005      	add	sp, #20
 8004ef8:	bd90      	pop	{r4, r7, pc}
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	2000001c 	.word	0x2000001c
 8004f00:	20000014 	.word	0x20000014
 8004f04:	20000018 	.word	0x20000018

08004f08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f0c:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <HAL_IncTick+0x1c>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	001a      	movs	r2, r3
 8004f12:	4b05      	ldr	r3, [pc, #20]	@ (8004f28 <HAL_IncTick+0x20>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	18d2      	adds	r2, r2, r3
 8004f18:	4b03      	ldr	r3, [pc, #12]	@ (8004f28 <HAL_IncTick+0x20>)
 8004f1a:	601a      	str	r2, [r3, #0]
}
 8004f1c:	46c0      	nop			@ (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	2000001c 	.word	0x2000001c
 8004f28:	2000077c 	.word	0x2000077c

08004f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f30:	4b02      	ldr	r3, [pc, #8]	@ (8004f3c <HAL_GetTick+0x10>)
 8004f32:	681b      	ldr	r3, [r3, #0]
}
 8004f34:	0018      	movs	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	46c0      	nop			@ (mov r8, r8)
 8004f3c:	2000077c 	.word	0x2000077c

08004f40 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a05      	ldr	r2, [pc, #20]	@ (8004f64 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004f50:	401a      	ands	r2, r3
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	601a      	str	r2, [r3, #0]
}
 8004f5a:	46c0      	nop			@ (mov r8, r8)
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	b002      	add	sp, #8
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	fe3fffff 	.word	0xfe3fffff

08004f68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	23e0      	movs	r3, #224	@ 0xe0
 8004f76:	045b      	lsls	r3, r3, #17
 8004f78:	4013      	ands	r3, r2
}
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b002      	add	sp, #8
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	2104      	movs	r1, #4
 8004f96:	400a      	ands	r2, r1
 8004f98:	2107      	movs	r1, #7
 8004f9a:	4091      	lsls	r1, r2
 8004f9c:	000a      	movs	r2, r1
 8004f9e:	43d2      	mvns	r2, r2
 8004fa0:	401a      	ands	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2104      	movs	r1, #4
 8004fa6:	400b      	ands	r3, r1
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	4099      	lsls	r1, r3
 8004fac:	000b      	movs	r3, r1
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004fb4:	46c0      	nop			@ (mov r8, r8)
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b004      	add	sp, #16
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	2104      	movs	r1, #4
 8004fce:	400a      	ands	r2, r1
 8004fd0:	2107      	movs	r1, #7
 8004fd2:	4091      	lsls	r1, r2
 8004fd4:	000a      	movs	r2, r1
 8004fd6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2104      	movs	r1, #4
 8004fdc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004fde:	40da      	lsrs	r2, r3
 8004fe0:	0013      	movs	r3, r2
}
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b002      	add	sp, #8
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	23c0      	movs	r3, #192	@ 0xc0
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d101      	bne.n	8005002 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005002:	2300      	movs	r3, #0
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b002      	add	sp, #8
 800500a:	bd80      	pop	{r7, pc}

0800500c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	211f      	movs	r1, #31
 8005020:	400a      	ands	r2, r1
 8005022:	210f      	movs	r1, #15
 8005024:	4091      	lsls	r1, r2
 8005026:	000a      	movs	r2, r1
 8005028:	43d2      	mvns	r2, r2
 800502a:	401a      	ands	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	0e9b      	lsrs	r3, r3, #26
 8005030:	210f      	movs	r1, #15
 8005032:	4019      	ands	r1, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	201f      	movs	r0, #31
 8005038:	4003      	ands	r3, r0
 800503a:	4099      	lsls	r1, r3
 800503c:	000b      	movs	r3, r1
 800503e:	431a      	orrs	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005044:	46c0      	nop			@ (mov r8, r8)
 8005046:	46bd      	mov	sp, r7
 8005048:	b004      	add	sp, #16
 800504a:	bd80      	pop	{r7, pc}

0800504c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	035b      	lsls	r3, r3, #13
 800505e:	0b5b      	lsrs	r3, r3, #13
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	46bd      	mov	sp, r7
 800506a:	b002      	add	sp, #8
 800506c:	bd80      	pop	{r7, pc}

0800506e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	0352      	lsls	r2, r2, #13
 8005080:	0b52      	lsrs	r2, r2, #13
 8005082:	43d2      	mvns	r2, r2
 8005084:	401a      	ands	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	b002      	add	sp, #8
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	0212      	lsls	r2, r2, #8
 80050a8:	43d2      	mvns	r2, r2
 80050aa:	401a      	ands	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	400b      	ands	r3, r1
 80050b4:	4904      	ldr	r1, [pc, #16]	@ (80050c8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80050b6:	400b      	ands	r3, r1
 80050b8:	431a      	orrs	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80050be:	46c0      	nop			@ (mov r8, r8)
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b004      	add	sp, #16
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	07ffff00 	.word	0x07ffff00

080050cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4a05      	ldr	r2, [pc, #20]	@ (80050f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80050da:	4013      	ands	r3, r2
 80050dc:	2280      	movs	r2, #128	@ 0x80
 80050de:	0552      	lsls	r2, r2, #21
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80050e6:	46c0      	nop			@ (mov r8, r8)
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b002      	add	sp, #8
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	6fffffe8 	.word	0x6fffffe8

080050f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	2380      	movs	r3, #128	@ 0x80
 8005102:	055b      	lsls	r3, r3, #21
 8005104:	401a      	ands	r2, r3
 8005106:	2380      	movs	r3, #128	@ 0x80
 8005108:	055b      	lsls	r3, r3, #21
 800510a:	429a      	cmp	r2, r3
 800510c:	d101      	bne.n	8005112 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005112:	2300      	movs	r3, #0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b002      	add	sp, #8
 800511a:	bd80      	pop	{r7, pc}

0800511c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	4a04      	ldr	r2, [pc, #16]	@ (800513c <LL_ADC_Enable+0x20>)
 800512a:	4013      	ands	r3, r2
 800512c:	2201      	movs	r2, #1
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005134:	46c0      	nop			@ (mov r8, r8)
 8005136:	46bd      	mov	sp, r7
 8005138:	b002      	add	sp, #8
 800513a:	bd80      	pop	{r7, pc}
 800513c:	7fffffe8 	.word	0x7fffffe8

08005140 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a04      	ldr	r2, [pc, #16]	@ (8005160 <LL_ADC_Disable+0x20>)
 800514e:	4013      	ands	r3, r2
 8005150:	2202      	movs	r2, #2
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005158:	46c0      	nop			@ (mov r8, r8)
 800515a:	46bd      	mov	sp, r7
 800515c:	b002      	add	sp, #8
 800515e:	bd80      	pop	{r7, pc}
 8005160:	7fffffe8 	.word	0x7fffffe8

08005164 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2201      	movs	r2, #1
 8005172:	4013      	ands	r3, r2
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <LL_ADC_IsEnabled+0x18>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <LL_ADC_IsEnabled+0x1a>
 800517c:	2300      	movs	r3, #0
}
 800517e:	0018      	movs	r0, r3
 8005180:	46bd      	mov	sp, r7
 8005182:	b002      	add	sp, #8
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	4a04      	ldr	r2, [pc, #16]	@ (80051a8 <LL_ADC_REG_StartConversion+0x20>)
 8005196:	4013      	ands	r3, r2
 8005198:	2204      	movs	r2, #4
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80051a0:	46c0      	nop			@ (mov r8, r8)
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b002      	add	sp, #8
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	7fffffe8 	.word	0x7fffffe8

080051ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2204      	movs	r2, #4
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d101      	bne.n	80051c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	0018      	movs	r0, r3
 80051c8:	46bd      	mov	sp, r7
 80051ca:	b002      	add	sp, #8
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051d8:	231f      	movs	r3, #31
 80051da:	18fb      	adds	r3, r7, r3
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e17f      	b.n	80054f6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0018      	movs	r0, r3
 8005202:	f7fe feab 	bl	8003f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2254      	movs	r2, #84	@ 0x54
 8005210:	2100      	movs	r1, #0
 8005212:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	0018      	movs	r0, r3
 800521a:	f7ff ff6b 	bl	80050f4 <LL_ADC_IsInternalRegulatorEnabled>
 800521e:	1e03      	subs	r3, r0, #0
 8005220:	d115      	bne.n	800524e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	0018      	movs	r0, r3
 8005228:	f7ff ff50 	bl	80050cc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800522c:	4bb4      	ldr	r3, [pc, #720]	@ (8005500 <HAL_ADC_Init+0x330>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	49b4      	ldr	r1, [pc, #720]	@ (8005504 <HAL_ADC_Init+0x334>)
 8005232:	0018      	movs	r0, r3
 8005234:	f7fa ff82 	bl	800013c <__udivsi3>
 8005238:	0003      	movs	r3, r0
 800523a:	3301      	adds	r3, #1
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005240:	e002      	b.n	8005248 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3b01      	subs	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f9      	bne.n	8005242 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	0018      	movs	r0, r3
 8005254:	f7ff ff4e 	bl	80050f4 <LL_ADC_IsInternalRegulatorEnabled>
 8005258:	1e03      	subs	r3, r0, #0
 800525a:	d10f      	bne.n	800527c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005260:	2210      	movs	r2, #16
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526c:	2201      	movs	r2, #1
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005274:	231f      	movs	r3, #31
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	2201      	movs	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	0018      	movs	r0, r3
 8005282:	f7ff ff93 	bl	80051ac <LL_ADC_REG_IsConversionOngoing>
 8005286:	0003      	movs	r3, r0
 8005288:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528e:	2210      	movs	r2, #16
 8005290:	4013      	ands	r3, r2
 8005292:	d000      	beq.n	8005296 <HAL_ADC_Init+0xc6>
 8005294:	e122      	b.n	80054dc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d000      	beq.n	800529e <HAL_ADC_Init+0xce>
 800529c:	e11e      	b.n	80054dc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a2:	4a99      	ldr	r2, [pc, #612]	@ (8005508 <HAL_ADC_Init+0x338>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	2202      	movs	r2, #2
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	0018      	movs	r0, r3
 80052b4:	f7ff ff56 	bl	8005164 <LL_ADC_IsEnabled>
 80052b8:	1e03      	subs	r3, r0, #0
 80052ba:	d000      	beq.n	80052be <HAL_ADC_Init+0xee>
 80052bc:	e0ad      	b.n	800541a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	7e1b      	ldrb	r3, [r3, #24]
 80052c6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80052c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	7e5b      	ldrb	r3, [r3, #25]
 80052ce:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80052d0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	7e9b      	ldrb	r3, [r3, #26]
 80052d6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80052d8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_ADC_Init+0x118>
 80052e2:	2380      	movs	r3, #128	@ 0x80
 80052e4:	015b      	lsls	r3, r3, #5
 80052e6:	e000      	b.n	80052ea <HAL_ADC_Init+0x11a>
 80052e8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80052ea:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80052f0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	da04      	bge.n	8005304 <HAL_ADC_Init+0x134>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	e001      	b.n	8005308 <HAL_ADC_Init+0x138>
 8005304:	2380      	movs	r3, #128	@ 0x80
 8005306:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8005308:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	212c      	movs	r1, #44	@ 0x2c
 800530e:	5c5b      	ldrb	r3, [r3, r1]
 8005310:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005312:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4313      	orrs	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	5c9b      	ldrb	r3, [r3, r2]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d115      	bne.n	8005350 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	7e9b      	ldrb	r3, [r3, #26]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d105      	bne.n	8005338 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2280      	movs	r2, #128	@ 0x80
 8005330:	0252      	lsls	r2, r2, #9
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	e00b      	b.n	8005350 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533c:	2220      	movs	r2, #32
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005348:	2201      	movs	r2, #1
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800535c:	23e0      	movs	r3, #224	@ 0xe0
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005366:	4313      	orrs	r3, r2
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4313      	orrs	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4a65      	ldr	r2, [pc, #404]	@ (800550c <HAL_ADC_Init+0x33c>)
 8005376:	4013      	ands	r3, r2
 8005378:	0019      	movs	r1, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	430a      	orrs	r2, r1
 8005382:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	0f9b      	lsrs	r3, r3, #30
 800538a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005390:	4313      	orrs	r3, r2
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	223c      	movs	r2, #60	@ 0x3c
 800539c:	5c9b      	ldrb	r3, [r3, r2]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d111      	bne.n	80053c6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	0f9b      	lsrs	r3, r3, #30
 80053a8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80053ae:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80053b4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80053ba:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	2201      	movs	r2, #1
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	4a50      	ldr	r2, [pc, #320]	@ (8005510 <HAL_ADC_Init+0x340>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	0019      	movs	r1, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	430a      	orrs	r2, r1
 80053da:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	23c0      	movs	r3, #192	@ 0xc0
 80053e2:	061b      	lsls	r3, r3, #24
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d018      	beq.n	800541a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80053ec:	2380      	movs	r3, #128	@ 0x80
 80053ee:	05db      	lsls	r3, r3, #23
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d012      	beq.n	800541a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80053f8:	2380      	movs	r3, #128	@ 0x80
 80053fa:	061b      	lsls	r3, r3, #24
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d00c      	beq.n	800541a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005400:	4b44      	ldr	r3, [pc, #272]	@ (8005514 <HAL_ADC_Init+0x344>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a44      	ldr	r2, [pc, #272]	@ (8005518 <HAL_ADC_Init+0x348>)
 8005406:	4013      	ands	r3, r2
 8005408:	0019      	movs	r1, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	23f0      	movs	r3, #240	@ 0xf0
 8005410:	039b      	lsls	r3, r3, #14
 8005412:	401a      	ands	r2, r3
 8005414:	4b3f      	ldr	r3, [pc, #252]	@ (8005514 <HAL_ADC_Init+0x344>)
 8005416:	430a      	orrs	r2, r1
 8005418:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005422:	001a      	movs	r2, r3
 8005424:	2100      	movs	r1, #0
 8005426:	f7ff fdac 	bl	8004f82 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005432:	493a      	ldr	r1, [pc, #232]	@ (800551c <HAL_ADC_Init+0x34c>)
 8005434:	001a      	movs	r2, r3
 8005436:	f7ff fda4 	bl	8004f82 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2110      	movs	r1, #16
 800544e:	4249      	negs	r1, r1
 8005450:	430a      	orrs	r2, r1
 8005452:	629a      	str	r2, [r3, #40]	@ 0x28
 8005454:	e018      	b.n	8005488 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	2380      	movs	r3, #128	@ 0x80
 800545c:	039b      	lsls	r3, r3, #14
 800545e:	429a      	cmp	r2, r3
 8005460:	d112      	bne.n	8005488 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	3b01      	subs	r3, #1
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	221c      	movs	r2, #28
 8005472:	4013      	ands	r3, r2
 8005474:	2210      	movs	r2, #16
 8005476:	4252      	negs	r2, r2
 8005478:	409a      	lsls	r2, r3
 800547a:	0011      	movs	r1, r2
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2100      	movs	r1, #0
 800548e:	0018      	movs	r0, r3
 8005490:	f7ff fd94 	bl	8004fbc <LL_ADC_GetSamplingTimeCommonChannels>
 8005494:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800549a:	429a      	cmp	r2, r3
 800549c:	d10b      	bne.n	80054b6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a8:	2203      	movs	r2, #3
 80054aa:	4393      	bics	r3, r2
 80054ac:	2201      	movs	r2, #1
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80054b4:	e01c      	b.n	80054f0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ba:	2212      	movs	r2, #18
 80054bc:	4393      	bics	r3, r2
 80054be:	2210      	movs	r2, #16
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ca:	2201      	movs	r2, #1
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80054d2:	231f      	movs	r3, #31
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	2201      	movs	r2, #1
 80054d8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80054da:	e009      	b.n	80054f0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054e0:	2210      	movs	r2, #16
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80054e8:	231f      	movs	r3, #31
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	2201      	movs	r2, #1
 80054ee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80054f0:	231f      	movs	r3, #31
 80054f2:	18fb      	adds	r3, r7, r3
 80054f4:	781b      	ldrb	r3, [r3, #0]
}
 80054f6:	0018      	movs	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b008      	add	sp, #32
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			@ (mov r8, r8)
 8005500:	20000014 	.word	0x20000014
 8005504:	00030d40 	.word	0x00030d40
 8005508:	fffffefd 	.word	0xfffffefd
 800550c:	ffde0201 	.word	0xffde0201
 8005510:	1ffffc02 	.word	0x1ffffc02
 8005514:	40012708 	.word	0x40012708
 8005518:	ffc3ffff 	.word	0xffc3ffff
 800551c:	07ffff04 	.word	0x07ffff04

08005520 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005520:	b5b0      	push	{r4, r5, r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	0018      	movs	r0, r3
 8005532:	f7ff fe3b 	bl	80051ac <LL_ADC_REG_IsConversionOngoing>
 8005536:	1e03      	subs	r3, r0, #0
 8005538:	d16c      	bne.n	8005614 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2254      	movs	r2, #84	@ 0x54
 800553e:	5c9b      	ldrb	r3, [r3, r2]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_ADC_Start_DMA+0x28>
 8005544:	2302      	movs	r3, #2
 8005546:	e06c      	b.n	8005622 <HAL_ADC_Start_DMA+0x102>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2254      	movs	r2, #84	@ 0x54
 800554c:	2101      	movs	r1, #1
 800554e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	4013      	ands	r3, r2
 800555a:	d113      	bne.n	8005584 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	0018      	movs	r0, r3
 8005562:	f7ff fdff 	bl	8005164 <LL_ADC_IsEnabled>
 8005566:	1e03      	subs	r3, r0, #0
 8005568:	d004      	beq.n	8005574 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	0018      	movs	r0, r3
 8005570:	f7ff fde6 	bl	8005140 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2101      	movs	r1, #1
 8005580:	430a      	orrs	r2, r1
 8005582:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005584:	2517      	movs	r5, #23
 8005586:	197c      	adds	r4, r7, r5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	0018      	movs	r0, r3
 800558c:	f000 fa3e 	bl	8005a0c <ADC_Enable>
 8005590:	0003      	movs	r3, r0
 8005592:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005594:	002c      	movs	r4, r5
 8005596:	193b      	adds	r3, r7, r4
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d13e      	bne.n	800561c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a2:	4a22      	ldr	r2, [pc, #136]	@ (800562c <HAL_ADC_Start_DMA+0x10c>)
 80055a4:	4013      	ands	r3, r2
 80055a6:	2280      	movs	r2, #128	@ 0x80
 80055a8:	0052      	lsls	r2, r2, #1
 80055aa:	431a      	orrs	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005630 <HAL_ADC_Start_DMA+0x110>)
 80055bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005634 <HAL_ADC_Start_DMA+0x114>)
 80055c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005638 <HAL_ADC_Start_DMA+0x118>)
 80055cc:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	221c      	movs	r2, #28
 80055d4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2254      	movs	r2, #84	@ 0x54
 80055da:	2100      	movs	r1, #0
 80055dc:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2110      	movs	r1, #16
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3340      	adds	r3, #64	@ 0x40
 80055f8:	0019      	movs	r1, r3
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	193c      	adds	r4, r7, r4
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f000 fc80 	bl	8005f04 <HAL_DMA_Start_IT>
 8005604:	0003      	movs	r3, r0
 8005606:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	0018      	movs	r0, r3
 800560e:	f7ff fdbb 	bl	8005188 <LL_ADC_REG_StartConversion>
 8005612:	e003      	b.n	800561c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005614:	2317      	movs	r3, #23
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	2202      	movs	r2, #2
 800561a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800561c:	2317      	movs	r3, #23
 800561e:	18fb      	adds	r3, r7, r3
 8005620:	781b      	ldrb	r3, [r3, #0]
}
 8005622:	0018      	movs	r0, r3
 8005624:	46bd      	mov	sp, r7
 8005626:	b006      	add	sp, #24
 8005628:	bdb0      	pop	{r4, r5, r7, pc}
 800562a:	46c0      	nop			@ (mov r8, r8)
 800562c:	fffff0fe 	.word	0xfffff0fe
 8005630:	08005b19 	.word	0x08005b19
 8005634:	08005be1 	.word	0x08005be1
 8005638:	08005bff 	.word	0x08005bff

0800563c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005644:	46c0      	nop			@ (mov r8, r8)
 8005646:	46bd      	mov	sp, r7
 8005648:	b002      	add	sp, #8
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005654:	46c0      	nop			@ (mov r8, r8)
 8005656:	46bd      	mov	sp, r7
 8005658:	b002      	add	sp, #8
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005666:	2317      	movs	r3, #23
 8005668:	18fb      	adds	r3, r7, r3
 800566a:	2200      	movs	r2, #0
 800566c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2254      	movs	r2, #84	@ 0x54
 8005676:	5c9b      	ldrb	r3, [r3, r2]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x24>
 800567c:	2302      	movs	r3, #2
 800567e:	e1c0      	b.n	8005a02 <HAL_ADC_ConfigChannel+0x3a6>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2254      	movs	r2, #84	@ 0x54
 8005684:	2101      	movs	r1, #1
 8005686:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	0018      	movs	r0, r3
 800568e:	f7ff fd8d 	bl	80051ac <LL_ADC_REG_IsConversionOngoing>
 8005692:	1e03      	subs	r3, r0, #0
 8005694:	d000      	beq.n	8005698 <HAL_ADC_ConfigChannel+0x3c>
 8005696:	e1a3      	b.n	80059e0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d100      	bne.n	80056a2 <HAL_ADC_ConfigChannel+0x46>
 80056a0:	e143      	b.n	800592a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	2380      	movs	r3, #128	@ 0x80
 80056a8:	061b      	lsls	r3, r3, #24
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d004      	beq.n	80056b8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80056b2:	4ac1      	ldr	r2, [pc, #772]	@ (80059b8 <HAL_ADC_ConfigChannel+0x35c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d108      	bne.n	80056ca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	0019      	movs	r1, r3
 80056c2:	0010      	movs	r0, r2
 80056c4:	f7ff fcc2 	bl	800504c <LL_ADC_REG_SetSequencerChAdd>
 80056c8:	e0c9      	b.n	800585e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	211f      	movs	r1, #31
 80056d4:	400b      	ands	r3, r1
 80056d6:	210f      	movs	r1, #15
 80056d8:	4099      	lsls	r1, r3
 80056da:	000b      	movs	r3, r1
 80056dc:	43db      	mvns	r3, r3
 80056de:	4013      	ands	r3, r2
 80056e0:	0019      	movs	r1, r3
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	035b      	lsls	r3, r3, #13
 80056e8:	0b5b      	lsrs	r3, r3, #13
 80056ea:	d105      	bne.n	80056f8 <HAL_ADC_ConfigChannel+0x9c>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	0e9b      	lsrs	r3, r3, #26
 80056f2:	221f      	movs	r2, #31
 80056f4:	4013      	ands	r3, r2
 80056f6:	e098      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2201      	movs	r2, #1
 80056fe:	4013      	ands	r3, r2
 8005700:	d000      	beq.n	8005704 <HAL_ADC_ConfigChannel+0xa8>
 8005702:	e091      	b.n	8005828 <HAL_ADC_ConfigChannel+0x1cc>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2202      	movs	r2, #2
 800570a:	4013      	ands	r3, r2
 800570c:	d000      	beq.n	8005710 <HAL_ADC_ConfigChannel+0xb4>
 800570e:	e089      	b.n	8005824 <HAL_ADC_ConfigChannel+0x1c8>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2204      	movs	r2, #4
 8005716:	4013      	ands	r3, r2
 8005718:	d000      	beq.n	800571c <HAL_ADC_ConfigChannel+0xc0>
 800571a:	e081      	b.n	8005820 <HAL_ADC_ConfigChannel+0x1c4>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2208      	movs	r2, #8
 8005722:	4013      	ands	r3, r2
 8005724:	d000      	beq.n	8005728 <HAL_ADC_ConfigChannel+0xcc>
 8005726:	e079      	b.n	800581c <HAL_ADC_ConfigChannel+0x1c0>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2210      	movs	r2, #16
 800572e:	4013      	ands	r3, r2
 8005730:	d000      	beq.n	8005734 <HAL_ADC_ConfigChannel+0xd8>
 8005732:	e071      	b.n	8005818 <HAL_ADC_ConfigChannel+0x1bc>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2220      	movs	r2, #32
 800573a:	4013      	ands	r3, r2
 800573c:	d000      	beq.n	8005740 <HAL_ADC_ConfigChannel+0xe4>
 800573e:	e069      	b.n	8005814 <HAL_ADC_ConfigChannel+0x1b8>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2240      	movs	r2, #64	@ 0x40
 8005746:	4013      	ands	r3, r2
 8005748:	d000      	beq.n	800574c <HAL_ADC_ConfigChannel+0xf0>
 800574a:	e061      	b.n	8005810 <HAL_ADC_ConfigChannel+0x1b4>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2280      	movs	r2, #128	@ 0x80
 8005752:	4013      	ands	r3, r2
 8005754:	d000      	beq.n	8005758 <HAL_ADC_ConfigChannel+0xfc>
 8005756:	e059      	b.n	800580c <HAL_ADC_ConfigChannel+0x1b0>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	2380      	movs	r3, #128	@ 0x80
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	4013      	ands	r3, r2
 8005762:	d151      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x1ac>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	2380      	movs	r3, #128	@ 0x80
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4013      	ands	r3, r2
 800576e:	d149      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x1a8>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	2380      	movs	r3, #128	@ 0x80
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4013      	ands	r3, r2
 800577a:	d141      	bne.n	8005800 <HAL_ADC_ConfigChannel+0x1a4>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	2380      	movs	r3, #128	@ 0x80
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	4013      	ands	r3, r2
 8005786:	d139      	bne.n	80057fc <HAL_ADC_ConfigChannel+0x1a0>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	2380      	movs	r3, #128	@ 0x80
 800578e:	015b      	lsls	r3, r3, #5
 8005790:	4013      	ands	r3, r2
 8005792:	d131      	bne.n	80057f8 <HAL_ADC_ConfigChannel+0x19c>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	2380      	movs	r3, #128	@ 0x80
 800579a:	019b      	lsls	r3, r3, #6
 800579c:	4013      	ands	r3, r2
 800579e:	d129      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x198>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	2380      	movs	r3, #128	@ 0x80
 80057a6:	01db      	lsls	r3, r3, #7
 80057a8:	4013      	ands	r3, r2
 80057aa:	d121      	bne.n	80057f0 <HAL_ADC_ConfigChannel+0x194>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	2380      	movs	r3, #128	@ 0x80
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	4013      	ands	r3, r2
 80057b6:	d119      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x190>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	2380      	movs	r3, #128	@ 0x80
 80057be:	025b      	lsls	r3, r3, #9
 80057c0:	4013      	ands	r3, r2
 80057c2:	d111      	bne.n	80057e8 <HAL_ADC_ConfigChannel+0x18c>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	2380      	movs	r3, #128	@ 0x80
 80057ca:	029b      	lsls	r3, r3, #10
 80057cc:	4013      	ands	r3, r2
 80057ce:	d109      	bne.n	80057e4 <HAL_ADC_ConfigChannel+0x188>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	2380      	movs	r3, #128	@ 0x80
 80057d6:	02db      	lsls	r3, r3, #11
 80057d8:	4013      	ands	r3, r2
 80057da:	d001      	beq.n	80057e0 <HAL_ADC_ConfigChannel+0x184>
 80057dc:	2312      	movs	r3, #18
 80057de:	e024      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 80057e0:	2300      	movs	r3, #0
 80057e2:	e022      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 80057e4:	2311      	movs	r3, #17
 80057e6:	e020      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 80057e8:	2310      	movs	r3, #16
 80057ea:	e01e      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 80057ec:	230f      	movs	r3, #15
 80057ee:	e01c      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 80057f0:	230e      	movs	r3, #14
 80057f2:	e01a      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 80057f4:	230d      	movs	r3, #13
 80057f6:	e018      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 80057f8:	230c      	movs	r3, #12
 80057fa:	e016      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 80057fc:	230b      	movs	r3, #11
 80057fe:	e014      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 8005800:	230a      	movs	r3, #10
 8005802:	e012      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 8005804:	2309      	movs	r3, #9
 8005806:	e010      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 8005808:	2308      	movs	r3, #8
 800580a:	e00e      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 800580c:	2307      	movs	r3, #7
 800580e:	e00c      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 8005810:	2306      	movs	r3, #6
 8005812:	e00a      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 8005814:	2305      	movs	r3, #5
 8005816:	e008      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 8005818:	2304      	movs	r3, #4
 800581a:	e006      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 800581c:	2303      	movs	r3, #3
 800581e:	e004      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 8005820:	2302      	movs	r3, #2
 8005822:	e002      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <HAL_ADC_ConfigChannel+0x1ce>
 8005828:	2300      	movs	r3, #0
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	6852      	ldr	r2, [r2, #4]
 800582e:	201f      	movs	r0, #31
 8005830:	4002      	ands	r2, r0
 8005832:	4093      	lsls	r3, r2
 8005834:	000a      	movs	r2, r1
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	089b      	lsrs	r3, r3, #2
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	429a      	cmp	r2, r3
 800584a:	d808      	bhi.n	800585e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	6859      	ldr	r1, [r3, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	001a      	movs	r2, r3
 800585a:	f7ff fbd7 	bl	800500c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6819      	ldr	r1, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	001a      	movs	r2, r3
 800586c:	f7ff fc12 	bl	8005094 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	db00      	blt.n	800587a <HAL_ADC_ConfigChannel+0x21e>
 8005878:	e0bc      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800587a:	4b50      	ldr	r3, [pc, #320]	@ (80059bc <HAL_ADC_ConfigChannel+0x360>)
 800587c:	0018      	movs	r0, r3
 800587e:	f7ff fb73 	bl	8004f68 <LL_ADC_GetCommonPathInternalCh>
 8005882:	0003      	movs	r3, r0
 8005884:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a4d      	ldr	r2, [pc, #308]	@ (80059c0 <HAL_ADC_ConfigChannel+0x364>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d122      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	2380      	movs	r3, #128	@ 0x80
 8005894:	041b      	lsls	r3, r3, #16
 8005896:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005898:	d11d      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2280      	movs	r2, #128	@ 0x80
 800589e:	0412      	lsls	r2, r2, #16
 80058a0:	4313      	orrs	r3, r2
 80058a2:	4a46      	ldr	r2, [pc, #280]	@ (80059bc <HAL_ADC_ConfigChannel+0x360>)
 80058a4:	0019      	movs	r1, r3
 80058a6:	0010      	movs	r0, r2
 80058a8:	f7ff fb4a 	bl	8004f40 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058ac:	4b45      	ldr	r3, [pc, #276]	@ (80059c4 <HAL_ADC_ConfigChannel+0x368>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4945      	ldr	r1, [pc, #276]	@ (80059c8 <HAL_ADC_ConfigChannel+0x36c>)
 80058b2:	0018      	movs	r0, r3
 80058b4:	f7fa fc42 	bl	800013c <__udivsi3>
 80058b8:	0003      	movs	r3, r0
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	0013      	movs	r3, r2
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	189b      	adds	r3, r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80058c6:	e002      	b.n	80058ce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1f9      	bne.n	80058c8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80058d4:	e08e      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3c      	ldr	r2, [pc, #240]	@ (80059cc <HAL_ADC_ConfigChannel+0x370>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10e      	bne.n	80058fe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	2380      	movs	r3, #128	@ 0x80
 80058e4:	045b      	lsls	r3, r3, #17
 80058e6:	4013      	ands	r3, r2
 80058e8:	d109      	bne.n	80058fe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2280      	movs	r2, #128	@ 0x80
 80058ee:	0452      	lsls	r2, r2, #17
 80058f0:	4313      	orrs	r3, r2
 80058f2:	4a32      	ldr	r2, [pc, #200]	@ (80059bc <HAL_ADC_ConfigChannel+0x360>)
 80058f4:	0019      	movs	r1, r3
 80058f6:	0010      	movs	r0, r2
 80058f8:	f7ff fb22 	bl	8004f40 <LL_ADC_SetCommonPathInternalCh>
 80058fc:	e07a      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a33      	ldr	r2, [pc, #204]	@ (80059d0 <HAL_ADC_ConfigChannel+0x374>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d000      	beq.n	800590a <HAL_ADC_ConfigChannel+0x2ae>
 8005908:	e074      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	2380      	movs	r3, #128	@ 0x80
 800590e:	03db      	lsls	r3, r3, #15
 8005910:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005912:	d000      	beq.n	8005916 <HAL_ADC_ConfigChannel+0x2ba>
 8005914:	e06e      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2280      	movs	r2, #128	@ 0x80
 800591a:	03d2      	lsls	r2, r2, #15
 800591c:	4313      	orrs	r3, r2
 800591e:	4a27      	ldr	r2, [pc, #156]	@ (80059bc <HAL_ADC_ConfigChannel+0x360>)
 8005920:	0019      	movs	r1, r3
 8005922:	0010      	movs	r0, r2
 8005924:	f7ff fb0c 	bl	8004f40 <LL_ADC_SetCommonPathInternalCh>
 8005928:	e064      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	2380      	movs	r3, #128	@ 0x80
 8005930:	061b      	lsls	r3, r3, #24
 8005932:	429a      	cmp	r2, r3
 8005934:	d004      	beq.n	8005940 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800593a:	4a1f      	ldr	r2, [pc, #124]	@ (80059b8 <HAL_ADC_ConfigChannel+0x35c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d107      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	0019      	movs	r1, r3
 800594a:	0010      	movs	r0, r2
 800594c:	f7ff fb8f 	bl	800506e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	da4d      	bge.n	80059f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005958:	4b18      	ldr	r3, [pc, #96]	@ (80059bc <HAL_ADC_ConfigChannel+0x360>)
 800595a:	0018      	movs	r0, r3
 800595c:	f7ff fb04 	bl	8004f68 <LL_ADC_GetCommonPathInternalCh>
 8005960:	0003      	movs	r3, r0
 8005962:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a15      	ldr	r2, [pc, #84]	@ (80059c0 <HAL_ADC_ConfigChannel+0x364>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d108      	bne.n	8005980 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4a18      	ldr	r2, [pc, #96]	@ (80059d4 <HAL_ADC_ConfigChannel+0x378>)
 8005972:	4013      	ands	r3, r2
 8005974:	4a11      	ldr	r2, [pc, #68]	@ (80059bc <HAL_ADC_ConfigChannel+0x360>)
 8005976:	0019      	movs	r1, r3
 8005978:	0010      	movs	r0, r2
 800597a:	f7ff fae1 	bl	8004f40 <LL_ADC_SetCommonPathInternalCh>
 800597e:	e039      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a11      	ldr	r2, [pc, #68]	@ (80059cc <HAL_ADC_ConfigChannel+0x370>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d108      	bne.n	800599c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4a12      	ldr	r2, [pc, #72]	@ (80059d8 <HAL_ADC_ConfigChannel+0x37c>)
 800598e:	4013      	ands	r3, r2
 8005990:	4a0a      	ldr	r2, [pc, #40]	@ (80059bc <HAL_ADC_ConfigChannel+0x360>)
 8005992:	0019      	movs	r1, r3
 8005994:	0010      	movs	r0, r2
 8005996:	f7ff fad3 	bl	8004f40 <LL_ADC_SetCommonPathInternalCh>
 800599a:	e02b      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a0b      	ldr	r2, [pc, #44]	@ (80059d0 <HAL_ADC_ConfigChannel+0x374>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d126      	bne.n	80059f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4a0c      	ldr	r2, [pc, #48]	@ (80059dc <HAL_ADC_ConfigChannel+0x380>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	4a03      	ldr	r2, [pc, #12]	@ (80059bc <HAL_ADC_ConfigChannel+0x360>)
 80059ae:	0019      	movs	r1, r3
 80059b0:	0010      	movs	r0, r2
 80059b2:	f7ff fac5 	bl	8004f40 <LL_ADC_SetCommonPathInternalCh>
 80059b6:	e01d      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x398>
 80059b8:	80000004 	.word	0x80000004
 80059bc:	40012708 	.word	0x40012708
 80059c0:	b0001000 	.word	0xb0001000
 80059c4:	20000014 	.word	0x20000014
 80059c8:	00030d40 	.word	0x00030d40
 80059cc:	b8004000 	.word	0xb8004000
 80059d0:	b4002000 	.word	0xb4002000
 80059d4:	ff7fffff 	.word	0xff7fffff
 80059d8:	feffffff 	.word	0xfeffffff
 80059dc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e4:	2220      	movs	r2, #32
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80059ec:	2317      	movs	r3, #23
 80059ee:	18fb      	adds	r3, r7, r3
 80059f0:	2201      	movs	r2, #1
 80059f2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2254      	movs	r2, #84	@ 0x54
 80059f8:	2100      	movs	r1, #0
 80059fa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80059fc:	2317      	movs	r3, #23
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	781b      	ldrb	r3, [r3, #0]
}
 8005a02:	0018      	movs	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b006      	add	sp, #24
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	46c0      	nop			@ (mov r8, r8)

08005a0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f7ff fba1 	bl	8005164 <LL_ADC_IsEnabled>
 8005a22:	1e03      	subs	r3, r0, #0
 8005a24:	d000      	beq.n	8005a28 <ADC_Enable+0x1c>
 8005a26:	e069      	b.n	8005afc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	4a36      	ldr	r2, [pc, #216]	@ (8005b08 <ADC_Enable+0xfc>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	d00d      	beq.n	8005a50 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a38:	2210      	movs	r2, #16
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a44:	2201      	movs	r2, #1
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e056      	b.n	8005afe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	0018      	movs	r0, r3
 8005a56:	f7ff fb61 	bl	800511c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8005a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8005b0c <ADC_Enable+0x100>)
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f7ff fa83 	bl	8004f68 <LL_ADC_GetCommonPathInternalCh>
 8005a62:	0002      	movs	r2, r0
 8005a64:	2380      	movs	r3, #128	@ 0x80
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d00f      	beq.n	8005a8c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a6c:	4b28      	ldr	r3, [pc, #160]	@ (8005b10 <ADC_Enable+0x104>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4928      	ldr	r1, [pc, #160]	@ (8005b14 <ADC_Enable+0x108>)
 8005a72:	0018      	movs	r0, r3
 8005a74:	f7fa fb62 	bl	800013c <__udivsi3>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8005a7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a7e:	e002      	b.n	8005a86 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f9      	bne.n	8005a80 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	7e5b      	ldrb	r3, [r3, #25]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d033      	beq.n	8005afc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005a94:	f7ff fa4a 	bl	8004f2c <HAL_GetTick>
 8005a98:	0003      	movs	r3, r0
 8005a9a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a9c:	e027      	b.n	8005aee <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f7ff fb5e 	bl	8005164 <LL_ADC_IsEnabled>
 8005aa8:	1e03      	subs	r3, r0, #0
 8005aaa:	d104      	bne.n	8005ab6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f7ff fb33 	bl	800511c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ab6:	f7ff fa39 	bl	8004f2c <HAL_GetTick>
 8005aba:	0002      	movs	r2, r0
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d914      	bls.n	8005aee <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2201      	movs	r2, #1
 8005acc:	4013      	ands	r3, r2
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d00d      	beq.n	8005aee <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad6:	2210      	movs	r2, #16
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e007      	b.n	8005afe <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2201      	movs	r2, #1
 8005af6:	4013      	ands	r3, r2
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d1d0      	bne.n	8005a9e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	0018      	movs	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b004      	add	sp, #16
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			@ (mov r8, r8)
 8005b08:	80000017 	.word	0x80000017
 8005b0c:	40012708 	.word	0x40012708
 8005b10:	20000014 	.word	0x20000014
 8005b14:	00030d40 	.word	0x00030d40

08005b18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2a:	2250      	movs	r2, #80	@ 0x50
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d141      	bne.n	8005bb4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b34:	2280      	movs	r2, #128	@ 0x80
 8005b36:	0092      	lsls	r2, r2, #2
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	0018      	movs	r0, r3
 8005b44:	f7ff fa51 	bl	8004fea <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b48:	1e03      	subs	r3, r0, #0
 8005b4a:	d02e      	beq.n	8005baa <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	7e9b      	ldrb	r3, [r3, #26]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d12a      	bne.n	8005baa <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d123      	bne.n	8005baa <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	0018      	movs	r0, r3
 8005b68:	f7ff fb20 	bl	80051ac <LL_ADC_REG_IsConversionOngoing>
 8005b6c:	1e03      	subs	r3, r0, #0
 8005b6e:	d110      	bne.n	8005b92 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	210c      	movs	r1, #12
 8005b7c:	438a      	bics	r2, r1
 8005b7e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b84:	4a15      	ldr	r2, [pc, #84]	@ (8005bdc <ADC_DMAConvCplt+0xc4>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	2201      	movs	r2, #1
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b90:	e00b      	b.n	8005baa <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b96:	2220      	movs	r2, #32
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f7fd fa6f 	bl	8003090 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005bb2:	e00f      	b.n	8005bd4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb8:	2210      	movs	r2, #16
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f7ff fd43 	bl	800564c <HAL_ADC_ErrorCallback>
}
 8005bc6:	e005      	b.n	8005bd4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	0010      	movs	r0, r2
 8005bd2:	4798      	blx	r3
}
 8005bd4:	46c0      	nop			@ (mov r8, r8)
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b004      	add	sp, #16
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	fffffefe 	.word	0xfffffefe

08005be0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f7ff fd23 	bl	800563c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bf6:	46c0      	nop			@ (mov r8, r8)
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b004      	add	sp, #16
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c10:	2240      	movs	r2, #64	@ 0x40
 8005c12:	431a      	orrs	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	0018      	movs	r0, r3
 8005c28:	f7ff fd10 	bl	800564c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c2c:	46c0      	nop			@ (mov r8, r8)
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b004      	add	sp, #16
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	0002      	movs	r2, r0
 8005c3c:	1dfb      	adds	r3, r7, #7
 8005c3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005c40:	1dfb      	adds	r3, r7, #7
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c46:	d809      	bhi.n	8005c5c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c48:	1dfb      	adds	r3, r7, #7
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	001a      	movs	r2, r3
 8005c4e:	231f      	movs	r3, #31
 8005c50:	401a      	ands	r2, r3
 8005c52:	4b04      	ldr	r3, [pc, #16]	@ (8005c64 <__NVIC_EnableIRQ+0x30>)
 8005c54:	2101      	movs	r1, #1
 8005c56:	4091      	lsls	r1, r2
 8005c58:	000a      	movs	r2, r1
 8005c5a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005c5c:	46c0      	nop			@ (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b002      	add	sp, #8
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	e000e100 	.word	0xe000e100

08005c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c68:	b590      	push	{r4, r7, lr}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	0002      	movs	r2, r0
 8005c70:	6039      	str	r1, [r7, #0]
 8005c72:	1dfb      	adds	r3, r7, #7
 8005c74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005c76:	1dfb      	adds	r3, r7, #7
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c7c:	d828      	bhi.n	8005cd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8005d3c <__NVIC_SetPriority+0xd4>)
 8005c80:	1dfb      	adds	r3, r7, #7
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	b25b      	sxtb	r3, r3
 8005c86:	089b      	lsrs	r3, r3, #2
 8005c88:	33c0      	adds	r3, #192	@ 0xc0
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	589b      	ldr	r3, [r3, r2]
 8005c8e:	1dfa      	adds	r2, r7, #7
 8005c90:	7812      	ldrb	r2, [r2, #0]
 8005c92:	0011      	movs	r1, r2
 8005c94:	2203      	movs	r2, #3
 8005c96:	400a      	ands	r2, r1
 8005c98:	00d2      	lsls	r2, r2, #3
 8005c9a:	21ff      	movs	r1, #255	@ 0xff
 8005c9c:	4091      	lsls	r1, r2
 8005c9e:	000a      	movs	r2, r1
 8005ca0:	43d2      	mvns	r2, r2
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	019b      	lsls	r3, r3, #6
 8005caa:	22ff      	movs	r2, #255	@ 0xff
 8005cac:	401a      	ands	r2, r3
 8005cae:	1dfb      	adds	r3, r7, #7
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	4003      	ands	r3, r0
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005cbc:	481f      	ldr	r0, [pc, #124]	@ (8005d3c <__NVIC_SetPriority+0xd4>)
 8005cbe:	1dfb      	adds	r3, r7, #7
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	b25b      	sxtb	r3, r3
 8005cc4:	089b      	lsrs	r3, r3, #2
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	33c0      	adds	r3, #192	@ 0xc0
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005cce:	e031      	b.n	8005d34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d40 <__NVIC_SetPriority+0xd8>)
 8005cd2:	1dfb      	adds	r3, r7, #7
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	0019      	movs	r1, r3
 8005cd8:	230f      	movs	r3, #15
 8005cda:	400b      	ands	r3, r1
 8005cdc:	3b08      	subs	r3, #8
 8005cde:	089b      	lsrs	r3, r3, #2
 8005ce0:	3306      	adds	r3, #6
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	18d3      	adds	r3, r2, r3
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	1dfa      	adds	r2, r7, #7
 8005cec:	7812      	ldrb	r2, [r2, #0]
 8005cee:	0011      	movs	r1, r2
 8005cf0:	2203      	movs	r2, #3
 8005cf2:	400a      	ands	r2, r1
 8005cf4:	00d2      	lsls	r2, r2, #3
 8005cf6:	21ff      	movs	r1, #255	@ 0xff
 8005cf8:	4091      	lsls	r1, r2
 8005cfa:	000a      	movs	r2, r1
 8005cfc:	43d2      	mvns	r2, r2
 8005cfe:	401a      	ands	r2, r3
 8005d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	019b      	lsls	r3, r3, #6
 8005d06:	22ff      	movs	r2, #255	@ 0xff
 8005d08:	401a      	ands	r2, r3
 8005d0a:	1dfb      	adds	r3, r7, #7
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	0018      	movs	r0, r3
 8005d10:	2303      	movs	r3, #3
 8005d12:	4003      	ands	r3, r0
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d18:	4809      	ldr	r0, [pc, #36]	@ (8005d40 <__NVIC_SetPriority+0xd8>)
 8005d1a:	1dfb      	adds	r3, r7, #7
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	001c      	movs	r4, r3
 8005d20:	230f      	movs	r3, #15
 8005d22:	4023      	ands	r3, r4
 8005d24:	3b08      	subs	r3, #8
 8005d26:	089b      	lsrs	r3, r3, #2
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	3306      	adds	r3, #6
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	18c3      	adds	r3, r0, r3
 8005d30:	3304      	adds	r3, #4
 8005d32:	601a      	str	r2, [r3, #0]
}
 8005d34:	46c0      	nop			@ (mov r8, r8)
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b003      	add	sp, #12
 8005d3a:	bd90      	pop	{r4, r7, pc}
 8005d3c:	e000e100 	.word	0xe000e100
 8005d40:	e000ed00 	.word	0xe000ed00

08005d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	1e5a      	subs	r2, r3, #1
 8005d50:	2380      	movs	r3, #128	@ 0x80
 8005d52:	045b      	lsls	r3, r3, #17
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d301      	bcc.n	8005d5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e010      	b.n	8005d7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d88 <SysTick_Config+0x44>)
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	3a01      	subs	r2, #1
 8005d62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d64:	2301      	movs	r3, #1
 8005d66:	425b      	negs	r3, r3
 8005d68:	2103      	movs	r1, #3
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f7ff ff7c 	bl	8005c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d70:	4b05      	ldr	r3, [pc, #20]	@ (8005d88 <SysTick_Config+0x44>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d76:	4b04      	ldr	r3, [pc, #16]	@ (8005d88 <SysTick_Config+0x44>)
 8005d78:	2207      	movs	r2, #7
 8005d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	0018      	movs	r0, r3
 8005d80:	46bd      	mov	sp, r7
 8005d82:	b002      	add	sp, #8
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	e000e010 	.word	0xe000e010

08005d8c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
 8005d96:	210f      	movs	r1, #15
 8005d98:	187b      	adds	r3, r7, r1
 8005d9a:	1c02      	adds	r2, r0, #0
 8005d9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	187b      	adds	r3, r7, r1
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	b25b      	sxtb	r3, r3
 8005da6:	0011      	movs	r1, r2
 8005da8:	0018      	movs	r0, r3
 8005daa:	f7ff ff5d 	bl	8005c68 <__NVIC_SetPriority>
}
 8005dae:	46c0      	nop			@ (mov r8, r8)
 8005db0:	46bd      	mov	sp, r7
 8005db2:	b004      	add	sp, #16
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	0002      	movs	r2, r0
 8005dbe:	1dfb      	adds	r3, r7, #7
 8005dc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dc2:	1dfb      	adds	r3, r7, #7
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	b25b      	sxtb	r3, r3
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f7ff ff33 	bl	8005c34 <__NVIC_EnableIRQ>
}
 8005dce:	46c0      	nop			@ (mov r8, r8)
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b002      	add	sp, #8
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	0018      	movs	r0, r3
 8005de2:	f7ff ffaf 	bl	8005d44 <SysTick_Config>
 8005de6:	0003      	movs	r3, r0
}
 8005de8:	0018      	movs	r0, r3
 8005dea:	46bd      	mov	sp, r7
 8005dec:	b002      	add	sp, #8
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e077      	b.n	8005ef2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a3d      	ldr	r2, [pc, #244]	@ (8005efc <HAL_DMA_Init+0x10c>)
 8005e08:	4694      	mov	ip, r2
 8005e0a:	4463      	add	r3, ip
 8005e0c:	2114      	movs	r1, #20
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f7fa f994 	bl	800013c <__udivsi3>
 8005e14:	0003      	movs	r3, r0
 8005e16:	009a      	lsls	r2, r3, #2
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2225      	movs	r2, #37	@ 0x25
 8005e20:	2102      	movs	r1, #2
 8005e22:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4934      	ldr	r1, [pc, #208]	@ (8005f00 <HAL_DMA_Init+0x110>)
 8005e30:	400a      	ands	r2, r1
 8005e32:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6819      	ldr	r1, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f000 fa8d 	bl	800638c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	2380      	movs	r3, #128	@ 0x80
 8005e78:	01db      	lsls	r3, r3, #7
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d102      	bne.n	8005e84 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8c:	213f      	movs	r1, #63	@ 0x3f
 8005e8e:	400a      	ands	r2, r1
 8005e90:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005e9a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d011      	beq.n	8005ec8 <HAL_DMA_Init+0xd8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d80d      	bhi.n	8005ec8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f000 fa98 	bl	80063e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	e008      	b.n	8005eda <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2225      	movs	r2, #37	@ 0x25
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2224      	movs	r2, #36	@ 0x24
 8005eec:	2100      	movs	r1, #0
 8005eee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b002      	add	sp, #8
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	46c0      	nop			@ (mov r8, r8)
 8005efc:	bffdfff8 	.word	0xbffdfff8
 8005f00:	ffff800f 	.word	0xffff800f

08005f04 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f12:	2317      	movs	r3, #23
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	2200      	movs	r2, #0
 8005f18:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2224      	movs	r2, #36	@ 0x24
 8005f1e:	5c9b      	ldrb	r3, [r3, r2]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_DMA_Start_IT+0x24>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e06f      	b.n	8006008 <HAL_DMA_Start_IT+0x104>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2224      	movs	r2, #36	@ 0x24
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2225      	movs	r2, #37	@ 0x25
 8005f34:	5c9b      	ldrb	r3, [r3, r2]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d157      	bne.n	8005fec <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2225      	movs	r2, #37	@ 0x25
 8005f40:	2102      	movs	r1, #2
 8005f42:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2101      	movs	r1, #1
 8005f56:	438a      	bics	r2, r1
 8005f58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f9d3 	bl	800630c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d008      	beq.n	8005f80 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	210e      	movs	r1, #14
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e00f      	b.n	8005fa0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2104      	movs	r1, #4
 8005f8c:	438a      	bics	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	210a      	movs	r1, #10
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	2380      	movs	r3, #128	@ 0x80
 8005fa8:	025b      	lsls	r3, r3, #9
 8005faa:	4013      	ands	r3, r2
 8005fac:	d008      	beq.n	8005fc0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb8:	2180      	movs	r1, #128	@ 0x80
 8005fba:	0049      	lsls	r1, r1, #1
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d008      	beq.n	8005fda <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd2:	2180      	movs	r1, #128	@ 0x80
 8005fd4:	0049      	lsls	r1, r1, #1
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e00a      	b.n	8006002 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2280      	movs	r2, #128	@ 0x80
 8005ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2224      	movs	r2, #36	@ 0x24
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005ffa:	2317      	movs	r3, #23
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006002:	2317      	movs	r3, #23
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	781b      	ldrb	r3, [r3, #0]
}
 8006008:	0018      	movs	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	b006      	add	sp, #24
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e050      	b.n	80060c4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2225      	movs	r2, #37	@ 0x25
 8006026:	5c9b      	ldrb	r3, [r3, r2]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d008      	beq.n	8006040 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2204      	movs	r2, #4
 8006032:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2224      	movs	r2, #36	@ 0x24
 8006038:	2100      	movs	r1, #0
 800603a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e041      	b.n	80060c4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	210e      	movs	r1, #14
 800604c:	438a      	bics	r2, r1
 800604e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605a:	491c      	ldr	r1, [pc, #112]	@ (80060cc <HAL_DMA_Abort+0xbc>)
 800605c:	400a      	ands	r2, r1
 800605e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2101      	movs	r1, #1
 800606c:	438a      	bics	r2, r1
 800606e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8006070:	4b17      	ldr	r3, [pc, #92]	@ (80060d0 <HAL_DMA_Abort+0xc0>)
 8006072:	6859      	ldr	r1, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006078:	221c      	movs	r2, #28
 800607a:	4013      	ands	r3, r2
 800607c:	2201      	movs	r2, #1
 800607e:	409a      	lsls	r2, r3
 8006080:	4b13      	ldr	r3, [pc, #76]	@ (80060d0 <HAL_DMA_Abort+0xc0>)
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800608e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00c      	beq.n	80060b2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060a2:	490a      	ldr	r1, [pc, #40]	@ (80060cc <HAL_DMA_Abort+0xbc>)
 80060a4:	400a      	ands	r2, r1
 80060a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80060b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2225      	movs	r2, #37	@ 0x25
 80060b6:	2101      	movs	r1, #1
 80060b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2224      	movs	r2, #36	@ 0x24
 80060be:	2100      	movs	r1, #0
 80060c0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	0018      	movs	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	b002      	add	sp, #8
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	fffffeff 	.word	0xfffffeff
 80060d0:	40020000 	.word	0x40020000

080060d4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060dc:	210f      	movs	r1, #15
 80060de:	187b      	adds	r3, r7, r1
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2225      	movs	r2, #37	@ 0x25
 80060e8:	5c9b      	ldrb	r3, [r3, r2]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d006      	beq.n	80060fe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2204      	movs	r2, #4
 80060f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80060f6:	187b      	adds	r3, r7, r1
 80060f8:	2201      	movs	r2, #1
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	e049      	b.n	8006192 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	210e      	movs	r1, #14
 800610a:	438a      	bics	r2, r1
 800610c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2101      	movs	r1, #1
 800611a:	438a      	bics	r2, r1
 800611c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006128:	491d      	ldr	r1, [pc, #116]	@ (80061a0 <HAL_DMA_Abort_IT+0xcc>)
 800612a:	400a      	ands	r2, r1
 800612c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800612e:	4b1d      	ldr	r3, [pc, #116]	@ (80061a4 <HAL_DMA_Abort_IT+0xd0>)
 8006130:	6859      	ldr	r1, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	221c      	movs	r2, #28
 8006138:	4013      	ands	r3, r2
 800613a:	2201      	movs	r2, #1
 800613c:	409a      	lsls	r2, r3
 800613e:	4b19      	ldr	r3, [pc, #100]	@ (80061a4 <HAL_DMA_Abort_IT+0xd0>)
 8006140:	430a      	orrs	r2, r1
 8006142:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800614c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00c      	beq.n	8006170 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006160:	490f      	ldr	r1, [pc, #60]	@ (80061a0 <HAL_DMA_Abort_IT+0xcc>)
 8006162:	400a      	ands	r2, r1
 8006164:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800616e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2225      	movs	r2, #37	@ 0x25
 8006174:	2101      	movs	r1, #1
 8006176:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2224      	movs	r2, #36	@ 0x24
 800617c:	2100      	movs	r1, #0
 800617e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	0010      	movs	r0, r2
 8006190:	4798      	blx	r3
    }
  }
  return status;
 8006192:	230f      	movs	r3, #15
 8006194:	18fb      	adds	r3, r7, r3
 8006196:	781b      	ldrb	r3, [r3, #0]
}
 8006198:	0018      	movs	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	b004      	add	sp, #16
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	fffffeff 	.word	0xfffffeff
 80061a4:	40020000 	.word	0x40020000

080061a8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80061b0:	4b55      	ldr	r3, [pc, #340]	@ (8006308 <HAL_DMA_IRQHandler+0x160>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c2:	221c      	movs	r2, #28
 80061c4:	4013      	ands	r3, r2
 80061c6:	2204      	movs	r2, #4
 80061c8:	409a      	lsls	r2, r3
 80061ca:	0013      	movs	r3, r2
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4013      	ands	r3, r2
 80061d0:	d027      	beq.n	8006222 <HAL_DMA_IRQHandler+0x7a>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2204      	movs	r2, #4
 80061d6:	4013      	ands	r3, r2
 80061d8:	d023      	beq.n	8006222 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2220      	movs	r2, #32
 80061e2:	4013      	ands	r3, r2
 80061e4:	d107      	bne.n	80061f6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2104      	movs	r1, #4
 80061f2:	438a      	bics	r2, r1
 80061f4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80061f6:	4b44      	ldr	r3, [pc, #272]	@ (8006308 <HAL_DMA_IRQHandler+0x160>)
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fe:	221c      	movs	r2, #28
 8006200:	4013      	ands	r3, r2
 8006202:	2204      	movs	r2, #4
 8006204:	409a      	lsls	r2, r3
 8006206:	4b40      	ldr	r3, [pc, #256]	@ (8006308 <HAL_DMA_IRQHandler+0x160>)
 8006208:	430a      	orrs	r2, r1
 800620a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006210:	2b00      	cmp	r3, #0
 8006212:	d100      	bne.n	8006216 <HAL_DMA_IRQHandler+0x6e>
 8006214:	e073      	b.n	80062fe <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	0010      	movs	r0, r2
 800621e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006220:	e06d      	b.n	80062fe <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006226:	221c      	movs	r2, #28
 8006228:	4013      	ands	r3, r2
 800622a:	2202      	movs	r2, #2
 800622c:	409a      	lsls	r2, r3
 800622e:	0013      	movs	r3, r2
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4013      	ands	r3, r2
 8006234:	d02e      	beq.n	8006294 <HAL_DMA_IRQHandler+0xec>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2202      	movs	r2, #2
 800623a:	4013      	ands	r3, r2
 800623c:	d02a      	beq.n	8006294 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2220      	movs	r2, #32
 8006246:	4013      	ands	r3, r2
 8006248:	d10b      	bne.n	8006262 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	210a      	movs	r1, #10
 8006256:	438a      	bics	r2, r1
 8006258:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2225      	movs	r2, #37	@ 0x25
 800625e:	2101      	movs	r1, #1
 8006260:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006262:	4b29      	ldr	r3, [pc, #164]	@ (8006308 <HAL_DMA_IRQHandler+0x160>)
 8006264:	6859      	ldr	r1, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	221c      	movs	r2, #28
 800626c:	4013      	ands	r3, r2
 800626e:	2202      	movs	r2, #2
 8006270:	409a      	lsls	r2, r3
 8006272:	4b25      	ldr	r3, [pc, #148]	@ (8006308 <HAL_DMA_IRQHandler+0x160>)
 8006274:	430a      	orrs	r2, r1
 8006276:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2224      	movs	r2, #36	@ 0x24
 800627c:	2100      	movs	r1, #0
 800627e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006284:	2b00      	cmp	r3, #0
 8006286:	d03a      	beq.n	80062fe <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	0010      	movs	r0, r2
 8006290:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006292:	e034      	b.n	80062fe <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006298:	221c      	movs	r2, #28
 800629a:	4013      	ands	r3, r2
 800629c:	2208      	movs	r2, #8
 800629e:	409a      	lsls	r2, r3
 80062a0:	0013      	movs	r3, r2
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4013      	ands	r3, r2
 80062a6:	d02b      	beq.n	8006300 <HAL_DMA_IRQHandler+0x158>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2208      	movs	r2, #8
 80062ac:	4013      	ands	r3, r2
 80062ae:	d027      	beq.n	8006300 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	210e      	movs	r1, #14
 80062bc:	438a      	bics	r2, r1
 80062be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80062c0:	4b11      	ldr	r3, [pc, #68]	@ (8006308 <HAL_DMA_IRQHandler+0x160>)
 80062c2:	6859      	ldr	r1, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c8:	221c      	movs	r2, #28
 80062ca:	4013      	ands	r3, r2
 80062cc:	2201      	movs	r2, #1
 80062ce:	409a      	lsls	r2, r3
 80062d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006308 <HAL_DMA_IRQHandler+0x160>)
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2225      	movs	r2, #37	@ 0x25
 80062e0:	2101      	movs	r1, #1
 80062e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2224      	movs	r2, #36	@ 0x24
 80062e8:	2100      	movs	r1, #0
 80062ea:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	0010      	movs	r0, r2
 80062fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80062fe:	46c0      	nop			@ (mov r8, r8)
 8006300:	46c0      	nop			@ (mov r8, r8)
}
 8006302:	46bd      	mov	sp, r7
 8006304:	b004      	add	sp, #16
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40020000 	.word	0x40020000

0800630c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006322:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006334:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006336:	4b14      	ldr	r3, [pc, #80]	@ (8006388 <DMA_SetConfig+0x7c>)
 8006338:	6859      	ldr	r1, [r3, #4]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633e:	221c      	movs	r2, #28
 8006340:	4013      	ands	r3, r2
 8006342:	2201      	movs	r2, #1
 8006344:	409a      	lsls	r2, r3
 8006346:	4b10      	ldr	r3, [pc, #64]	@ (8006388 <DMA_SetConfig+0x7c>)
 8006348:	430a      	orrs	r2, r1
 800634a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b10      	cmp	r3, #16
 800635a:	d108      	bne.n	800636e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800636c:	e007      	b.n	800637e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	60da      	str	r2, [r3, #12]
}
 800637e:	46c0      	nop			@ (mov r8, r8)
 8006380:	46bd      	mov	sp, r7
 8006382:	b004      	add	sp, #16
 8006384:	bd80      	pop	{r7, pc}
 8006386:	46c0      	nop			@ (mov r8, r8)
 8006388:	40020000 	.word	0x40020000

0800638c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006398:	089b      	lsrs	r3, r3, #2
 800639a:	4a10      	ldr	r2, [pc, #64]	@ (80063dc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800639c:	4694      	mov	ip, r2
 800639e:	4463      	add	r3, ip
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	001a      	movs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	001a      	movs	r2, r3
 80063ae:	23ff      	movs	r3, #255	@ 0xff
 80063b0:	4013      	ands	r3, r2
 80063b2:	3b08      	subs	r3, #8
 80063b4:	2114      	movs	r1, #20
 80063b6:	0018      	movs	r0, r3
 80063b8:	f7f9 fec0 	bl	800013c <__udivsi3>
 80063bc:	0003      	movs	r3, r0
 80063be:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a07      	ldr	r2, [pc, #28]	@ (80063e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80063c4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	221f      	movs	r2, #31
 80063ca:	4013      	ands	r3, r2
 80063cc:	2201      	movs	r2, #1
 80063ce:	409a      	lsls	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80063d4:	46c0      	nop			@ (mov r8, r8)
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b004      	add	sp, #16
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	10008200 	.word	0x10008200
 80063e0:	40020880 	.word	0x40020880

080063e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	223f      	movs	r2, #63	@ 0x3f
 80063f2:	4013      	ands	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80063fa:	4694      	mov	ip, r2
 80063fc:	4463      	add	r3, ip
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	001a      	movs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a07      	ldr	r2, [pc, #28]	@ (8006428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800640a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3b01      	subs	r3, #1
 8006410:	2203      	movs	r2, #3
 8006412:	4013      	ands	r3, r2
 8006414:	2201      	movs	r2, #1
 8006416:	409a      	lsls	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800641c:	46c0      	nop			@ (mov r8, r8)
 800641e:	46bd      	mov	sp, r7
 8006420:	b004      	add	sp, #16
 8006422:	bd80      	pop	{r7, pc}
 8006424:	1000823f 	.word	0x1000823f
 8006428:	40020940 	.word	0x40020940

0800642c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800643a:	e147      	b.n	80066cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2101      	movs	r1, #1
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4091      	lsls	r1, r2
 8006446:	000a      	movs	r2, r1
 8006448:	4013      	ands	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d100      	bne.n	8006454 <HAL_GPIO_Init+0x28>
 8006452:	e138      	b.n	80066c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2203      	movs	r2, #3
 800645a:	4013      	ands	r3, r2
 800645c:	2b01      	cmp	r3, #1
 800645e:	d005      	beq.n	800646c <HAL_GPIO_Init+0x40>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2203      	movs	r2, #3
 8006466:	4013      	ands	r3, r2
 8006468:	2b02      	cmp	r3, #2
 800646a:	d130      	bne.n	80064ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	2203      	movs	r2, #3
 8006478:	409a      	lsls	r2, r3
 800647a:	0013      	movs	r3, r2
 800647c:	43da      	mvns	r2, r3
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4013      	ands	r3, r2
 8006482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	409a      	lsls	r2, r3
 800648e:	0013      	movs	r3, r2
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064a2:	2201      	movs	r2, #1
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	409a      	lsls	r2, r3
 80064a8:	0013      	movs	r3, r2
 80064aa:	43da      	mvns	r2, r3
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	4013      	ands	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	091b      	lsrs	r3, r3, #4
 80064b8:	2201      	movs	r2, #1
 80064ba:	401a      	ands	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	409a      	lsls	r2, r3
 80064c0:	0013      	movs	r3, r2
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2203      	movs	r2, #3
 80064d4:	4013      	ands	r3, r2
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d017      	beq.n	800650a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	2203      	movs	r2, #3
 80064e6:	409a      	lsls	r2, r3
 80064e8:	0013      	movs	r3, r2
 80064ea:	43da      	mvns	r2, r3
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	4013      	ands	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	409a      	lsls	r2, r3
 80064fc:	0013      	movs	r3, r2
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2203      	movs	r2, #3
 8006510:	4013      	ands	r3, r2
 8006512:	2b02      	cmp	r3, #2
 8006514:	d123      	bne.n	800655e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	08da      	lsrs	r2, r3, #3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3208      	adds	r2, #8
 800651e:	0092      	lsls	r2, r2, #2
 8006520:	58d3      	ldr	r3, [r2, r3]
 8006522:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2207      	movs	r2, #7
 8006528:	4013      	ands	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	220f      	movs	r2, #15
 800652e:	409a      	lsls	r2, r3
 8006530:	0013      	movs	r3, r2
 8006532:	43da      	mvns	r2, r3
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	4013      	ands	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2107      	movs	r1, #7
 8006542:	400b      	ands	r3, r1
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	409a      	lsls	r2, r3
 8006548:	0013      	movs	r3, r2
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	08da      	lsrs	r2, r3, #3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3208      	adds	r2, #8
 8006558:	0092      	lsls	r2, r2, #2
 800655a:	6939      	ldr	r1, [r7, #16]
 800655c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	2203      	movs	r2, #3
 800656a:	409a      	lsls	r2, r3
 800656c:	0013      	movs	r3, r2
 800656e:	43da      	mvns	r2, r3
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4013      	ands	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2203      	movs	r2, #3
 800657c:	401a      	ands	r2, r3
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	409a      	lsls	r2, r3
 8006584:	0013      	movs	r3, r2
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	23c0      	movs	r3, #192	@ 0xc0
 8006598:	029b      	lsls	r3, r3, #10
 800659a:	4013      	ands	r3, r2
 800659c:	d100      	bne.n	80065a0 <HAL_GPIO_Init+0x174>
 800659e:	e092      	b.n	80066c6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80065a0:	4a50      	ldr	r2, [pc, #320]	@ (80066e4 <HAL_GPIO_Init+0x2b8>)
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	089b      	lsrs	r3, r3, #2
 80065a6:	3318      	adds	r3, #24
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	589b      	ldr	r3, [r3, r2]
 80065ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2203      	movs	r2, #3
 80065b2:	4013      	ands	r3, r2
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	220f      	movs	r2, #15
 80065b8:	409a      	lsls	r2, r3
 80065ba:	0013      	movs	r3, r2
 80065bc:	43da      	mvns	r2, r3
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4013      	ands	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	23a0      	movs	r3, #160	@ 0xa0
 80065c8:	05db      	lsls	r3, r3, #23
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d013      	beq.n	80065f6 <HAL_GPIO_Init+0x1ca>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a45      	ldr	r2, [pc, #276]	@ (80066e8 <HAL_GPIO_Init+0x2bc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00d      	beq.n	80065f2 <HAL_GPIO_Init+0x1c6>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a44      	ldr	r2, [pc, #272]	@ (80066ec <HAL_GPIO_Init+0x2c0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d007      	beq.n	80065ee <HAL_GPIO_Init+0x1c2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a43      	ldr	r2, [pc, #268]	@ (80066f0 <HAL_GPIO_Init+0x2c4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d101      	bne.n	80065ea <HAL_GPIO_Init+0x1be>
 80065e6:	2303      	movs	r3, #3
 80065e8:	e006      	b.n	80065f8 <HAL_GPIO_Init+0x1cc>
 80065ea:	2305      	movs	r3, #5
 80065ec:	e004      	b.n	80065f8 <HAL_GPIO_Init+0x1cc>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e002      	b.n	80065f8 <HAL_GPIO_Init+0x1cc>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <HAL_GPIO_Init+0x1cc>
 80065f6:	2300      	movs	r3, #0
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	2103      	movs	r1, #3
 80065fc:	400a      	ands	r2, r1
 80065fe:	00d2      	lsls	r2, r2, #3
 8006600:	4093      	lsls	r3, r2
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006608:	4936      	ldr	r1, [pc, #216]	@ (80066e4 <HAL_GPIO_Init+0x2b8>)
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	089b      	lsrs	r3, r3, #2
 800660e:	3318      	adds	r3, #24
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006616:	4b33      	ldr	r3, [pc, #204]	@ (80066e4 <HAL_GPIO_Init+0x2b8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	43da      	mvns	r2, r3
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4013      	ands	r3, r2
 8006624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	2380      	movs	r3, #128	@ 0x80
 800662c:	035b      	lsls	r3, r3, #13
 800662e:	4013      	ands	r3, r2
 8006630:	d003      	beq.n	800663a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800663a:	4b2a      	ldr	r3, [pc, #168]	@ (80066e4 <HAL_GPIO_Init+0x2b8>)
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006640:	4b28      	ldr	r3, [pc, #160]	@ (80066e4 <HAL_GPIO_Init+0x2b8>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	43da      	mvns	r2, r3
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	4013      	ands	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	2380      	movs	r3, #128	@ 0x80
 8006656:	039b      	lsls	r3, r3, #14
 8006658:	4013      	ands	r3, r2
 800665a:	d003      	beq.n	8006664 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006664:	4b1f      	ldr	r3, [pc, #124]	@ (80066e4 <HAL_GPIO_Init+0x2b8>)
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800666a:	4a1e      	ldr	r2, [pc, #120]	@ (80066e4 <HAL_GPIO_Init+0x2b8>)
 800666c:	2384      	movs	r3, #132	@ 0x84
 800666e:	58d3      	ldr	r3, [r2, r3]
 8006670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	43da      	mvns	r2, r3
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	4013      	ands	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	2380      	movs	r3, #128	@ 0x80
 8006682:	029b      	lsls	r3, r3, #10
 8006684:	4013      	ands	r3, r2
 8006686:	d003      	beq.n	8006690 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006690:	4914      	ldr	r1, [pc, #80]	@ (80066e4 <HAL_GPIO_Init+0x2b8>)
 8006692:	2284      	movs	r2, #132	@ 0x84
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006698:	4a12      	ldr	r2, [pc, #72]	@ (80066e4 <HAL_GPIO_Init+0x2b8>)
 800669a:	2380      	movs	r3, #128	@ 0x80
 800669c:	58d3      	ldr	r3, [r2, r3]
 800669e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	43da      	mvns	r2, r3
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	4013      	ands	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	2380      	movs	r3, #128	@ 0x80
 80066b0:	025b      	lsls	r3, r3, #9
 80066b2:	4013      	ands	r3, r2
 80066b4:	d003      	beq.n	80066be <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80066be:	4909      	ldr	r1, [pc, #36]	@ (80066e4 <HAL_GPIO_Init+0x2b8>)
 80066c0:	2280      	movs	r2, #128	@ 0x80
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	3301      	adds	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	40da      	lsrs	r2, r3
 80066d4:	1e13      	subs	r3, r2, #0
 80066d6:	d000      	beq.n	80066da <HAL_GPIO_Init+0x2ae>
 80066d8:	e6b0      	b.n	800643c <HAL_GPIO_Init+0x10>
  }
}
 80066da:	46c0      	nop			@ (mov r8, r8)
 80066dc:	46c0      	nop			@ (mov r8, r8)
 80066de:	46bd      	mov	sp, r7
 80066e0:	b006      	add	sp, #24
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40021800 	.word	0x40021800
 80066e8:	50000400 	.word	0x50000400
 80066ec:	50000800 	.word	0x50000800
 80066f0:	50000c00 	.word	0x50000c00

080066f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	000a      	movs	r2, r1
 80066fe:	1cbb      	adds	r3, r7, #2
 8006700:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	1cba      	adds	r2, r7, #2
 8006708:	8812      	ldrh	r2, [r2, #0]
 800670a:	4013      	ands	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800670e:	230f      	movs	r3, #15
 8006710:	18fb      	adds	r3, r7, r3
 8006712:	2201      	movs	r2, #1
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	e003      	b.n	8006720 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006718:	230f      	movs	r3, #15
 800671a:	18fb      	adds	r3, r7, r3
 800671c:	2200      	movs	r2, #0
 800671e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006720:	230f      	movs	r3, #15
 8006722:	18fb      	adds	r3, r7, r3
 8006724:	781b      	ldrb	r3, [r3, #0]
}
 8006726:	0018      	movs	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	b004      	add	sp, #16
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	0008      	movs	r0, r1
 8006738:	0011      	movs	r1, r2
 800673a:	1cbb      	adds	r3, r7, #2
 800673c:	1c02      	adds	r2, r0, #0
 800673e:	801a      	strh	r2, [r3, #0]
 8006740:	1c7b      	adds	r3, r7, #1
 8006742:	1c0a      	adds	r2, r1, #0
 8006744:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006746:	1c7b      	adds	r3, r7, #1
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d004      	beq.n	8006758 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800674e:	1cbb      	adds	r3, r7, #2
 8006750:	881a      	ldrh	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006756:	e003      	b.n	8006760 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006758:	1cbb      	adds	r3, r7, #2
 800675a:	881a      	ldrh	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006760:	46c0      	nop			@ (mov r8, r8)
 8006762:	46bd      	mov	sp, r7
 8006764:	b002      	add	sp, #8
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	000a      	movs	r2, r1
 8006772:	1cbb      	adds	r3, r7, #2
 8006774:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800677c:	1cbb      	adds	r3, r7, #2
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4013      	ands	r3, r2
 8006784:	041a      	lsls	r2, r3, #16
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	43db      	mvns	r3, r3
 800678a:	1cb9      	adds	r1, r7, #2
 800678c:	8809      	ldrh	r1, [r1, #0]
 800678e:	400b      	ands	r3, r1
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	619a      	str	r2, [r3, #24]
}
 8006796:	46c0      	nop			@ (mov r8, r8)
 8006798:	46bd      	mov	sp, r7
 800679a:	b004      	add	sp, #16
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80067a8:	4b19      	ldr	r3, [pc, #100]	@ (8006810 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a19      	ldr	r2, [pc, #100]	@ (8006814 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	0019      	movs	r1, r3
 80067b2:	4b17      	ldr	r3, [pc, #92]	@ (8006810 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	2380      	movs	r3, #128	@ 0x80
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d11f      	bne.n	8006804 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80067c4:	4b14      	ldr	r3, [pc, #80]	@ (8006818 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	0013      	movs	r3, r2
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	189b      	adds	r3, r3, r2
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	4912      	ldr	r1, [pc, #72]	@ (800681c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80067d2:	0018      	movs	r0, r3
 80067d4:	f7f9 fcb2 	bl	800013c <__udivsi3>
 80067d8:	0003      	movs	r3, r0
 80067da:	3301      	adds	r3, #1
 80067dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067de:	e008      	b.n	80067f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	e001      	b.n	80067f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e009      	b.n	8006806 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067f2:	4b07      	ldr	r3, [pc, #28]	@ (8006810 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	2380      	movs	r3, #128	@ 0x80
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	401a      	ands	r2, r3
 80067fc:	2380      	movs	r3, #128	@ 0x80
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	429a      	cmp	r2, r3
 8006802:	d0ed      	beq.n	80067e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	0018      	movs	r0, r3
 8006808:	46bd      	mov	sp, r7
 800680a:	b004      	add	sp, #16
 800680c:	bd80      	pop	{r7, pc}
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	40007000 	.word	0x40007000
 8006814:	fffff9ff 	.word	0xfffff9ff
 8006818:	20000014 	.word	0x20000014
 800681c:	000f4240 	.word	0x000f4240

08006820 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006824:	4b03      	ldr	r3, [pc, #12]	@ (8006834 <LL_RCC_GetAPB1Prescaler+0x14>)
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	23e0      	movs	r3, #224	@ 0xe0
 800682a:	01db      	lsls	r3, r3, #7
 800682c:	4013      	ands	r3, r2
}
 800682e:	0018      	movs	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40021000 	.word	0x40021000

08006838 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e2fe      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2201      	movs	r2, #1
 8006850:	4013      	ands	r3, r2
 8006852:	d100      	bne.n	8006856 <HAL_RCC_OscConfig+0x1e>
 8006854:	e07c      	b.n	8006950 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006856:	4bc3      	ldr	r3, [pc, #780]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2238      	movs	r2, #56	@ 0x38
 800685c:	4013      	ands	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006860:	4bc0      	ldr	r3, [pc, #768]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2203      	movs	r2, #3
 8006866:	4013      	ands	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b10      	cmp	r3, #16
 800686e:	d102      	bne.n	8006876 <HAL_RCC_OscConfig+0x3e>
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b03      	cmp	r3, #3
 8006874:	d002      	beq.n	800687c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b08      	cmp	r3, #8
 800687a:	d10b      	bne.n	8006894 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800687c:	4bb9      	ldr	r3, [pc, #740]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	2380      	movs	r3, #128	@ 0x80
 8006882:	029b      	lsls	r3, r3, #10
 8006884:	4013      	ands	r3, r2
 8006886:	d062      	beq.n	800694e <HAL_RCC_OscConfig+0x116>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d15e      	bne.n	800694e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e2d9      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	2380      	movs	r3, #128	@ 0x80
 800689a:	025b      	lsls	r3, r3, #9
 800689c:	429a      	cmp	r2, r3
 800689e:	d107      	bne.n	80068b0 <HAL_RCC_OscConfig+0x78>
 80068a0:	4bb0      	ldr	r3, [pc, #704]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4baf      	ldr	r3, [pc, #700]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80068a6:	2180      	movs	r1, #128	@ 0x80
 80068a8:	0249      	lsls	r1, r1, #9
 80068aa:	430a      	orrs	r2, r1
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e020      	b.n	80068f2 <HAL_RCC_OscConfig+0xba>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	23a0      	movs	r3, #160	@ 0xa0
 80068b6:	02db      	lsls	r3, r3, #11
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d10e      	bne.n	80068da <HAL_RCC_OscConfig+0xa2>
 80068bc:	4ba9      	ldr	r3, [pc, #676]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	4ba8      	ldr	r3, [pc, #672]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80068c2:	2180      	movs	r1, #128	@ 0x80
 80068c4:	02c9      	lsls	r1, r1, #11
 80068c6:	430a      	orrs	r2, r1
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	4ba6      	ldr	r3, [pc, #664]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4ba5      	ldr	r3, [pc, #660]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80068d0:	2180      	movs	r1, #128	@ 0x80
 80068d2:	0249      	lsls	r1, r1, #9
 80068d4:	430a      	orrs	r2, r1
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	e00b      	b.n	80068f2 <HAL_RCC_OscConfig+0xba>
 80068da:	4ba2      	ldr	r3, [pc, #648]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	4ba1      	ldr	r3, [pc, #644]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80068e0:	49a1      	ldr	r1, [pc, #644]	@ (8006b68 <HAL_RCC_OscConfig+0x330>)
 80068e2:	400a      	ands	r2, r1
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	4b9f      	ldr	r3, [pc, #636]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4b9e      	ldr	r3, [pc, #632]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80068ec:	499f      	ldr	r1, [pc, #636]	@ (8006b6c <HAL_RCC_OscConfig+0x334>)
 80068ee:	400a      	ands	r2, r1
 80068f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d014      	beq.n	8006924 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fa:	f7fe fb17 	bl	8004f2c <HAL_GetTick>
 80068fe:	0003      	movs	r3, r0
 8006900:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006904:	f7fe fb12 	bl	8004f2c <HAL_GetTick>
 8006908:	0002      	movs	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b64      	cmp	r3, #100	@ 0x64
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e298      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006916:	4b93      	ldr	r3, [pc, #588]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	2380      	movs	r3, #128	@ 0x80
 800691c:	029b      	lsls	r3, r3, #10
 800691e:	4013      	ands	r3, r2
 8006920:	d0f0      	beq.n	8006904 <HAL_RCC_OscConfig+0xcc>
 8006922:	e015      	b.n	8006950 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006924:	f7fe fb02 	bl	8004f2c <HAL_GetTick>
 8006928:	0003      	movs	r3, r0
 800692a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800692c:	e008      	b.n	8006940 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800692e:	f7fe fafd 	bl	8004f2c <HAL_GetTick>
 8006932:	0002      	movs	r2, r0
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b64      	cmp	r3, #100	@ 0x64
 800693a:	d901      	bls.n	8006940 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e283      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006940:	4b88      	ldr	r3, [pc, #544]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	2380      	movs	r3, #128	@ 0x80
 8006946:	029b      	lsls	r3, r3, #10
 8006948:	4013      	ands	r3, r2
 800694a:	d1f0      	bne.n	800692e <HAL_RCC_OscConfig+0xf6>
 800694c:	e000      	b.n	8006950 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800694e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2202      	movs	r2, #2
 8006956:	4013      	ands	r3, r2
 8006958:	d100      	bne.n	800695c <HAL_RCC_OscConfig+0x124>
 800695a:	e099      	b.n	8006a90 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800695c:	4b81      	ldr	r3, [pc, #516]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2238      	movs	r2, #56	@ 0x38
 8006962:	4013      	ands	r3, r2
 8006964:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006966:	4b7f      	ldr	r3, [pc, #508]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	2203      	movs	r2, #3
 800696c:	4013      	ands	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2b10      	cmp	r3, #16
 8006974:	d102      	bne.n	800697c <HAL_RCC_OscConfig+0x144>
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d002      	beq.n	8006982 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d135      	bne.n	80069ee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006982:	4b78      	ldr	r3, [pc, #480]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	2380      	movs	r3, #128	@ 0x80
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	4013      	ands	r3, r2
 800698c:	d005      	beq.n	800699a <HAL_RCC_OscConfig+0x162>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e256      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699a:	4b72      	ldr	r3, [pc, #456]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	4a74      	ldr	r2, [pc, #464]	@ (8006b70 <HAL_RCC_OscConfig+0x338>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	0019      	movs	r1, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	021a      	lsls	r2, r3, #8
 80069aa:	4b6e      	ldr	r3, [pc, #440]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80069ac:	430a      	orrs	r2, r1
 80069ae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d112      	bne.n	80069dc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80069b6:	4b6b      	ldr	r3, [pc, #428]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a6e      	ldr	r2, [pc, #440]	@ (8006b74 <HAL_RCC_OscConfig+0x33c>)
 80069bc:	4013      	ands	r3, r2
 80069be:	0019      	movs	r1, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	4b67      	ldr	r3, [pc, #412]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80069c6:	430a      	orrs	r2, r1
 80069c8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80069ca:	4b66      	ldr	r3, [pc, #408]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	0adb      	lsrs	r3, r3, #11
 80069d0:	2207      	movs	r2, #7
 80069d2:	4013      	ands	r3, r2
 80069d4:	4a68      	ldr	r2, [pc, #416]	@ (8006b78 <HAL_RCC_OscConfig+0x340>)
 80069d6:	40da      	lsrs	r2, r3
 80069d8:	4b68      	ldr	r3, [pc, #416]	@ (8006b7c <HAL_RCC_OscConfig+0x344>)
 80069da:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80069dc:	4b68      	ldr	r3, [pc, #416]	@ (8006b80 <HAL_RCC_OscConfig+0x348>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	0018      	movs	r0, r3
 80069e2:	f7fe fa47 	bl	8004e74 <HAL_InitTick>
 80069e6:	1e03      	subs	r3, r0, #0
 80069e8:	d051      	beq.n	8006a8e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e22c      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d030      	beq.n	8006a58 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80069f6:	4b5b      	ldr	r3, [pc, #364]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a5e      	ldr	r2, [pc, #376]	@ (8006b74 <HAL_RCC_OscConfig+0x33c>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	0019      	movs	r1, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691a      	ldr	r2, [r3, #16]
 8006a04:	4b57      	ldr	r3, [pc, #348]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006a06:	430a      	orrs	r2, r1
 8006a08:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006a0a:	4b56      	ldr	r3, [pc, #344]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b55      	ldr	r3, [pc, #340]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006a10:	2180      	movs	r1, #128	@ 0x80
 8006a12:	0049      	lsls	r1, r1, #1
 8006a14:	430a      	orrs	r2, r1
 8006a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a18:	f7fe fa88 	bl	8004f2c <HAL_GetTick>
 8006a1c:	0003      	movs	r3, r0
 8006a1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a20:	e008      	b.n	8006a34 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a22:	f7fe fa83 	bl	8004f2c <HAL_GetTick>
 8006a26:	0002      	movs	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e209      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a34:	4b4b      	ldr	r3, [pc, #300]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	2380      	movs	r3, #128	@ 0x80
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d0f0      	beq.n	8006a22 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a40:	4b48      	ldr	r3, [pc, #288]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	4a4a      	ldr	r2, [pc, #296]	@ (8006b70 <HAL_RCC_OscConfig+0x338>)
 8006a46:	4013      	ands	r3, r2
 8006a48:	0019      	movs	r1, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	021a      	lsls	r2, r3, #8
 8006a50:	4b44      	ldr	r3, [pc, #272]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006a52:	430a      	orrs	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]
 8006a56:	e01b      	b.n	8006a90 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006a58:	4b42      	ldr	r3, [pc, #264]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	4b41      	ldr	r3, [pc, #260]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006a5e:	4949      	ldr	r1, [pc, #292]	@ (8006b84 <HAL_RCC_OscConfig+0x34c>)
 8006a60:	400a      	ands	r2, r1
 8006a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a64:	f7fe fa62 	bl	8004f2c <HAL_GetTick>
 8006a68:	0003      	movs	r3, r0
 8006a6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a6e:	f7fe fa5d 	bl	8004f2c <HAL_GetTick>
 8006a72:	0002      	movs	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e1e3      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a80:	4b38      	ldr	r3, [pc, #224]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	2380      	movs	r3, #128	@ 0x80
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	4013      	ands	r3, r2
 8006a8a:	d1f0      	bne.n	8006a6e <HAL_RCC_OscConfig+0x236>
 8006a8c:	e000      	b.n	8006a90 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a8e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2208      	movs	r2, #8
 8006a96:	4013      	ands	r3, r2
 8006a98:	d047      	beq.n	8006b2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006a9a:	4b32      	ldr	r3, [pc, #200]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	2238      	movs	r2, #56	@ 0x38
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b18      	cmp	r3, #24
 8006aa4:	d10a      	bne.n	8006abc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aaa:	2202      	movs	r2, #2
 8006aac:	4013      	ands	r3, r2
 8006aae:	d03c      	beq.n	8006b2a <HAL_RCC_OscConfig+0x2f2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d138      	bne.n	8006b2a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e1c5      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d019      	beq.n	8006af8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006ac4:	4b27      	ldr	r3, [pc, #156]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006ac6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ac8:	4b26      	ldr	r3, [pc, #152]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006aca:	2101      	movs	r1, #1
 8006acc:	430a      	orrs	r2, r1
 8006ace:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad0:	f7fe fa2c 	bl	8004f2c <HAL_GetTick>
 8006ad4:	0003      	movs	r3, r0
 8006ad6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ad8:	e008      	b.n	8006aec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ada:	f7fe fa27 	bl	8004f2c <HAL_GetTick>
 8006ade:	0002      	movs	r2, r0
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e1ad      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006aec:	4b1d      	ldr	r3, [pc, #116]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006af0:	2202      	movs	r2, #2
 8006af2:	4013      	ands	r3, r2
 8006af4:	d0f1      	beq.n	8006ada <HAL_RCC_OscConfig+0x2a2>
 8006af6:	e018      	b.n	8006b2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006af8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006afa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006afc:	4b19      	ldr	r3, [pc, #100]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006afe:	2101      	movs	r1, #1
 8006b00:	438a      	bics	r2, r1
 8006b02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b04:	f7fe fa12 	bl	8004f2c <HAL_GetTick>
 8006b08:	0003      	movs	r3, r0
 8006b0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b0c:	e008      	b.n	8006b20 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b0e:	f7fe fa0d 	bl	8004f2c <HAL_GetTick>
 8006b12:	0002      	movs	r2, r0
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d901      	bls.n	8006b20 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e193      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b20:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b24:	2202      	movs	r2, #2
 8006b26:	4013      	ands	r3, r2
 8006b28:	d1f1      	bne.n	8006b0e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2204      	movs	r2, #4
 8006b30:	4013      	ands	r3, r2
 8006b32:	d100      	bne.n	8006b36 <HAL_RCC_OscConfig+0x2fe>
 8006b34:	e0c6      	b.n	8006cc4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b36:	231f      	movs	r3, #31
 8006b38:	18fb      	adds	r3, r7, r3
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006b3e:	4b09      	ldr	r3, [pc, #36]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2238      	movs	r2, #56	@ 0x38
 8006b44:	4013      	ands	r3, r2
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d11e      	bne.n	8006b88 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006b4a:	4b06      	ldr	r3, [pc, #24]	@ (8006b64 <HAL_RCC_OscConfig+0x32c>)
 8006b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b4e:	2202      	movs	r2, #2
 8006b50:	4013      	ands	r3, r2
 8006b52:	d100      	bne.n	8006b56 <HAL_RCC_OscConfig+0x31e>
 8006b54:	e0b6      	b.n	8006cc4 <HAL_RCC_OscConfig+0x48c>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d000      	beq.n	8006b60 <HAL_RCC_OscConfig+0x328>
 8006b5e:	e0b1      	b.n	8006cc4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e171      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
 8006b64:	40021000 	.word	0x40021000
 8006b68:	fffeffff 	.word	0xfffeffff
 8006b6c:	fffbffff 	.word	0xfffbffff
 8006b70:	ffff80ff 	.word	0xffff80ff
 8006b74:	ffffc7ff 	.word	0xffffc7ff
 8006b78:	00f42400 	.word	0x00f42400
 8006b7c:	20000014 	.word	0x20000014
 8006b80:	20000018 	.word	0x20000018
 8006b84:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b88:	4bb1      	ldr	r3, [pc, #708]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006b8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b8c:	2380      	movs	r3, #128	@ 0x80
 8006b8e:	055b      	lsls	r3, r3, #21
 8006b90:	4013      	ands	r3, r2
 8006b92:	d101      	bne.n	8006b98 <HAL_RCC_OscConfig+0x360>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <HAL_RCC_OscConfig+0x362>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d011      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006b9e:	4bac      	ldr	r3, [pc, #688]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006ba0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ba2:	4bab      	ldr	r3, [pc, #684]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006ba4:	2180      	movs	r1, #128	@ 0x80
 8006ba6:	0549      	lsls	r1, r1, #21
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006bac:	4ba8      	ldr	r3, [pc, #672]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006bae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bb0:	2380      	movs	r3, #128	@ 0x80
 8006bb2:	055b      	lsls	r3, r3, #21
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006bba:	231f      	movs	r3, #31
 8006bbc:	18fb      	adds	r3, r7, r3
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bc2:	4ba4      	ldr	r3, [pc, #656]	@ (8006e54 <HAL_RCC_OscConfig+0x61c>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	2380      	movs	r3, #128	@ 0x80
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	4013      	ands	r3, r2
 8006bcc:	d11a      	bne.n	8006c04 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bce:	4ba1      	ldr	r3, [pc, #644]	@ (8006e54 <HAL_RCC_OscConfig+0x61c>)
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	4ba0      	ldr	r3, [pc, #640]	@ (8006e54 <HAL_RCC_OscConfig+0x61c>)
 8006bd4:	2180      	movs	r1, #128	@ 0x80
 8006bd6:	0049      	lsls	r1, r1, #1
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006bdc:	f7fe f9a6 	bl	8004f2c <HAL_GetTick>
 8006be0:	0003      	movs	r3, r0
 8006be2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006be6:	f7fe f9a1 	bl	8004f2c <HAL_GetTick>
 8006bea:	0002      	movs	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e127      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bf8:	4b96      	ldr	r3, [pc, #600]	@ (8006e54 <HAL_RCC_OscConfig+0x61c>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	2380      	movs	r3, #128	@ 0x80
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	4013      	ands	r3, r2
 8006c02:	d0f0      	beq.n	8006be6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d106      	bne.n	8006c1a <HAL_RCC_OscConfig+0x3e2>
 8006c0c:	4b90      	ldr	r3, [pc, #576]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006c0e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c10:	4b8f      	ldr	r3, [pc, #572]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006c12:	2101      	movs	r1, #1
 8006c14:	430a      	orrs	r2, r1
 8006c16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c18:	e01c      	b.n	8006c54 <HAL_RCC_OscConfig+0x41c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b05      	cmp	r3, #5
 8006c20:	d10c      	bne.n	8006c3c <HAL_RCC_OscConfig+0x404>
 8006c22:	4b8b      	ldr	r3, [pc, #556]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006c24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c26:	4b8a      	ldr	r3, [pc, #552]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006c28:	2104      	movs	r1, #4
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c2e:	4b88      	ldr	r3, [pc, #544]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006c30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c32:	4b87      	ldr	r3, [pc, #540]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006c34:	2101      	movs	r1, #1
 8006c36:	430a      	orrs	r2, r1
 8006c38:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c3a:	e00b      	b.n	8006c54 <HAL_RCC_OscConfig+0x41c>
 8006c3c:	4b84      	ldr	r3, [pc, #528]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006c3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c40:	4b83      	ldr	r3, [pc, #524]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006c42:	2101      	movs	r1, #1
 8006c44:	438a      	bics	r2, r1
 8006c46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c48:	4b81      	ldr	r3, [pc, #516]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006c4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c4c:	4b80      	ldr	r3, [pc, #512]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006c4e:	2104      	movs	r1, #4
 8006c50:	438a      	bics	r2, r1
 8006c52:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d014      	beq.n	8006c86 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5c:	f7fe f966 	bl	8004f2c <HAL_GetTick>
 8006c60:	0003      	movs	r3, r0
 8006c62:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c64:	e009      	b.n	8006c7a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c66:	f7fe f961 	bl	8004f2c <HAL_GetTick>
 8006c6a:	0002      	movs	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	4a79      	ldr	r2, [pc, #484]	@ (8006e58 <HAL_RCC_OscConfig+0x620>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e0e6      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c7a:	4b75      	ldr	r3, [pc, #468]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c7e:	2202      	movs	r2, #2
 8006c80:	4013      	ands	r3, r2
 8006c82:	d0f0      	beq.n	8006c66 <HAL_RCC_OscConfig+0x42e>
 8006c84:	e013      	b.n	8006cae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c86:	f7fe f951 	bl	8004f2c <HAL_GetTick>
 8006c8a:	0003      	movs	r3, r0
 8006c8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c8e:	e009      	b.n	8006ca4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c90:	f7fe f94c 	bl	8004f2c <HAL_GetTick>
 8006c94:	0002      	movs	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	4a6f      	ldr	r2, [pc, #444]	@ (8006e58 <HAL_RCC_OscConfig+0x620>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e0d1      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca8:	2202      	movs	r2, #2
 8006caa:	4013      	ands	r3, r2
 8006cac:	d1f0      	bne.n	8006c90 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006cae:	231f      	movs	r3, #31
 8006cb0:	18fb      	adds	r3, r7, r3
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d105      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006cb8:	4b65      	ldr	r3, [pc, #404]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006cba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cbc:	4b64      	ldr	r3, [pc, #400]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006cbe:	4967      	ldr	r1, [pc, #412]	@ (8006e5c <HAL_RCC_OscConfig+0x624>)
 8006cc0:	400a      	ands	r2, r1
 8006cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d100      	bne.n	8006cce <HAL_RCC_OscConfig+0x496>
 8006ccc:	e0bb      	b.n	8006e46 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cce:	4b60      	ldr	r3, [pc, #384]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	2238      	movs	r2, #56	@ 0x38
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	2b10      	cmp	r3, #16
 8006cd8:	d100      	bne.n	8006cdc <HAL_RCC_OscConfig+0x4a4>
 8006cda:	e07b      	b.n	8006dd4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d156      	bne.n	8006d92 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	4b59      	ldr	r3, [pc, #356]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006cea:	495d      	ldr	r1, [pc, #372]	@ (8006e60 <HAL_RCC_OscConfig+0x628>)
 8006cec:	400a      	ands	r2, r1
 8006cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fe f91c 	bl	8004f2c <HAL_GetTick>
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cfa:	f7fe f917 	bl	8004f2c <HAL_GetTick>
 8006cfe:	0002      	movs	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e09d      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d0c:	4b50      	ldr	r3, [pc, #320]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	2380      	movs	r3, #128	@ 0x80
 8006d12:	049b      	lsls	r3, r3, #18
 8006d14:	4013      	ands	r3, r2
 8006d16:	d1f0      	bne.n	8006cfa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d18:	4b4d      	ldr	r3, [pc, #308]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4a51      	ldr	r2, [pc, #324]	@ (8006e64 <HAL_RCC_OscConfig+0x62c>)
 8006d1e:	4013      	ands	r3, r2
 8006d20:	0019      	movs	r1, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1a      	ldr	r2, [r3, #32]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d30:	021b      	lsls	r3, r3, #8
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d44:	431a      	orrs	r2, r3
 8006d46:	4b42      	ldr	r3, [pc, #264]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d4c:	4b40      	ldr	r3, [pc, #256]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b3f      	ldr	r3, [pc, #252]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006d52:	2180      	movs	r1, #128	@ 0x80
 8006d54:	0449      	lsls	r1, r1, #17
 8006d56:	430a      	orrs	r2, r1
 8006d58:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006d60:	2180      	movs	r1, #128	@ 0x80
 8006d62:	0549      	lsls	r1, r1, #21
 8006d64:	430a      	orrs	r2, r1
 8006d66:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d68:	f7fe f8e0 	bl	8004f2c <HAL_GetTick>
 8006d6c:	0003      	movs	r3, r0
 8006d6e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d70:	e008      	b.n	8006d84 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d72:	f7fe f8db 	bl	8004f2c <HAL_GetTick>
 8006d76:	0002      	movs	r2, r0
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d901      	bls.n	8006d84 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e061      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d84:	4b32      	ldr	r3, [pc, #200]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	2380      	movs	r3, #128	@ 0x80
 8006d8a:	049b      	lsls	r3, r3, #18
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	d0f0      	beq.n	8006d72 <HAL_RCC_OscConfig+0x53a>
 8006d90:	e059      	b.n	8006e46 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d92:	4b2f      	ldr	r3, [pc, #188]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	4b2e      	ldr	r3, [pc, #184]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006d98:	4931      	ldr	r1, [pc, #196]	@ (8006e60 <HAL_RCC_OscConfig+0x628>)
 8006d9a:	400a      	ands	r2, r1
 8006d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d9e:	f7fe f8c5 	bl	8004f2c <HAL_GetTick>
 8006da2:	0003      	movs	r3, r0
 8006da4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006da8:	f7fe f8c0 	bl	8004f2c <HAL_GetTick>
 8006dac:	0002      	movs	r2, r0
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e046      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dba:	4b25      	ldr	r3, [pc, #148]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	2380      	movs	r3, #128	@ 0x80
 8006dc0:	049b      	lsls	r3, r3, #18
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	d1f0      	bne.n	8006da8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006dc6:	4b22      	ldr	r3, [pc, #136]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	4b21      	ldr	r3, [pc, #132]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006dcc:	4926      	ldr	r1, [pc, #152]	@ (8006e68 <HAL_RCC_OscConfig+0x630>)
 8006dce:	400a      	ands	r2, r1
 8006dd0:	60da      	str	r2, [r3, #12]
 8006dd2:	e038      	b.n	8006e46 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e033      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006de0:	4b1b      	ldr	r3, [pc, #108]	@ (8006e50 <HAL_RCC_OscConfig+0x618>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2203      	movs	r2, #3
 8006dea:	401a      	ands	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d126      	bne.n	8006e42 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2270      	movs	r2, #112	@ 0x70
 8006df8:	401a      	ands	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d11f      	bne.n	8006e42 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	23fe      	movs	r3, #254	@ 0xfe
 8006e06:	01db      	lsls	r3, r3, #7
 8006e08:	401a      	ands	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d116      	bne.n	8006e42 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	23f8      	movs	r3, #248	@ 0xf8
 8006e18:	039b      	lsls	r3, r3, #14
 8006e1a:	401a      	ands	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d10e      	bne.n	8006e42 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	23e0      	movs	r3, #224	@ 0xe0
 8006e28:	051b      	lsls	r3, r3, #20
 8006e2a:	401a      	ands	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d106      	bne.n	8006e42 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	0f5b      	lsrs	r3, r3, #29
 8006e38:	075a      	lsls	r2, r3, #29
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d001      	beq.n	8006e46 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	0018      	movs	r0, r3
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	b008      	add	sp, #32
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40021000 	.word	0x40021000
 8006e54:	40007000 	.word	0x40007000
 8006e58:	00001388 	.word	0x00001388
 8006e5c:	efffffff 	.word	0xefffffff
 8006e60:	feffffff 	.word	0xfeffffff
 8006e64:	11c1808c 	.word	0x11c1808c
 8006e68:	eefefffc 	.word	0xeefefffc

08006e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e0e9      	b.n	8007054 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e80:	4b76      	ldr	r3, [pc, #472]	@ (800705c <HAL_RCC_ClockConfig+0x1f0>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2207      	movs	r2, #7
 8006e86:	4013      	ands	r3, r2
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d91e      	bls.n	8006ecc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e8e:	4b73      	ldr	r3, [pc, #460]	@ (800705c <HAL_RCC_ClockConfig+0x1f0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2207      	movs	r2, #7
 8006e94:	4393      	bics	r3, r2
 8006e96:	0019      	movs	r1, r3
 8006e98:	4b70      	ldr	r3, [pc, #448]	@ (800705c <HAL_RCC_ClockConfig+0x1f0>)
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ea0:	f7fe f844 	bl	8004f2c <HAL_GetTick>
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006ea8:	e009      	b.n	8006ebe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eaa:	f7fe f83f 	bl	8004f2c <HAL_GetTick>
 8006eae:	0002      	movs	r2, r0
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	4a6a      	ldr	r2, [pc, #424]	@ (8007060 <HAL_RCC_ClockConfig+0x1f4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e0ca      	b.n	8007054 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006ebe:	4b67      	ldr	r3, [pc, #412]	@ (800705c <HAL_RCC_ClockConfig+0x1f0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2207      	movs	r2, #7
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d1ee      	bne.n	8006eaa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	d015      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2204      	movs	r2, #4
 8006edc:	4013      	ands	r3, r2
 8006ede:	d006      	beq.n	8006eee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006ee0:	4b60      	ldr	r3, [pc, #384]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	4b5f      	ldr	r3, [pc, #380]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8006ee6:	21e0      	movs	r1, #224	@ 0xe0
 8006ee8:	01c9      	lsls	r1, r1, #7
 8006eea:	430a      	orrs	r2, r1
 8006eec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eee:	4b5d      	ldr	r3, [pc, #372]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	4a5d      	ldr	r2, [pc, #372]	@ (8007068 <HAL_RCC_ClockConfig+0x1fc>)
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	0019      	movs	r1, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	4b59      	ldr	r3, [pc, #356]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8006efe:	430a      	orrs	r2, r1
 8006f00:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2201      	movs	r2, #1
 8006f08:	4013      	ands	r3, r2
 8006f0a:	d057      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d107      	bne.n	8006f24 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f14:	4b53      	ldr	r3, [pc, #332]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	2380      	movs	r3, #128	@ 0x80
 8006f1a:	029b      	lsls	r3, r3, #10
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	d12b      	bne.n	8006f78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e097      	b.n	8007054 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d107      	bne.n	8006f3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	2380      	movs	r3, #128	@ 0x80
 8006f32:	049b      	lsls	r3, r3, #18
 8006f34:	4013      	ands	r3, r2
 8006f36:	d11f      	bne.n	8006f78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e08b      	b.n	8007054 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f44:	4b47      	ldr	r3, [pc, #284]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	2380      	movs	r3, #128	@ 0x80
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	d113      	bne.n	8006f78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e07f      	b.n	8007054 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d106      	bne.n	8006f6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f5c:	4b41      	ldr	r3, [pc, #260]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8006f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f60:	2202      	movs	r2, #2
 8006f62:	4013      	ands	r3, r2
 8006f64:	d108      	bne.n	8006f78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e074      	b.n	8007054 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8006f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f6e:	2202      	movs	r2, #2
 8006f70:	4013      	ands	r3, r2
 8006f72:	d101      	bne.n	8006f78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e06d      	b.n	8007054 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f78:	4b3a      	ldr	r3, [pc, #232]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	2207      	movs	r2, #7
 8006f7e:	4393      	bics	r3, r2
 8006f80:	0019      	movs	r1, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	4b37      	ldr	r3, [pc, #220]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f8c:	f7fd ffce 	bl	8004f2c <HAL_GetTick>
 8006f90:	0003      	movs	r3, r0
 8006f92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f94:	e009      	b.n	8006faa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f96:	f7fd ffc9 	bl	8004f2c <HAL_GetTick>
 8006f9a:	0002      	movs	r2, r0
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8007060 <HAL_RCC_ClockConfig+0x1f4>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e054      	b.n	8007054 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006faa:	4b2e      	ldr	r3, [pc, #184]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2238      	movs	r2, #56	@ 0x38
 8006fb0:	401a      	ands	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d1ec      	bne.n	8006f96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fbc:	4b27      	ldr	r3, [pc, #156]	@ (800705c <HAL_RCC_ClockConfig+0x1f0>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2207      	movs	r2, #7
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d21e      	bcs.n	8007008 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fca:	4b24      	ldr	r3, [pc, #144]	@ (800705c <HAL_RCC_ClockConfig+0x1f0>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2207      	movs	r2, #7
 8006fd0:	4393      	bics	r3, r2
 8006fd2:	0019      	movs	r1, r3
 8006fd4:	4b21      	ldr	r3, [pc, #132]	@ (800705c <HAL_RCC_ClockConfig+0x1f0>)
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006fdc:	f7fd ffa6 	bl	8004f2c <HAL_GetTick>
 8006fe0:	0003      	movs	r3, r0
 8006fe2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006fe4:	e009      	b.n	8006ffa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe6:	f7fd ffa1 	bl	8004f2c <HAL_GetTick>
 8006fea:	0002      	movs	r2, r0
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8007060 <HAL_RCC_ClockConfig+0x1f4>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e02c      	b.n	8007054 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006ffa:	4b18      	ldr	r3, [pc, #96]	@ (800705c <HAL_RCC_ClockConfig+0x1f0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2207      	movs	r2, #7
 8007000:	4013      	ands	r3, r2
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d1ee      	bne.n	8006fe6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2204      	movs	r2, #4
 800700e:	4013      	ands	r3, r2
 8007010:	d009      	beq.n	8007026 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007012:	4b14      	ldr	r3, [pc, #80]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	4a15      	ldr	r2, [pc, #84]	@ (800706c <HAL_RCC_ClockConfig+0x200>)
 8007018:	4013      	ands	r3, r2
 800701a:	0019      	movs	r1, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	4b10      	ldr	r3, [pc, #64]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 8007022:	430a      	orrs	r2, r1
 8007024:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007026:	f000 f829 	bl	800707c <HAL_RCC_GetSysClockFreq>
 800702a:	0001      	movs	r1, r0
 800702c:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <HAL_RCC_ClockConfig+0x1f8>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	0a1b      	lsrs	r3, r3, #8
 8007032:	220f      	movs	r2, #15
 8007034:	401a      	ands	r2, r3
 8007036:	4b0e      	ldr	r3, [pc, #56]	@ (8007070 <HAL_RCC_ClockConfig+0x204>)
 8007038:	0092      	lsls	r2, r2, #2
 800703a:	58d3      	ldr	r3, [r2, r3]
 800703c:	221f      	movs	r2, #31
 800703e:	4013      	ands	r3, r2
 8007040:	000a      	movs	r2, r1
 8007042:	40da      	lsrs	r2, r3
 8007044:	4b0b      	ldr	r3, [pc, #44]	@ (8007074 <HAL_RCC_ClockConfig+0x208>)
 8007046:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007048:	4b0b      	ldr	r3, [pc, #44]	@ (8007078 <HAL_RCC_ClockConfig+0x20c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	0018      	movs	r0, r3
 800704e:	f7fd ff11 	bl	8004e74 <HAL_InitTick>
 8007052:	0003      	movs	r3, r0
}
 8007054:	0018      	movs	r0, r3
 8007056:	46bd      	mov	sp, r7
 8007058:	b004      	add	sp, #16
 800705a:	bd80      	pop	{r7, pc}
 800705c:	40022000 	.word	0x40022000
 8007060:	00001388 	.word	0x00001388
 8007064:	40021000 	.word	0x40021000
 8007068:	fffff0ff 	.word	0xfffff0ff
 800706c:	ffff8fff 	.word	0xffff8fff
 8007070:	0800d888 	.word	0x0800d888
 8007074:	20000014 	.word	0x20000014
 8007078:	20000018 	.word	0x20000018

0800707c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007082:	4b3c      	ldr	r3, [pc, #240]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2238      	movs	r2, #56	@ 0x38
 8007088:	4013      	ands	r3, r2
 800708a:	d10f      	bne.n	80070ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800708c:	4b39      	ldr	r3, [pc, #228]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xf8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	0adb      	lsrs	r3, r3, #11
 8007092:	2207      	movs	r2, #7
 8007094:	4013      	ands	r3, r2
 8007096:	2201      	movs	r2, #1
 8007098:	409a      	lsls	r2, r3
 800709a:	0013      	movs	r3, r2
 800709c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	4835      	ldr	r0, [pc, #212]	@ (8007178 <HAL_RCC_GetSysClockFreq+0xfc>)
 80070a2:	f7f9 f84b 	bl	800013c <__udivsi3>
 80070a6:	0003      	movs	r3, r0
 80070a8:	613b      	str	r3, [r7, #16]
 80070aa:	e05d      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070ac:	4b31      	ldr	r3, [pc, #196]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xf8>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2238      	movs	r2, #56	@ 0x38
 80070b2:	4013      	ands	r3, r2
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d102      	bne.n	80070be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80070b8:	4b30      	ldr	r3, [pc, #192]	@ (800717c <HAL_RCC_GetSysClockFreq+0x100>)
 80070ba:	613b      	str	r3, [r7, #16]
 80070bc:	e054      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070be:	4b2d      	ldr	r3, [pc, #180]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xf8>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2238      	movs	r2, #56	@ 0x38
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b10      	cmp	r3, #16
 80070c8:	d138      	bne.n	800713c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80070ca:	4b2a      	ldr	r3, [pc, #168]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xf8>)
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	2203      	movs	r2, #3
 80070d0:	4013      	ands	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070d4:	4b27      	ldr	r3, [pc, #156]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xf8>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	091b      	lsrs	r3, r3, #4
 80070da:	2207      	movs	r2, #7
 80070dc:	4013      	ands	r3, r2
 80070de:	3301      	adds	r3, #1
 80070e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d10d      	bne.n	8007104 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	4824      	ldr	r0, [pc, #144]	@ (800717c <HAL_RCC_GetSysClockFreq+0x100>)
 80070ec:	f7f9 f826 	bl	800013c <__udivsi3>
 80070f0:	0003      	movs	r3, r0
 80070f2:	0019      	movs	r1, r3
 80070f4:	4b1f      	ldr	r3, [pc, #124]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xf8>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	0a1b      	lsrs	r3, r3, #8
 80070fa:	227f      	movs	r2, #127	@ 0x7f
 80070fc:	4013      	ands	r3, r2
 80070fe:	434b      	muls	r3, r1
 8007100:	617b      	str	r3, [r7, #20]
        break;
 8007102:	e00d      	b.n	8007120 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	481c      	ldr	r0, [pc, #112]	@ (8007178 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007108:	f7f9 f818 	bl	800013c <__udivsi3>
 800710c:	0003      	movs	r3, r0
 800710e:	0019      	movs	r1, r3
 8007110:	4b18      	ldr	r3, [pc, #96]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	0a1b      	lsrs	r3, r3, #8
 8007116:	227f      	movs	r2, #127	@ 0x7f
 8007118:	4013      	ands	r3, r2
 800711a:	434b      	muls	r3, r1
 800711c:	617b      	str	r3, [r7, #20]
        break;
 800711e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007120:	4b14      	ldr	r3, [pc, #80]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	0f5b      	lsrs	r3, r3, #29
 8007126:	2207      	movs	r2, #7
 8007128:	4013      	ands	r3, r2
 800712a:	3301      	adds	r3, #1
 800712c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	6978      	ldr	r0, [r7, #20]
 8007132:	f7f9 f803 	bl	800013c <__udivsi3>
 8007136:	0003      	movs	r3, r0
 8007138:	613b      	str	r3, [r7, #16]
 800713a:	e015      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800713c:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xf8>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	2238      	movs	r2, #56	@ 0x38
 8007142:	4013      	ands	r3, r2
 8007144:	2b20      	cmp	r3, #32
 8007146:	d103      	bne.n	8007150 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007148:	2380      	movs	r3, #128	@ 0x80
 800714a:	021b      	lsls	r3, r3, #8
 800714c:	613b      	str	r3, [r7, #16]
 800714e:	e00b      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007150:	4b08      	ldr	r3, [pc, #32]	@ (8007174 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	2238      	movs	r2, #56	@ 0x38
 8007156:	4013      	ands	r3, r2
 8007158:	2b18      	cmp	r3, #24
 800715a:	d103      	bne.n	8007164 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800715c:	23fa      	movs	r3, #250	@ 0xfa
 800715e:	01db      	lsls	r3, r3, #7
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	e001      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007168:	693b      	ldr	r3, [r7, #16]
}
 800716a:	0018      	movs	r0, r3
 800716c:	46bd      	mov	sp, r7
 800716e:	b006      	add	sp, #24
 8007170:	bd80      	pop	{r7, pc}
 8007172:	46c0      	nop			@ (mov r8, r8)
 8007174:	40021000 	.word	0x40021000
 8007178:	00f42400 	.word	0x00f42400
 800717c:	007a1200 	.word	0x007a1200

08007180 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007184:	4b02      	ldr	r3, [pc, #8]	@ (8007190 <HAL_RCC_GetHCLKFreq+0x10>)
 8007186:	681b      	ldr	r3, [r3, #0]
}
 8007188:	0018      	movs	r0, r3
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	46c0      	nop			@ (mov r8, r8)
 8007190:	20000014 	.word	0x20000014

08007194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007194:	b5b0      	push	{r4, r5, r7, lr}
 8007196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007198:	f7ff fff2 	bl	8007180 <HAL_RCC_GetHCLKFreq>
 800719c:	0004      	movs	r4, r0
 800719e:	f7ff fb3f 	bl	8006820 <LL_RCC_GetAPB1Prescaler>
 80071a2:	0003      	movs	r3, r0
 80071a4:	0b1a      	lsrs	r2, r3, #12
 80071a6:	4b05      	ldr	r3, [pc, #20]	@ (80071bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80071a8:	0092      	lsls	r2, r2, #2
 80071aa:	58d3      	ldr	r3, [r2, r3]
 80071ac:	221f      	movs	r2, #31
 80071ae:	4013      	ands	r3, r2
 80071b0:	40dc      	lsrs	r4, r3
 80071b2:	0023      	movs	r3, r4
}
 80071b4:	0018      	movs	r0, r3
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bdb0      	pop	{r4, r5, r7, pc}
 80071ba:	46c0      	nop			@ (mov r8, r8)
 80071bc:	0800d8c8 	.word	0x0800d8c8

080071c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80071c8:	2313      	movs	r3, #19
 80071ca:	18fb      	adds	r3, r7, r3
 80071cc:	2200      	movs	r2, #0
 80071ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071d0:	2312      	movs	r3, #18
 80071d2:	18fb      	adds	r3, r7, r3
 80071d4:	2200      	movs	r2, #0
 80071d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	2380      	movs	r3, #128	@ 0x80
 80071de:	029b      	lsls	r3, r3, #10
 80071e0:	4013      	ands	r3, r2
 80071e2:	d100      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80071e4:	e0a3      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071e6:	2011      	movs	r0, #17
 80071e8:	183b      	adds	r3, r7, r0
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071ee:	4ba5      	ldr	r3, [pc, #660]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071f2:	2380      	movs	r3, #128	@ 0x80
 80071f4:	055b      	lsls	r3, r3, #21
 80071f6:	4013      	ands	r3, r2
 80071f8:	d110      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071fa:	4ba2      	ldr	r3, [pc, #648]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80071fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071fe:	4ba1      	ldr	r3, [pc, #644]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007200:	2180      	movs	r1, #128	@ 0x80
 8007202:	0549      	lsls	r1, r1, #21
 8007204:	430a      	orrs	r2, r1
 8007206:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007208:	4b9e      	ldr	r3, [pc, #632]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800720a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800720c:	2380      	movs	r3, #128	@ 0x80
 800720e:	055b      	lsls	r3, r3, #21
 8007210:	4013      	ands	r3, r2
 8007212:	60bb      	str	r3, [r7, #8]
 8007214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007216:	183b      	adds	r3, r7, r0
 8007218:	2201      	movs	r2, #1
 800721a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800721c:	4b9a      	ldr	r3, [pc, #616]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	4b99      	ldr	r3, [pc, #612]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8007222:	2180      	movs	r1, #128	@ 0x80
 8007224:	0049      	lsls	r1, r1, #1
 8007226:	430a      	orrs	r2, r1
 8007228:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800722a:	f7fd fe7f 	bl	8004f2c <HAL_GetTick>
 800722e:	0003      	movs	r3, r0
 8007230:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007232:	e00b      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007234:	f7fd fe7a 	bl	8004f2c <HAL_GetTick>
 8007238:	0002      	movs	r2, r0
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b02      	cmp	r3, #2
 8007240:	d904      	bls.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007242:	2313      	movs	r3, #19
 8007244:	18fb      	adds	r3, r7, r3
 8007246:	2203      	movs	r2, #3
 8007248:	701a      	strb	r2, [r3, #0]
        break;
 800724a:	e005      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800724c:	4b8e      	ldr	r3, [pc, #568]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	2380      	movs	r3, #128	@ 0x80
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	4013      	ands	r3, r2
 8007256:	d0ed      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007258:	2313      	movs	r3, #19
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d154      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007262:	4b88      	ldr	r3, [pc, #544]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007264:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007266:	23c0      	movs	r3, #192	@ 0xc0
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4013      	ands	r3, r2
 800726c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d019      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	429a      	cmp	r2, r3
 800727c:	d014      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800727e:	4b81      	ldr	r3, [pc, #516]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007282:	4a82      	ldr	r2, [pc, #520]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8007284:	4013      	ands	r3, r2
 8007286:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007288:	4b7e      	ldr	r3, [pc, #504]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800728a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800728c:	4b7d      	ldr	r3, [pc, #500]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800728e:	2180      	movs	r1, #128	@ 0x80
 8007290:	0249      	lsls	r1, r1, #9
 8007292:	430a      	orrs	r2, r1
 8007294:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007296:	4b7b      	ldr	r3, [pc, #492]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007298:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800729a:	4b7a      	ldr	r3, [pc, #488]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800729c:	497c      	ldr	r1, [pc, #496]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800729e:	400a      	ands	r2, r1
 80072a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80072a2:	4b78      	ldr	r3, [pc, #480]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2201      	movs	r2, #1
 80072ac:	4013      	ands	r3, r2
 80072ae:	d016      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b0:	f7fd fe3c 	bl	8004f2c <HAL_GetTick>
 80072b4:	0003      	movs	r3, r0
 80072b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072b8:	e00c      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ba:	f7fd fe37 	bl	8004f2c <HAL_GetTick>
 80072be:	0002      	movs	r2, r0
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	4a73      	ldr	r2, [pc, #460]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d904      	bls.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80072ca:	2313      	movs	r3, #19
 80072cc:	18fb      	adds	r3, r7, r3
 80072ce:	2203      	movs	r2, #3
 80072d0:	701a      	strb	r2, [r3, #0]
            break;
 80072d2:	e004      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072d4:	4b6b      	ldr	r3, [pc, #428]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80072d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d8:	2202      	movs	r2, #2
 80072da:	4013      	ands	r3, r2
 80072dc:	d0ed      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80072de:	2313      	movs	r3, #19
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072e8:	4b66      	ldr	r3, [pc, #408]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80072ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ec:	4a67      	ldr	r2, [pc, #412]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80072ee:	4013      	ands	r3, r2
 80072f0:	0019      	movs	r1, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072f6:	4b63      	ldr	r3, [pc, #396]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80072f8:	430a      	orrs	r2, r1
 80072fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072fc:	e00c      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072fe:	2312      	movs	r3, #18
 8007300:	18fb      	adds	r3, r7, r3
 8007302:	2213      	movs	r2, #19
 8007304:	18ba      	adds	r2, r7, r2
 8007306:	7812      	ldrb	r2, [r2, #0]
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	e005      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730c:	2312      	movs	r3, #18
 800730e:	18fb      	adds	r3, r7, r3
 8007310:	2213      	movs	r2, #19
 8007312:	18ba      	adds	r2, r7, r2
 8007314:	7812      	ldrb	r2, [r2, #0]
 8007316:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007318:	2311      	movs	r3, #17
 800731a:	18fb      	adds	r3, r7, r3
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d105      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007322:	4b58      	ldr	r3, [pc, #352]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007324:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007326:	4b57      	ldr	r3, [pc, #348]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007328:	495b      	ldr	r1, [pc, #364]	@ (8007498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800732a:	400a      	ands	r2, r1
 800732c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2201      	movs	r2, #1
 8007334:	4013      	ands	r3, r2
 8007336:	d009      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007338:	4b52      	ldr	r3, [pc, #328]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800733a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733c:	2203      	movs	r2, #3
 800733e:	4393      	bics	r3, r2
 8007340:	0019      	movs	r1, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	4b4f      	ldr	r3, [pc, #316]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007348:	430a      	orrs	r2, r1
 800734a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2210      	movs	r2, #16
 8007352:	4013      	ands	r3, r2
 8007354:	d009      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007356:	4b4b      	ldr	r3, [pc, #300]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800735a:	4a50      	ldr	r2, [pc, #320]	@ (800749c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800735c:	4013      	ands	r3, r2
 800735e:	0019      	movs	r1, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	4b47      	ldr	r3, [pc, #284]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007366:	430a      	orrs	r2, r1
 8007368:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	2380      	movs	r3, #128	@ 0x80
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4013      	ands	r3, r2
 8007374:	d009      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007376:	4b43      	ldr	r3, [pc, #268]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737a:	4a49      	ldr	r2, [pc, #292]	@ (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800737c:	4013      	ands	r3, r2
 800737e:	0019      	movs	r1, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	695a      	ldr	r2, [r3, #20]
 8007384:	4b3f      	ldr	r3, [pc, #252]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007386:	430a      	orrs	r2, r1
 8007388:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	2380      	movs	r3, #128	@ 0x80
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	4013      	ands	r3, r2
 8007394:	d009      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007396:	4b3b      	ldr	r3, [pc, #236]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800739a:	4a42      	ldr	r2, [pc, #264]	@ (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800739c:	4013      	ands	r3, r2
 800739e:	0019      	movs	r1, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	699a      	ldr	r2, [r3, #24]
 80073a4:	4b37      	ldr	r3, [pc, #220]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80073a6:	430a      	orrs	r2, r1
 80073a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2220      	movs	r2, #32
 80073b0:	4013      	ands	r3, r2
 80073b2:	d009      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073b4:	4b33      	ldr	r3, [pc, #204]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80073b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073b8:	4a3b      	ldr	r2, [pc, #236]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80073ba:	4013      	ands	r3, r2
 80073bc:	0019      	movs	r1, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	4b30      	ldr	r3, [pc, #192]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80073c4:	430a      	orrs	r2, r1
 80073c6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	2380      	movs	r3, #128	@ 0x80
 80073ce:	01db      	lsls	r3, r3, #7
 80073d0:	4013      	ands	r3, r2
 80073d2:	d015      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80073d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	0899      	lsrs	r1, r3, #2
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	69da      	ldr	r2, [r3, #28]
 80073e0:	4b28      	ldr	r3, [pc, #160]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80073e2:	430a      	orrs	r2, r1
 80073e4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69da      	ldr	r2, [r3, #28]
 80073ea:	2380      	movs	r3, #128	@ 0x80
 80073ec:	05db      	lsls	r3, r3, #23
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d106      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80073f2:	4b24      	ldr	r3, [pc, #144]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	4b23      	ldr	r3, [pc, #140]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80073f8:	2180      	movs	r1, #128	@ 0x80
 80073fa:	0249      	lsls	r1, r1, #9
 80073fc:	430a      	orrs	r2, r1
 80073fe:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	2380      	movs	r3, #128	@ 0x80
 8007406:	039b      	lsls	r3, r3, #14
 8007408:	4013      	ands	r3, r2
 800740a:	d016      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800740c:	4b1d      	ldr	r3, [pc, #116]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800740e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007410:	4a26      	ldr	r2, [pc, #152]	@ (80074ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007412:	4013      	ands	r3, r2
 8007414:	0019      	movs	r1, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1a      	ldr	r2, [r3, #32]
 800741a:	4b1a      	ldr	r3, [pc, #104]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800741c:	430a      	orrs	r2, r1
 800741e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a1a      	ldr	r2, [r3, #32]
 8007424:	2380      	movs	r3, #128	@ 0x80
 8007426:	03db      	lsls	r3, r3, #15
 8007428:	429a      	cmp	r2, r3
 800742a:	d106      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800742c:	4b15      	ldr	r3, [pc, #84]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	4b14      	ldr	r3, [pc, #80]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007432:	2180      	movs	r1, #128	@ 0x80
 8007434:	0449      	lsls	r1, r1, #17
 8007436:	430a      	orrs	r2, r1
 8007438:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	2380      	movs	r3, #128	@ 0x80
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	4013      	ands	r3, r2
 8007444:	d016      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007446:	4b0f      	ldr	r3, [pc, #60]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800744a:	4a19      	ldr	r2, [pc, #100]	@ (80074b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800744c:	4013      	ands	r3, r2
 800744e:	0019      	movs	r1, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691a      	ldr	r2, [r3, #16]
 8007454:	4b0b      	ldr	r3, [pc, #44]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007456:	430a      	orrs	r2, r1
 8007458:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691a      	ldr	r2, [r3, #16]
 800745e:	2380      	movs	r3, #128	@ 0x80
 8007460:	01db      	lsls	r3, r3, #7
 8007462:	429a      	cmp	r2, r3
 8007464:	d106      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007466:	4b07      	ldr	r3, [pc, #28]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	4b06      	ldr	r3, [pc, #24]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800746c:	2180      	movs	r1, #128	@ 0x80
 800746e:	0249      	lsls	r1, r1, #9
 8007470:	430a      	orrs	r2, r1
 8007472:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007474:	2312      	movs	r3, #18
 8007476:	18fb      	adds	r3, r7, r3
 8007478:	781b      	ldrb	r3, [r3, #0]
}
 800747a:	0018      	movs	r0, r3
 800747c:	46bd      	mov	sp, r7
 800747e:	b006      	add	sp, #24
 8007480:	bd80      	pop	{r7, pc}
 8007482:	46c0      	nop			@ (mov r8, r8)
 8007484:	40021000 	.word	0x40021000
 8007488:	40007000 	.word	0x40007000
 800748c:	fffffcff 	.word	0xfffffcff
 8007490:	fffeffff 	.word	0xfffeffff
 8007494:	00001388 	.word	0x00001388
 8007498:	efffffff 	.word	0xefffffff
 800749c:	fffff3ff 	.word	0xfffff3ff
 80074a0:	fff3ffff 	.word	0xfff3ffff
 80074a4:	ffcfffff 	.word	0xffcfffff
 80074a8:	ffffcfff 	.word	0xffffcfff
 80074ac:	ffbfffff 	.word	0xffbfffff
 80074b0:	ffff3fff 	.word	0xffff3fff

080074b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e04a      	b.n	800755c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	223d      	movs	r2, #61	@ 0x3d
 80074ca:	5c9b      	ldrb	r3, [r3, r2]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d107      	bne.n	80074e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	223c      	movs	r2, #60	@ 0x3c
 80074d6:	2100      	movs	r1, #0
 80074d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	0018      	movs	r0, r3
 80074de:	f7fc fdaf 	bl	8004040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	223d      	movs	r2, #61	@ 0x3d
 80074e6:	2102      	movs	r1, #2
 80074e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3304      	adds	r3, #4
 80074f2:	0019      	movs	r1, r3
 80074f4:	0010      	movs	r0, r2
 80074f6:	f000 fadb 	bl	8007ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2248      	movs	r2, #72	@ 0x48
 80074fe:	2101      	movs	r1, #1
 8007500:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	223e      	movs	r2, #62	@ 0x3e
 8007506:	2101      	movs	r1, #1
 8007508:	5499      	strb	r1, [r3, r2]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	223f      	movs	r2, #63	@ 0x3f
 800750e:	2101      	movs	r1, #1
 8007510:	5499      	strb	r1, [r3, r2]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2240      	movs	r2, #64	@ 0x40
 8007516:	2101      	movs	r1, #1
 8007518:	5499      	strb	r1, [r3, r2]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2241      	movs	r2, #65	@ 0x41
 800751e:	2101      	movs	r1, #1
 8007520:	5499      	strb	r1, [r3, r2]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2242      	movs	r2, #66	@ 0x42
 8007526:	2101      	movs	r1, #1
 8007528:	5499      	strb	r1, [r3, r2]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2243      	movs	r2, #67	@ 0x43
 800752e:	2101      	movs	r1, #1
 8007530:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2244      	movs	r2, #68	@ 0x44
 8007536:	2101      	movs	r1, #1
 8007538:	5499      	strb	r1, [r3, r2]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2245      	movs	r2, #69	@ 0x45
 800753e:	2101      	movs	r1, #1
 8007540:	5499      	strb	r1, [r3, r2]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2246      	movs	r2, #70	@ 0x46
 8007546:	2101      	movs	r1, #1
 8007548:	5499      	strb	r1, [r3, r2]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2247      	movs	r2, #71	@ 0x47
 800754e:	2101      	movs	r1, #1
 8007550:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	223d      	movs	r2, #61	@ 0x3d
 8007556:	2101      	movs	r1, #1
 8007558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	0018      	movs	r0, r3
 800755e:	46bd      	mov	sp, r7
 8007560:	b002      	add	sp, #8
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	223d      	movs	r2, #61	@ 0x3d
 8007570:	5c9b      	ldrb	r3, [r3, r2]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b01      	cmp	r3, #1
 8007576:	d001      	beq.n	800757c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e035      	b.n	80075e8 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	223d      	movs	r2, #61	@ 0x3d
 8007580:	2102      	movs	r1, #2
 8007582:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a19      	ldr	r2, [pc, #100]	@ (80075f0 <HAL_TIM_Base_Start+0x8c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00a      	beq.n	80075a4 <HAL_TIM_Base_Start+0x40>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	2380      	movs	r3, #128	@ 0x80
 8007594:	05db      	lsls	r3, r3, #23
 8007596:	429a      	cmp	r2, r3
 8007598:	d004      	beq.n	80075a4 <HAL_TIM_Base_Start+0x40>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a15      	ldr	r2, [pc, #84]	@ (80075f4 <HAL_TIM_Base_Start+0x90>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d116      	bne.n	80075d2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	4a13      	ldr	r2, [pc, #76]	@ (80075f8 <HAL_TIM_Base_Start+0x94>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b06      	cmp	r3, #6
 80075b4:	d016      	beq.n	80075e4 <HAL_TIM_Base_Start+0x80>
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	2380      	movs	r3, #128	@ 0x80
 80075ba:	025b      	lsls	r3, r3, #9
 80075bc:	429a      	cmp	r2, r3
 80075be:	d011      	beq.n	80075e4 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2101      	movs	r1, #1
 80075cc:	430a      	orrs	r2, r1
 80075ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d0:	e008      	b.n	80075e4 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2101      	movs	r1, #1
 80075de:	430a      	orrs	r2, r1
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	e000      	b.n	80075e6 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	0018      	movs	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	b004      	add	sp, #16
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40012c00 	.word	0x40012c00
 80075f4:	40000400 	.word	0x40000400
 80075f8:	00010007 	.word	0x00010007

080075fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	223d      	movs	r2, #61	@ 0x3d
 8007608:	5c9b      	ldrb	r3, [r3, r2]
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b01      	cmp	r3, #1
 800760e:	d001      	beq.n	8007614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e03d      	b.n	8007690 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	223d      	movs	r2, #61	@ 0x3d
 8007618:	2102      	movs	r1, #2
 800761a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2101      	movs	r1, #1
 8007628:	430a      	orrs	r2, r1
 800762a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a19      	ldr	r2, [pc, #100]	@ (8007698 <HAL_TIM_Base_Start_IT+0x9c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00a      	beq.n	800764c <HAL_TIM_Base_Start_IT+0x50>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	2380      	movs	r3, #128	@ 0x80
 800763c:	05db      	lsls	r3, r3, #23
 800763e:	429a      	cmp	r2, r3
 8007640:	d004      	beq.n	800764c <HAL_TIM_Base_Start_IT+0x50>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a15      	ldr	r2, [pc, #84]	@ (800769c <HAL_TIM_Base_Start_IT+0xa0>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d116      	bne.n	800767a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	4a13      	ldr	r2, [pc, #76]	@ (80076a0 <HAL_TIM_Base_Start_IT+0xa4>)
 8007654:	4013      	ands	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b06      	cmp	r3, #6
 800765c:	d016      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x90>
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	2380      	movs	r3, #128	@ 0x80
 8007662:	025b      	lsls	r3, r3, #9
 8007664:	429a      	cmp	r2, r3
 8007666:	d011      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2101      	movs	r1, #1
 8007674:	430a      	orrs	r2, r1
 8007676:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007678:	e008      	b.n	800768c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2101      	movs	r1, #1
 8007686:	430a      	orrs	r2, r1
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	e000      	b.n	800768e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	0018      	movs	r0, r3
 8007692:	46bd      	mov	sp, r7
 8007694:	b004      	add	sp, #16
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40012c00 	.word	0x40012c00
 800769c:	40000400 	.word	0x40000400
 80076a0:	00010007 	.word	0x00010007

080076a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2202      	movs	r2, #2
 80076c0:	4013      	ands	r3, r2
 80076c2:	d021      	beq.n	8007708 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2202      	movs	r2, #2
 80076c8:	4013      	ands	r3, r2
 80076ca:	d01d      	beq.n	8007708 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2203      	movs	r2, #3
 80076d2:	4252      	negs	r2, r2
 80076d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	2203      	movs	r2, #3
 80076e4:	4013      	ands	r3, r2
 80076e6:	d004      	beq.n	80076f2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	0018      	movs	r0, r3
 80076ec:	f000 f9c8 	bl	8007a80 <HAL_TIM_IC_CaptureCallback>
 80076f0:	e007      	b.n	8007702 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	0018      	movs	r0, r3
 80076f6:	f000 f9bb 	bl	8007a70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	0018      	movs	r0, r3
 80076fe:	f000 f9c7 	bl	8007a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2204      	movs	r2, #4
 800770c:	4013      	ands	r3, r2
 800770e:	d022      	beq.n	8007756 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2204      	movs	r2, #4
 8007714:	4013      	ands	r3, r2
 8007716:	d01e      	beq.n	8007756 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2205      	movs	r2, #5
 800771e:	4252      	negs	r2, r2
 8007720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2202      	movs	r2, #2
 8007726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	23c0      	movs	r3, #192	@ 0xc0
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4013      	ands	r3, r2
 8007734:	d004      	beq.n	8007740 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	0018      	movs	r0, r3
 800773a:	f000 f9a1 	bl	8007a80 <HAL_TIM_IC_CaptureCallback>
 800773e:	e007      	b.n	8007750 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	0018      	movs	r0, r3
 8007744:	f000 f994 	bl	8007a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	0018      	movs	r0, r3
 800774c:	f000 f9a0 	bl	8007a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2208      	movs	r2, #8
 800775a:	4013      	ands	r3, r2
 800775c:	d021      	beq.n	80077a2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2208      	movs	r2, #8
 8007762:	4013      	ands	r3, r2
 8007764:	d01d      	beq.n	80077a2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2209      	movs	r2, #9
 800776c:	4252      	negs	r2, r2
 800776e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2204      	movs	r2, #4
 8007774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	2203      	movs	r2, #3
 800777e:	4013      	ands	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	0018      	movs	r0, r3
 8007786:	f000 f97b 	bl	8007a80 <HAL_TIM_IC_CaptureCallback>
 800778a:	e007      	b.n	800779c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	0018      	movs	r0, r3
 8007790:	f000 f96e 	bl	8007a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	0018      	movs	r0, r3
 8007798:	f000 f97a 	bl	8007a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2210      	movs	r2, #16
 80077a6:	4013      	ands	r3, r2
 80077a8:	d022      	beq.n	80077f0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2210      	movs	r2, #16
 80077ae:	4013      	ands	r3, r2
 80077b0:	d01e      	beq.n	80077f0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2211      	movs	r2, #17
 80077b8:	4252      	negs	r2, r2
 80077ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2208      	movs	r2, #8
 80077c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69da      	ldr	r2, [r3, #28]
 80077c8:	23c0      	movs	r3, #192	@ 0xc0
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4013      	ands	r3, r2
 80077ce:	d004      	beq.n	80077da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	0018      	movs	r0, r3
 80077d4:	f000 f954 	bl	8007a80 <HAL_TIM_IC_CaptureCallback>
 80077d8:	e007      	b.n	80077ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	0018      	movs	r0, r3
 80077de:	f000 f947 	bl	8007a70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	0018      	movs	r0, r3
 80077e6:	f000 f953 	bl	8007a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2201      	movs	r2, #1
 80077f4:	4013      	ands	r3, r2
 80077f6:	d00c      	beq.n	8007812 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	4013      	ands	r3, r2
 80077fe:	d008      	beq.n	8007812 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2202      	movs	r2, #2
 8007806:	4252      	negs	r2, r2
 8007808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	0018      	movs	r0, r3
 800780e:	f000 f927 	bl	8007a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2280      	movs	r2, #128	@ 0x80
 8007816:	4013      	ands	r3, r2
 8007818:	d104      	bne.n	8007824 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	2380      	movs	r3, #128	@ 0x80
 800781e:	019b      	lsls	r3, r3, #6
 8007820:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007822:	d00b      	beq.n	800783c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2280      	movs	r2, #128	@ 0x80
 8007828:	4013      	ands	r3, r2
 800782a:	d007      	beq.n	800783c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a1e      	ldr	r2, [pc, #120]	@ (80078ac <HAL_TIM_IRQHandler+0x208>)
 8007832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	0018      	movs	r0, r3
 8007838:	f000 faca 	bl	8007dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	2380      	movs	r3, #128	@ 0x80
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	4013      	ands	r3, r2
 8007844:	d00b      	beq.n	800785e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2280      	movs	r2, #128	@ 0x80
 800784a:	4013      	ands	r3, r2
 800784c:	d007      	beq.n	800785e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a17      	ldr	r2, [pc, #92]	@ (80078b0 <HAL_TIM_IRQHandler+0x20c>)
 8007854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	0018      	movs	r0, r3
 800785a:	f000 fac1 	bl	8007de0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2240      	movs	r2, #64	@ 0x40
 8007862:	4013      	ands	r3, r2
 8007864:	d00c      	beq.n	8007880 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2240      	movs	r2, #64	@ 0x40
 800786a:	4013      	ands	r3, r2
 800786c:	d008      	beq.n	8007880 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2241      	movs	r2, #65	@ 0x41
 8007874:	4252      	negs	r2, r2
 8007876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	0018      	movs	r0, r3
 800787c:	f000 f910 	bl	8007aa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2220      	movs	r2, #32
 8007884:	4013      	ands	r3, r2
 8007886:	d00c      	beq.n	80078a2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2220      	movs	r2, #32
 800788c:	4013      	ands	r3, r2
 800788e:	d008      	beq.n	80078a2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2221      	movs	r2, #33	@ 0x21
 8007896:	4252      	negs	r2, r2
 8007898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	0018      	movs	r0, r3
 800789e:	f000 fa8f 	bl	8007dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078a2:	46c0      	nop			@ (mov r8, r8)
 80078a4:	46bd      	mov	sp, r7
 80078a6:	b004      	add	sp, #16
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	46c0      	nop			@ (mov r8, r8)
 80078ac:	ffffdf7f 	.word	0xffffdf7f
 80078b0:	fffffeff 	.word	0xfffffeff

080078b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078be:	230f      	movs	r3, #15
 80078c0:	18fb      	adds	r3, r7, r3
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	223c      	movs	r2, #60	@ 0x3c
 80078ca:	5c9b      	ldrb	r3, [r3, r2]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_TIM_ConfigClockSource+0x20>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e0bc      	b.n	8007a4e <HAL_TIM_ConfigClockSource+0x19a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	223c      	movs	r2, #60	@ 0x3c
 80078d8:	2101      	movs	r1, #1
 80078da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	223d      	movs	r2, #61	@ 0x3d
 80078e0:	2102      	movs	r1, #2
 80078e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4a5a      	ldr	r2, [pc, #360]	@ (8007a58 <HAL_TIM_ConfigClockSource+0x1a4>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	4a59      	ldr	r2, [pc, #356]	@ (8007a5c <HAL_TIM_ConfigClockSource+0x1a8>)
 80078f8:	4013      	ands	r3, r2
 80078fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2280      	movs	r2, #128	@ 0x80
 800790a:	0192      	lsls	r2, r2, #6
 800790c:	4293      	cmp	r3, r2
 800790e:	d040      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0xde>
 8007910:	2280      	movs	r2, #128	@ 0x80
 8007912:	0192      	lsls	r2, r2, #6
 8007914:	4293      	cmp	r3, r2
 8007916:	d900      	bls.n	800791a <HAL_TIM_ConfigClockSource+0x66>
 8007918:	e088      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x178>
 800791a:	2280      	movs	r2, #128	@ 0x80
 800791c:	0152      	lsls	r2, r2, #5
 800791e:	4293      	cmp	r3, r2
 8007920:	d100      	bne.n	8007924 <HAL_TIM_ConfigClockSource+0x70>
 8007922:	e088      	b.n	8007a36 <HAL_TIM_ConfigClockSource+0x182>
 8007924:	2280      	movs	r2, #128	@ 0x80
 8007926:	0152      	lsls	r2, r2, #5
 8007928:	4293      	cmp	r3, r2
 800792a:	d900      	bls.n	800792e <HAL_TIM_ConfigClockSource+0x7a>
 800792c:	e07e      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x178>
 800792e:	2b70      	cmp	r3, #112	@ 0x70
 8007930:	d018      	beq.n	8007964 <HAL_TIM_ConfigClockSource+0xb0>
 8007932:	d900      	bls.n	8007936 <HAL_TIM_ConfigClockSource+0x82>
 8007934:	e07a      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x178>
 8007936:	2b60      	cmp	r3, #96	@ 0x60
 8007938:	d04f      	beq.n	80079da <HAL_TIM_ConfigClockSource+0x126>
 800793a:	d900      	bls.n	800793e <HAL_TIM_ConfigClockSource+0x8a>
 800793c:	e076      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x178>
 800793e:	2b50      	cmp	r3, #80	@ 0x50
 8007940:	d03b      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0x106>
 8007942:	d900      	bls.n	8007946 <HAL_TIM_ConfigClockSource+0x92>
 8007944:	e072      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x178>
 8007946:	2b40      	cmp	r3, #64	@ 0x40
 8007948:	d057      	beq.n	80079fa <HAL_TIM_ConfigClockSource+0x146>
 800794a:	d900      	bls.n	800794e <HAL_TIM_ConfigClockSource+0x9a>
 800794c:	e06e      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x178>
 800794e:	2b30      	cmp	r3, #48	@ 0x30
 8007950:	d063      	beq.n	8007a1a <HAL_TIM_ConfigClockSource+0x166>
 8007952:	d86b      	bhi.n	8007a2c <HAL_TIM_ConfigClockSource+0x178>
 8007954:	2b20      	cmp	r3, #32
 8007956:	d060      	beq.n	8007a1a <HAL_TIM_ConfigClockSource+0x166>
 8007958:	d868      	bhi.n	8007a2c <HAL_TIM_ConfigClockSource+0x178>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d05d      	beq.n	8007a1a <HAL_TIM_ConfigClockSource+0x166>
 800795e:	2b10      	cmp	r3, #16
 8007960:	d05b      	beq.n	8007a1a <HAL_TIM_ConfigClockSource+0x166>
 8007962:	e063      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007974:	f000 f99c 	bl	8007cb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2277      	movs	r2, #119	@ 0x77
 8007984:	4313      	orrs	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	609a      	str	r2, [r3, #8]
      break;
 8007990:	e052      	b.n	8007a38 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079a2:	f000 f985 	bl	8007cb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689a      	ldr	r2, [r3, #8]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2180      	movs	r1, #128	@ 0x80
 80079b2:	01c9      	lsls	r1, r1, #7
 80079b4:	430a      	orrs	r2, r1
 80079b6:	609a      	str	r2, [r3, #8]
      break;
 80079b8:	e03e      	b.n	8007a38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079c6:	001a      	movs	r2, r3
 80079c8:	f000 f8f6 	bl	8007bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2150      	movs	r1, #80	@ 0x50
 80079d2:	0018      	movs	r0, r3
 80079d4:	f000 f950 	bl	8007c78 <TIM_ITRx_SetConfig>
      break;
 80079d8:	e02e      	b.n	8007a38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079e6:	001a      	movs	r2, r3
 80079e8:	f000 f914 	bl	8007c14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2160      	movs	r1, #96	@ 0x60
 80079f2:	0018      	movs	r0, r3
 80079f4:	f000 f940 	bl	8007c78 <TIM_ITRx_SetConfig>
      break;
 80079f8:	e01e      	b.n	8007a38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a06:	001a      	movs	r2, r3
 8007a08:	f000 f8d6 	bl	8007bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2140      	movs	r1, #64	@ 0x40
 8007a12:	0018      	movs	r0, r3
 8007a14:	f000 f930 	bl	8007c78 <TIM_ITRx_SetConfig>
      break;
 8007a18:	e00e      	b.n	8007a38 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	0019      	movs	r1, r3
 8007a24:	0010      	movs	r0, r2
 8007a26:	f000 f927 	bl	8007c78 <TIM_ITRx_SetConfig>
      break;
 8007a2a:	e005      	b.n	8007a38 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007a2c:	230f      	movs	r3, #15
 8007a2e:	18fb      	adds	r3, r7, r3
 8007a30:	2201      	movs	r2, #1
 8007a32:	701a      	strb	r2, [r3, #0]
      break;
 8007a34:	e000      	b.n	8007a38 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007a36:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	223d      	movs	r2, #61	@ 0x3d
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	223c      	movs	r2, #60	@ 0x3c
 8007a44:	2100      	movs	r1, #0
 8007a46:	5499      	strb	r1, [r3, r2]

  return status;
 8007a48:	230f      	movs	r3, #15
 8007a4a:	18fb      	adds	r3, r7, r3
 8007a4c:	781b      	ldrb	r3, [r3, #0]
}
 8007a4e:	0018      	movs	r0, r3
 8007a50:	46bd      	mov	sp, r7
 8007a52:	b004      	add	sp, #16
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	46c0      	nop			@ (mov r8, r8)
 8007a58:	ffceff88 	.word	0xffceff88
 8007a5c:	ffff00ff 	.word	0xffff00ff

08007a60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a68:	46c0      	nop			@ (mov r8, r8)
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	b002      	add	sp, #8
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a78:	46c0      	nop			@ (mov r8, r8)
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	b002      	add	sp, #8
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a88:	46c0      	nop			@ (mov r8, r8)
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	b002      	add	sp, #8
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a98:	46c0      	nop			@ (mov r8, r8)
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	b002      	add	sp, #8
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007aa8:	46c0      	nop			@ (mov r8, r8)
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b002      	add	sp, #8
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a37      	ldr	r2, [pc, #220]	@ (8007ba0 <TIM_Base_SetConfig+0xf0>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d008      	beq.n	8007ada <TIM_Base_SetConfig+0x2a>
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	2380      	movs	r3, #128	@ 0x80
 8007acc:	05db      	lsls	r3, r3, #23
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d003      	beq.n	8007ada <TIM_Base_SetConfig+0x2a>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a33      	ldr	r2, [pc, #204]	@ (8007ba4 <TIM_Base_SetConfig+0xf4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d108      	bne.n	8007aec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2270      	movs	r2, #112	@ 0x70
 8007ade:	4393      	bics	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a2c      	ldr	r2, [pc, #176]	@ (8007ba0 <TIM_Base_SetConfig+0xf0>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d014      	beq.n	8007b1e <TIM_Base_SetConfig+0x6e>
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	2380      	movs	r3, #128	@ 0x80
 8007af8:	05db      	lsls	r3, r3, #23
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d00f      	beq.n	8007b1e <TIM_Base_SetConfig+0x6e>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a28      	ldr	r2, [pc, #160]	@ (8007ba4 <TIM_Base_SetConfig+0xf4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00b      	beq.n	8007b1e <TIM_Base_SetConfig+0x6e>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a27      	ldr	r2, [pc, #156]	@ (8007ba8 <TIM_Base_SetConfig+0xf8>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d007      	beq.n	8007b1e <TIM_Base_SetConfig+0x6e>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a26      	ldr	r2, [pc, #152]	@ (8007bac <TIM_Base_SetConfig+0xfc>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d003      	beq.n	8007b1e <TIM_Base_SetConfig+0x6e>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a25      	ldr	r2, [pc, #148]	@ (8007bb0 <TIM_Base_SetConfig+0x100>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d108      	bne.n	8007b30 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4a24      	ldr	r2, [pc, #144]	@ (8007bb4 <TIM_Base_SetConfig+0x104>)
 8007b22:	4013      	ands	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2280      	movs	r2, #128	@ 0x80
 8007b34:	4393      	bics	r3, r2
 8007b36:	001a      	movs	r2, r3
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	689a      	ldr	r2, [r3, #8]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a11      	ldr	r2, [pc, #68]	@ (8007ba0 <TIM_Base_SetConfig+0xf0>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d007      	beq.n	8007b6e <TIM_Base_SetConfig+0xbe>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a12      	ldr	r2, [pc, #72]	@ (8007bac <TIM_Base_SetConfig+0xfc>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d003      	beq.n	8007b6e <TIM_Base_SetConfig+0xbe>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a11      	ldr	r2, [pc, #68]	@ (8007bb0 <TIM_Base_SetConfig+0x100>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d103      	bne.n	8007b76 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	691a      	ldr	r2, [r3, #16]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	2201      	movs	r2, #1
 8007b82:	4013      	ands	r3, r2
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d106      	bne.n	8007b96 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	4393      	bics	r3, r2
 8007b90:	001a      	movs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	611a      	str	r2, [r3, #16]
  }
}
 8007b96:	46c0      	nop			@ (mov r8, r8)
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	b004      	add	sp, #16
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	46c0      	nop			@ (mov r8, r8)
 8007ba0:	40012c00 	.word	0x40012c00
 8007ba4:	40000400 	.word	0x40000400
 8007ba8:	40002000 	.word	0x40002000
 8007bac:	40014400 	.word	0x40014400
 8007bb0:	40014800 	.word	0x40014800
 8007bb4:	fffffcff 	.word	0xfffffcff

08007bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4393      	bics	r3, r2
 8007bd2:	001a      	movs	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	22f0      	movs	r2, #240	@ 0xf0
 8007be2:	4393      	bics	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	011b      	lsls	r3, r3, #4
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	220a      	movs	r2, #10
 8007bf4:	4393      	bics	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	621a      	str	r2, [r3, #32]
}
 8007c0c:	46c0      	nop			@ (mov r8, r8)
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	b006      	add	sp, #24
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	2210      	movs	r2, #16
 8007c2c:	4393      	bics	r3, r2
 8007c2e:	001a      	movs	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8007c74 <TIM_TI2_ConfigInputStage+0x60>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	031b      	lsls	r3, r3, #12
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	22a0      	movs	r2, #160	@ 0xa0
 8007c50:	4393      	bics	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	621a      	str	r2, [r3, #32]
}
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	b006      	add	sp, #24
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	46c0      	nop			@ (mov r8, r8)
 8007c74:	ffff0fff 	.word	0xffff0fff

08007c78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4a08      	ldr	r2, [pc, #32]	@ (8007cac <TIM_ITRx_SetConfig+0x34>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	2207      	movs	r2, #7
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	609a      	str	r2, [r3, #8]
}
 8007ca2:	46c0      	nop			@ (mov r8, r8)
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	b004      	add	sp, #16
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	46c0      	nop			@ (mov r8, r8)
 8007cac:	ffcfff8f 	.word	0xffcfff8f

08007cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	4a09      	ldr	r2, [pc, #36]	@ (8007cec <TIM_ETR_SetConfig+0x3c>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	021a      	lsls	r2, r3, #8
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	609a      	str	r2, [r3, #8]
}
 8007ce4:	46c0      	nop			@ (mov r8, r8)
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	b006      	add	sp, #24
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	ffff00ff 	.word	0xffff00ff

08007cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	223c      	movs	r2, #60	@ 0x3c
 8007cfe:	5c9b      	ldrb	r3, [r3, r2]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e050      	b.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	223c      	movs	r2, #60	@ 0x3c
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	223d      	movs	r2, #61	@ 0x3d
 8007d14:	2102      	movs	r1, #2
 8007d16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a21      	ldr	r2, [pc, #132]	@ (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d108      	bne.n	8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4a20      	ldr	r2, [pc, #128]	@ (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d36:	4013      	ands	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2270      	movs	r2, #112	@ 0x70
 8007d48:	4393      	bics	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a14      	ldr	r2, [pc, #80]	@ (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d00a      	beq.n	8007d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	2380      	movs	r3, #128	@ 0x80
 8007d6e:	05db      	lsls	r3, r3, #23
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d004      	beq.n	8007d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a10      	ldr	r2, [pc, #64]	@ (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d10c      	bne.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2280      	movs	r2, #128	@ 0x80
 8007d82:	4393      	bics	r3, r2
 8007d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	223d      	movs	r2, #61	@ 0x3d
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	223c      	movs	r2, #60	@ 0x3c
 8007da4:	2100      	movs	r1, #0
 8007da6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	0018      	movs	r0, r3
 8007dac:	46bd      	mov	sp, r7
 8007dae:	b004      	add	sp, #16
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	46c0      	nop			@ (mov r8, r8)
 8007db4:	40012c00 	.word	0x40012c00
 8007db8:	ff0fffff 	.word	0xff0fffff
 8007dbc:	40000400 	.word	0x40000400

08007dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dc8:	46c0      	nop			@ (mov r8, r8)
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	b002      	add	sp, #8
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dd8:	46c0      	nop			@ (mov r8, r8)
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	b002      	add	sp, #8
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007de8:	46c0      	nop			@ (mov r8, r8)
 8007dea:	46bd      	mov	sp, r7
 8007dec:	b002      	add	sp, #8
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e046      	b.n	8007e90 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2288      	movs	r2, #136	@ 0x88
 8007e06:	589b      	ldr	r3, [r3, r2]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d107      	bne.n	8007e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2284      	movs	r2, #132	@ 0x84
 8007e10:	2100      	movs	r1, #0
 8007e12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	0018      	movs	r0, r3
 8007e18:	f7fc f98e 	bl	8004138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2288      	movs	r2, #136	@ 0x88
 8007e20:	2124      	movs	r1, #36	@ 0x24
 8007e22:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2101      	movs	r1, #1
 8007e30:	438a      	bics	r2, r1
 8007e32:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	0018      	movs	r0, r3
 8007e40:	f000 ff88 	bl	8008d54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	0018      	movs	r0, r3
 8007e48:	f000 fd0c 	bl	8008864 <UART_SetConfig>
 8007e4c:	0003      	movs	r3, r0
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d101      	bne.n	8007e56 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e01c      	b.n	8007e90 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	490d      	ldr	r1, [pc, #52]	@ (8007e98 <HAL_UART_Init+0xa8>)
 8007e62:	400a      	ands	r2, r1
 8007e64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	212a      	movs	r1, #42	@ 0x2a
 8007e72:	438a      	bics	r2, r1
 8007e74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2101      	movs	r1, #1
 8007e82:	430a      	orrs	r2, r1
 8007e84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	0018      	movs	r0, r3
 8007e8a:	f001 f817 	bl	8008ebc <UART_CheckIdleState>
 8007e8e:	0003      	movs	r3, r0
}
 8007e90:	0018      	movs	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	b002      	add	sp, #8
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	ffffb7ff 	.word	0xffffb7ff

08007e9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	@ 0x28
 8007ea0:	af02      	add	r7, sp, #8
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	603b      	str	r3, [r7, #0]
 8007ea8:	1dbb      	adds	r3, r7, #6
 8007eaa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2288      	movs	r2, #136	@ 0x88
 8007eb0:	589b      	ldr	r3, [r3, r2]
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d000      	beq.n	8007eb8 <HAL_UART_Transmit+0x1c>
 8007eb6:	e090      	b.n	8007fda <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_UART_Transmit+0x2a>
 8007ebe:	1dbb      	adds	r3, r7, #6
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e088      	b.n	8007fdc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	2380      	movs	r3, #128	@ 0x80
 8007ed0:	015b      	lsls	r3, r3, #5
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d109      	bne.n	8007eea <HAL_UART_Transmit+0x4e>
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d105      	bne.n	8007eea <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	d001      	beq.n	8007eea <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e078      	b.n	8007fdc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2290      	movs	r2, #144	@ 0x90
 8007eee:	2100      	movs	r1, #0
 8007ef0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2288      	movs	r2, #136	@ 0x88
 8007ef6:	2121      	movs	r1, #33	@ 0x21
 8007ef8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007efa:	f7fd f817 	bl	8004f2c <HAL_GetTick>
 8007efe:	0003      	movs	r3, r0
 8007f00:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	1dba      	adds	r2, r7, #6
 8007f06:	2154      	movs	r1, #84	@ 0x54
 8007f08:	8812      	ldrh	r2, [r2, #0]
 8007f0a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	1dba      	adds	r2, r7, #6
 8007f10:	2156      	movs	r1, #86	@ 0x56
 8007f12:	8812      	ldrh	r2, [r2, #0]
 8007f14:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	2380      	movs	r3, #128	@ 0x80
 8007f1c:	015b      	lsls	r3, r3, #5
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d108      	bne.n	8007f34 <HAL_UART_Transmit+0x98>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	61bb      	str	r3, [r7, #24]
 8007f32:	e003      	b.n	8007f3c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f3c:	e030      	b.n	8007fa0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	0013      	movs	r3, r2
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2180      	movs	r1, #128	@ 0x80
 8007f4c:	f001 f860 	bl	8009010 <UART_WaitOnFlagUntilTimeout>
 8007f50:	1e03      	subs	r3, r0, #0
 8007f52:	d005      	beq.n	8007f60 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2288      	movs	r2, #136	@ 0x88
 8007f58:	2120      	movs	r1, #32
 8007f5a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e03d      	b.n	8007fdc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10b      	bne.n	8007f7e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	001a      	movs	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	05d2      	lsls	r2, r2, #23
 8007f72:	0dd2      	lsrs	r2, r2, #23
 8007f74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	3302      	adds	r3, #2
 8007f7a:	61bb      	str	r3, [r7, #24]
 8007f7c:	e007      	b.n	8007f8e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	781a      	ldrb	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2256      	movs	r2, #86	@ 0x56
 8007f92:	5a9b      	ldrh	r3, [r3, r2]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	3b01      	subs	r3, #1
 8007f98:	b299      	uxth	r1, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2256      	movs	r2, #86	@ 0x56
 8007f9e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2256      	movs	r2, #86	@ 0x56
 8007fa4:	5a9b      	ldrh	r3, [r3, r2]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1c8      	bne.n	8007f3e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	0013      	movs	r3, r2
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2140      	movs	r1, #64	@ 0x40
 8007fba:	f001 f829 	bl	8009010 <UART_WaitOnFlagUntilTimeout>
 8007fbe:	1e03      	subs	r3, r0, #0
 8007fc0:	d005      	beq.n	8007fce <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2288      	movs	r2, #136	@ 0x88
 8007fc6:	2120      	movs	r1, #32
 8007fc8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e006      	b.n	8007fdc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2288      	movs	r2, #136	@ 0x88
 8007fd2:	2120      	movs	r1, #32
 8007fd4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e000      	b.n	8007fdc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007fda:	2302      	movs	r3, #2
  }
}
 8007fdc:	0018      	movs	r0, r3
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	b008      	add	sp, #32
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08c      	sub	sp, #48	@ 0x30
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	1dbb      	adds	r3, r7, #6
 8007ff0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2288      	movs	r2, #136	@ 0x88
 8007ff6:	589b      	ldr	r3, [r3, r2]
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	d000      	beq.n	8007ffe <HAL_UART_Transmit_IT+0x1a>
 8007ffc:	e08d      	b.n	800811a <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <HAL_UART_Transmit_IT+0x28>
 8008004:	1dbb      	adds	r3, r7, #6
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e085      	b.n	800811c <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	2380      	movs	r3, #128	@ 0x80
 8008016:	015b      	lsls	r3, r3, #5
 8008018:	429a      	cmp	r2, r3
 800801a:	d109      	bne.n	8008030 <HAL_UART_Transmit_IT+0x4c>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d105      	bne.n	8008030 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2201      	movs	r2, #1
 8008028:	4013      	ands	r3, r2
 800802a:	d001      	beq.n	8008030 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e075      	b.n	800811c <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	1dba      	adds	r2, r7, #6
 800803a:	2154      	movs	r1, #84	@ 0x54
 800803c:	8812      	ldrh	r2, [r2, #0]
 800803e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	1dba      	adds	r2, r7, #6
 8008044:	2156      	movs	r1, #86	@ 0x56
 8008046:	8812      	ldrh	r2, [r2, #0]
 8008048:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2290      	movs	r2, #144	@ 0x90
 8008054:	2100      	movs	r1, #0
 8008056:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2288      	movs	r2, #136	@ 0x88
 800805c:	2121      	movs	r1, #33	@ 0x21
 800805e:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008064:	2380      	movs	r3, #128	@ 0x80
 8008066:	059b      	lsls	r3, r3, #22
 8008068:	429a      	cmp	r2, r3
 800806a:	d12a      	bne.n	80080c2 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689a      	ldr	r2, [r3, #8]
 8008070:	2380      	movs	r3, #128	@ 0x80
 8008072:	015b      	lsls	r3, r3, #5
 8008074:	429a      	cmp	r2, r3
 8008076:	d107      	bne.n	8008088 <HAL_UART_Transmit_IT+0xa4>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d103      	bne.n	8008088 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a28      	ldr	r2, [pc, #160]	@ (8008124 <HAL_UART_Transmit_IT+0x140>)
 8008084:	679a      	str	r2, [r3, #120]	@ 0x78
 8008086:	e002      	b.n	800808e <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4a27      	ldr	r2, [pc, #156]	@ (8008128 <HAL_UART_Transmit_IT+0x144>)
 800808c:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800808e:	f3ef 8310 	mrs	r3, PRIMASK
 8008092:	61fb      	str	r3, [r7, #28]
  return(result);
 8008094:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008096:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008098:	2301      	movs	r3, #1
 800809a:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	f383 8810 	msr	PRIMASK, r3
}
 80080a2:	46c0      	nop			@ (mov r8, r8)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2180      	movs	r1, #128	@ 0x80
 80080b0:	0409      	lsls	r1, r1, #16
 80080b2:	430a      	orrs	r2, r1
 80080b4:	609a      	str	r2, [r3, #8]
 80080b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	f383 8810 	msr	PRIMASK, r3
}
 80080c0:	e029      	b.n	8008116 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	2380      	movs	r3, #128	@ 0x80
 80080c8:	015b      	lsls	r3, r3, #5
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d107      	bne.n	80080de <HAL_UART_Transmit_IT+0xfa>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d103      	bne.n	80080de <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4a14      	ldr	r2, [pc, #80]	@ (800812c <HAL_UART_Transmit_IT+0x148>)
 80080da:	679a      	str	r2, [r3, #120]	@ 0x78
 80080dc:	e002      	b.n	80080e4 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4a13      	ldr	r2, [pc, #76]	@ (8008130 <HAL_UART_Transmit_IT+0x14c>)
 80080e2:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080e4:	f3ef 8310 	mrs	r3, PRIMASK
 80080e8:	613b      	str	r3, [r7, #16]
  return(result);
 80080ea:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80080ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080ee:	2301      	movs	r3, #1
 80080f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f383 8810 	msr	PRIMASK, r3
}
 80080f8:	46c0      	nop			@ (mov r8, r8)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2180      	movs	r1, #128	@ 0x80
 8008106:	430a      	orrs	r2, r1
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	f383 8810 	msr	PRIMASK, r3
}
 8008114:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	e000      	b.n	800811c <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800811a:	2302      	movs	r3, #2
  }
}
 800811c:	0018      	movs	r0, r3
 800811e:	46bd      	mov	sp, r7
 8008120:	b00c      	add	sp, #48	@ 0x30
 8008122:	bd80      	pop	{r7, pc}
 8008124:	08009691 	.word	0x08009691
 8008128:	080095a5 	.word	0x080095a5
 800812c:	080094e7 	.word	0x080094e7
 8008130:	08009433 	.word	0x08009433

08008134 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	1dbb      	adds	r3, r7, #6
 8008140:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	228c      	movs	r2, #140	@ 0x8c
 8008146:	589b      	ldr	r3, [r3, r2]
 8008148:	2b20      	cmp	r3, #32
 800814a:	d14a      	bne.n	80081e2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_UART_Receive_IT+0x26>
 8008152:	1dbb      	adds	r3, r7, #6
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e042      	b.n	80081e4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	689a      	ldr	r2, [r3, #8]
 8008162:	2380      	movs	r3, #128	@ 0x80
 8008164:	015b      	lsls	r3, r3, #5
 8008166:	429a      	cmp	r2, r3
 8008168:	d109      	bne.n	800817e <HAL_UART_Receive_IT+0x4a>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d105      	bne.n	800817e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2201      	movs	r2, #1
 8008176:	4013      	ands	r3, r2
 8008178:	d001      	beq.n	800817e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e032      	b.n	80081e4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a18      	ldr	r2, [pc, #96]	@ (80081ec <HAL_UART_Receive_IT+0xb8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d020      	beq.n	80081d0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	2380      	movs	r3, #128	@ 0x80
 8008196:	041b      	lsls	r3, r3, #16
 8008198:	4013      	ands	r3, r2
 800819a:	d019      	beq.n	80081d0 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800819c:	f3ef 8310 	mrs	r3, PRIMASK
 80081a0:	613b      	str	r3, [r7, #16]
  return(result);
 80081a2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081a4:	61fb      	str	r3, [r7, #28]
 80081a6:	2301      	movs	r3, #1
 80081a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f383 8810 	msr	PRIMASK, r3
}
 80081b0:	46c0      	nop			@ (mov r8, r8)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2180      	movs	r1, #128	@ 0x80
 80081be:	04c9      	lsls	r1, r1, #19
 80081c0:	430a      	orrs	r2, r1
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	f383 8810 	msr	PRIMASK, r3
}
 80081ce:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081d0:	1dbb      	adds	r3, r7, #6
 80081d2:	881a      	ldrh	r2, [r3, #0]
 80081d4:	68b9      	ldr	r1, [r7, #8]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	0018      	movs	r0, r3
 80081da:	f000 ff89 	bl	80090f0 <UART_Start_Receive_IT>
 80081de:	0003      	movs	r3, r0
 80081e0:	e000      	b.n	80081e4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80081e2:	2302      	movs	r3, #2
  }
}
 80081e4:	0018      	movs	r0, r3
 80081e6:	46bd      	mov	sp, r7
 80081e8:	b008      	add	sp, #32
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	40008000 	.word	0x40008000

080081f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081f0:	b5b0      	push	{r4, r5, r7, lr}
 80081f2:	b0aa      	sub	sp, #168	@ 0xa8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	22a4      	movs	r2, #164	@ 0xa4
 8008200:	18b9      	adds	r1, r7, r2
 8008202:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	20a0      	movs	r0, #160	@ 0xa0
 800820c:	1839      	adds	r1, r7, r0
 800820e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	249c      	movs	r4, #156	@ 0x9c
 8008218:	1939      	adds	r1, r7, r4
 800821a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800821c:	0011      	movs	r1, r2
 800821e:	18bb      	adds	r3, r7, r2
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4aa2      	ldr	r2, [pc, #648]	@ (80084ac <HAL_UART_IRQHandler+0x2bc>)
 8008224:	4013      	ands	r3, r2
 8008226:	2298      	movs	r2, #152	@ 0x98
 8008228:	18bd      	adds	r5, r7, r2
 800822a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800822c:	18bb      	adds	r3, r7, r2
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d11a      	bne.n	800826a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008234:	187b      	adds	r3, r7, r1
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2220      	movs	r2, #32
 800823a:	4013      	ands	r3, r2
 800823c:	d015      	beq.n	800826a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800823e:	183b      	adds	r3, r7, r0
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2220      	movs	r2, #32
 8008244:	4013      	ands	r3, r2
 8008246:	d105      	bne.n	8008254 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008248:	193b      	adds	r3, r7, r4
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	2380      	movs	r3, #128	@ 0x80
 800824e:	055b      	lsls	r3, r3, #21
 8008250:	4013      	ands	r3, r2
 8008252:	d00a      	beq.n	800826a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008258:	2b00      	cmp	r3, #0
 800825a:	d100      	bne.n	800825e <HAL_UART_IRQHandler+0x6e>
 800825c:	e2dc      	b.n	8008818 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	0010      	movs	r0, r2
 8008266:	4798      	blx	r3
      }
      return;
 8008268:	e2d6      	b.n	8008818 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800826a:	2398      	movs	r3, #152	@ 0x98
 800826c:	18fb      	adds	r3, r7, r3
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d100      	bne.n	8008276 <HAL_UART_IRQHandler+0x86>
 8008274:	e122      	b.n	80084bc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008276:	239c      	movs	r3, #156	@ 0x9c
 8008278:	18fb      	adds	r3, r7, r3
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a8c      	ldr	r2, [pc, #560]	@ (80084b0 <HAL_UART_IRQHandler+0x2c0>)
 800827e:	4013      	ands	r3, r2
 8008280:	d106      	bne.n	8008290 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008282:	23a0      	movs	r3, #160	@ 0xa0
 8008284:	18fb      	adds	r3, r7, r3
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a8a      	ldr	r2, [pc, #552]	@ (80084b4 <HAL_UART_IRQHandler+0x2c4>)
 800828a:	4013      	ands	r3, r2
 800828c:	d100      	bne.n	8008290 <HAL_UART_IRQHandler+0xa0>
 800828e:	e115      	b.n	80084bc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008290:	23a4      	movs	r3, #164	@ 0xa4
 8008292:	18fb      	adds	r3, r7, r3
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2201      	movs	r2, #1
 8008298:	4013      	ands	r3, r2
 800829a:	d012      	beq.n	80082c2 <HAL_UART_IRQHandler+0xd2>
 800829c:	23a0      	movs	r3, #160	@ 0xa0
 800829e:	18fb      	adds	r3, r7, r3
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	2380      	movs	r3, #128	@ 0x80
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	4013      	ands	r3, r2
 80082a8:	d00b      	beq.n	80082c2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2201      	movs	r2, #1
 80082b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2290      	movs	r2, #144	@ 0x90
 80082b6:	589b      	ldr	r3, [r3, r2]
 80082b8:	2201      	movs	r2, #1
 80082ba:	431a      	orrs	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2190      	movs	r1, #144	@ 0x90
 80082c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082c2:	23a4      	movs	r3, #164	@ 0xa4
 80082c4:	18fb      	adds	r3, r7, r3
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2202      	movs	r2, #2
 80082ca:	4013      	ands	r3, r2
 80082cc:	d011      	beq.n	80082f2 <HAL_UART_IRQHandler+0x102>
 80082ce:	239c      	movs	r3, #156	@ 0x9c
 80082d0:	18fb      	adds	r3, r7, r3
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2201      	movs	r2, #1
 80082d6:	4013      	ands	r3, r2
 80082d8:	d00b      	beq.n	80082f2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2202      	movs	r2, #2
 80082e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2290      	movs	r2, #144	@ 0x90
 80082e6:	589b      	ldr	r3, [r3, r2]
 80082e8:	2204      	movs	r2, #4
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2190      	movs	r1, #144	@ 0x90
 80082f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082f2:	23a4      	movs	r3, #164	@ 0xa4
 80082f4:	18fb      	adds	r3, r7, r3
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2204      	movs	r2, #4
 80082fa:	4013      	ands	r3, r2
 80082fc:	d011      	beq.n	8008322 <HAL_UART_IRQHandler+0x132>
 80082fe:	239c      	movs	r3, #156	@ 0x9c
 8008300:	18fb      	adds	r3, r7, r3
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2201      	movs	r2, #1
 8008306:	4013      	ands	r3, r2
 8008308:	d00b      	beq.n	8008322 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2204      	movs	r2, #4
 8008310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2290      	movs	r2, #144	@ 0x90
 8008316:	589b      	ldr	r3, [r3, r2]
 8008318:	2202      	movs	r2, #2
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2190      	movs	r1, #144	@ 0x90
 8008320:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008322:	23a4      	movs	r3, #164	@ 0xa4
 8008324:	18fb      	adds	r3, r7, r3
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2208      	movs	r2, #8
 800832a:	4013      	ands	r3, r2
 800832c:	d017      	beq.n	800835e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800832e:	23a0      	movs	r3, #160	@ 0xa0
 8008330:	18fb      	adds	r3, r7, r3
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2220      	movs	r2, #32
 8008336:	4013      	ands	r3, r2
 8008338:	d105      	bne.n	8008346 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800833a:	239c      	movs	r3, #156	@ 0x9c
 800833c:	18fb      	adds	r3, r7, r3
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a5b      	ldr	r2, [pc, #364]	@ (80084b0 <HAL_UART_IRQHandler+0x2c0>)
 8008342:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008344:	d00b      	beq.n	800835e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2208      	movs	r2, #8
 800834c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2290      	movs	r2, #144	@ 0x90
 8008352:	589b      	ldr	r3, [r3, r2]
 8008354:	2208      	movs	r2, #8
 8008356:	431a      	orrs	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2190      	movs	r1, #144	@ 0x90
 800835c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800835e:	23a4      	movs	r3, #164	@ 0xa4
 8008360:	18fb      	adds	r3, r7, r3
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	2380      	movs	r3, #128	@ 0x80
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	4013      	ands	r3, r2
 800836a:	d013      	beq.n	8008394 <HAL_UART_IRQHandler+0x1a4>
 800836c:	23a0      	movs	r3, #160	@ 0xa0
 800836e:	18fb      	adds	r3, r7, r3
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	2380      	movs	r3, #128	@ 0x80
 8008374:	04db      	lsls	r3, r3, #19
 8008376:	4013      	ands	r3, r2
 8008378:	d00c      	beq.n	8008394 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2280      	movs	r2, #128	@ 0x80
 8008380:	0112      	lsls	r2, r2, #4
 8008382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2290      	movs	r2, #144	@ 0x90
 8008388:	589b      	ldr	r3, [r3, r2]
 800838a:	2220      	movs	r2, #32
 800838c:	431a      	orrs	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2190      	movs	r1, #144	@ 0x90
 8008392:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2290      	movs	r2, #144	@ 0x90
 8008398:	589b      	ldr	r3, [r3, r2]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d100      	bne.n	80083a0 <HAL_UART_IRQHandler+0x1b0>
 800839e:	e23d      	b.n	800881c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083a0:	23a4      	movs	r3, #164	@ 0xa4
 80083a2:	18fb      	adds	r3, r7, r3
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2220      	movs	r2, #32
 80083a8:	4013      	ands	r3, r2
 80083aa:	d015      	beq.n	80083d8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083ac:	23a0      	movs	r3, #160	@ 0xa0
 80083ae:	18fb      	adds	r3, r7, r3
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2220      	movs	r2, #32
 80083b4:	4013      	ands	r3, r2
 80083b6:	d106      	bne.n	80083c6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083b8:	239c      	movs	r3, #156	@ 0x9c
 80083ba:	18fb      	adds	r3, r7, r3
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	2380      	movs	r3, #128	@ 0x80
 80083c0:	055b      	lsls	r3, r3, #21
 80083c2:	4013      	ands	r3, r2
 80083c4:	d008      	beq.n	80083d8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d004      	beq.n	80083d8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	0010      	movs	r0, r2
 80083d6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2290      	movs	r2, #144	@ 0x90
 80083dc:	589b      	ldr	r3, [r3, r2]
 80083de:	2194      	movs	r1, #148	@ 0x94
 80083e0:	187a      	adds	r2, r7, r1
 80083e2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	2240      	movs	r2, #64	@ 0x40
 80083ec:	4013      	ands	r3, r2
 80083ee:	2b40      	cmp	r3, #64	@ 0x40
 80083f0:	d004      	beq.n	80083fc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80083f2:	187b      	adds	r3, r7, r1
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2228      	movs	r2, #40	@ 0x28
 80083f8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083fa:	d04c      	beq.n	8008496 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	0018      	movs	r0, r3
 8008400:	f000 ff9a 	bl	8009338 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	2240      	movs	r2, #64	@ 0x40
 800840c:	4013      	ands	r3, r2
 800840e:	2b40      	cmp	r3, #64	@ 0x40
 8008410:	d13c      	bne.n	800848c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008412:	f3ef 8310 	mrs	r3, PRIMASK
 8008416:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8008418:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800841a:	2090      	movs	r0, #144	@ 0x90
 800841c:	183a      	adds	r2, r7, r0
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	2301      	movs	r3, #1
 8008422:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008424:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008426:	f383 8810 	msr	PRIMASK, r3
}
 800842a:	46c0      	nop			@ (mov r8, r8)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689a      	ldr	r2, [r3, #8]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2140      	movs	r1, #64	@ 0x40
 8008438:	438a      	bics	r2, r1
 800843a:	609a      	str	r2, [r3, #8]
 800843c:	183b      	adds	r3, r7, r0
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008442:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008444:	f383 8810 	msr	PRIMASK, r3
}
 8008448:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2280      	movs	r2, #128	@ 0x80
 800844e:	589b      	ldr	r3, [r3, r2]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d016      	beq.n	8008482 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2280      	movs	r2, #128	@ 0x80
 8008458:	589b      	ldr	r3, [r3, r2]
 800845a:	4a17      	ldr	r2, [pc, #92]	@ (80084b8 <HAL_UART_IRQHandler+0x2c8>)
 800845c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2280      	movs	r2, #128	@ 0x80
 8008462:	589b      	ldr	r3, [r3, r2]
 8008464:	0018      	movs	r0, r3
 8008466:	f7fd fe35 	bl	80060d4 <HAL_DMA_Abort_IT>
 800846a:	1e03      	subs	r3, r0, #0
 800846c:	d01c      	beq.n	80084a8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2280      	movs	r2, #128	@ 0x80
 8008472:	589b      	ldr	r3, [r3, r2]
 8008474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	2180      	movs	r1, #128	@ 0x80
 800847a:	5852      	ldr	r2, [r2, r1]
 800847c:	0010      	movs	r0, r2
 800847e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008480:	e012      	b.n	80084a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	0018      	movs	r0, r3
 8008486:	f000 f9d9 	bl	800883c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800848a:	e00d      	b.n	80084a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	0018      	movs	r0, r3
 8008490:	f000 f9d4 	bl	800883c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008494:	e008      	b.n	80084a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	0018      	movs	r0, r3
 800849a:	f000 f9cf 	bl	800883c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2290      	movs	r2, #144	@ 0x90
 80084a2:	2100      	movs	r1, #0
 80084a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80084a6:	e1b9      	b.n	800881c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a8:	46c0      	nop			@ (mov r8, r8)
    return;
 80084aa:	e1b7      	b.n	800881c <HAL_UART_IRQHandler+0x62c>
 80084ac:	0000080f 	.word	0x0000080f
 80084b0:	10000001 	.word	0x10000001
 80084b4:	04000120 	.word	0x04000120
 80084b8:	08009405 	.word	0x08009405

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d000      	beq.n	80084c6 <HAL_UART_IRQHandler+0x2d6>
 80084c4:	e13e      	b.n	8008744 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80084c6:	23a4      	movs	r3, #164	@ 0xa4
 80084c8:	18fb      	adds	r3, r7, r3
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2210      	movs	r2, #16
 80084ce:	4013      	ands	r3, r2
 80084d0:	d100      	bne.n	80084d4 <HAL_UART_IRQHandler+0x2e4>
 80084d2:	e137      	b.n	8008744 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80084d4:	23a0      	movs	r3, #160	@ 0xa0
 80084d6:	18fb      	adds	r3, r7, r3
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2210      	movs	r2, #16
 80084dc:	4013      	ands	r3, r2
 80084de:	d100      	bne.n	80084e2 <HAL_UART_IRQHandler+0x2f2>
 80084e0:	e130      	b.n	8008744 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2210      	movs	r2, #16
 80084e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	2240      	movs	r2, #64	@ 0x40
 80084f2:	4013      	ands	r3, r2
 80084f4:	2b40      	cmp	r3, #64	@ 0x40
 80084f6:	d000      	beq.n	80084fa <HAL_UART_IRQHandler+0x30a>
 80084f8:	e0a4      	b.n	8008644 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2280      	movs	r2, #128	@ 0x80
 80084fe:	589b      	ldr	r3, [r3, r2]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	217e      	movs	r1, #126	@ 0x7e
 8008506:	187b      	adds	r3, r7, r1
 8008508:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800850a:	187b      	adds	r3, r7, r1
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d100      	bne.n	8008514 <HAL_UART_IRQHandler+0x324>
 8008512:	e185      	b.n	8008820 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	225c      	movs	r2, #92	@ 0x5c
 8008518:	5a9b      	ldrh	r3, [r3, r2]
 800851a:	187a      	adds	r2, r7, r1
 800851c:	8812      	ldrh	r2, [r2, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d300      	bcc.n	8008524 <HAL_UART_IRQHandler+0x334>
 8008522:	e17d      	b.n	8008820 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	187a      	adds	r2, r7, r1
 8008528:	215e      	movs	r1, #94	@ 0x5e
 800852a:	8812      	ldrh	r2, [r2, #0]
 800852c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2280      	movs	r2, #128	@ 0x80
 8008532:	589b      	ldr	r3, [r3, r2]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2220      	movs	r2, #32
 800853a:	4013      	ands	r3, r2
 800853c:	d170      	bne.n	8008620 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800853e:	f3ef 8310 	mrs	r3, PRIMASK
 8008542:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008546:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008548:	2301      	movs	r3, #1
 800854a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800854c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800854e:	f383 8810 	msr	PRIMASK, r3
}
 8008552:	46c0      	nop			@ (mov r8, r8)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	49b4      	ldr	r1, [pc, #720]	@ (8008830 <HAL_UART_IRQHandler+0x640>)
 8008560:	400a      	ands	r2, r1
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008566:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856a:	f383 8810 	msr	PRIMASK, r3
}
 800856e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008570:	f3ef 8310 	mrs	r3, PRIMASK
 8008574:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008578:	677b      	str	r3, [r7, #116]	@ 0x74
 800857a:	2301      	movs	r3, #1
 800857c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800857e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008580:	f383 8810 	msr	PRIMASK, r3
}
 8008584:	46c0      	nop			@ (mov r8, r8)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2101      	movs	r1, #1
 8008592:	438a      	bics	r2, r1
 8008594:	609a      	str	r2, [r3, #8]
 8008596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008598:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800859a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800859c:	f383 8810 	msr	PRIMASK, r3
}
 80085a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a2:	f3ef 8310 	mrs	r3, PRIMASK
 80085a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80085a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80085ac:	2301      	movs	r3, #1
 80085ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085b2:	f383 8810 	msr	PRIMASK, r3
}
 80085b6:	46c0      	nop			@ (mov r8, r8)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2140      	movs	r1, #64	@ 0x40
 80085c4:	438a      	bics	r2, r1
 80085c6:	609a      	str	r2, [r3, #8]
 80085c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085ca:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085ce:	f383 8810 	msr	PRIMASK, r3
}
 80085d2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	228c      	movs	r2, #140	@ 0x8c
 80085d8:	2120      	movs	r1, #32
 80085da:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085e2:	f3ef 8310 	mrs	r3, PRIMASK
 80085e6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80085e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085ec:	2301      	movs	r3, #1
 80085ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085f2:	f383 8810 	msr	PRIMASK, r3
}
 80085f6:	46c0      	nop			@ (mov r8, r8)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2110      	movs	r1, #16
 8008604:	438a      	bics	r2, r1
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800860a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800860c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800860e:	f383 8810 	msr	PRIMASK, r3
}
 8008612:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2280      	movs	r2, #128	@ 0x80
 8008618:	589b      	ldr	r3, [r3, r2]
 800861a:	0018      	movs	r0, r3
 800861c:	f7fd fcf8 	bl	8006010 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	225c      	movs	r2, #92	@ 0x5c
 800862a:	5a9a      	ldrh	r2, [r3, r2]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	215e      	movs	r1, #94	@ 0x5e
 8008630:	5a5b      	ldrh	r3, [r3, r1]
 8008632:	b29b      	uxth	r3, r3
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	b29a      	uxth	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	0011      	movs	r1, r2
 800863c:	0018      	movs	r0, r3
 800863e:	f000 f905 	bl	800884c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008642:	e0ed      	b.n	8008820 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	225c      	movs	r2, #92	@ 0x5c
 8008648:	5a99      	ldrh	r1, [r3, r2]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	225e      	movs	r2, #94	@ 0x5e
 800864e:	5a9b      	ldrh	r3, [r3, r2]
 8008650:	b29a      	uxth	r2, r3
 8008652:	208e      	movs	r0, #142	@ 0x8e
 8008654:	183b      	adds	r3, r7, r0
 8008656:	1a8a      	subs	r2, r1, r2
 8008658:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	225e      	movs	r2, #94	@ 0x5e
 800865e:	5a9b      	ldrh	r3, [r3, r2]
 8008660:	b29b      	uxth	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d100      	bne.n	8008668 <HAL_UART_IRQHandler+0x478>
 8008666:	e0dd      	b.n	8008824 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8008668:	183b      	adds	r3, r7, r0
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d100      	bne.n	8008672 <HAL_UART_IRQHandler+0x482>
 8008670:	e0d8      	b.n	8008824 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008672:	f3ef 8310 	mrs	r3, PRIMASK
 8008676:	60fb      	str	r3, [r7, #12]
  return(result);
 8008678:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800867a:	2488      	movs	r4, #136	@ 0x88
 800867c:	193a      	adds	r2, r7, r4
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	2301      	movs	r3, #1
 8008682:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f383 8810 	msr	PRIMASK, r3
}
 800868a:	46c0      	nop			@ (mov r8, r8)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4967      	ldr	r1, [pc, #412]	@ (8008834 <HAL_UART_IRQHandler+0x644>)
 8008698:	400a      	ands	r2, r1
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	193b      	adds	r3, r7, r4
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f383 8810 	msr	PRIMASK, r3
}
 80086a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086aa:	f3ef 8310 	mrs	r3, PRIMASK
 80086ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80086b0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086b2:	2484      	movs	r4, #132	@ 0x84
 80086b4:	193a      	adds	r2, r7, r4
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	2301      	movs	r3, #1
 80086ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	f383 8810 	msr	PRIMASK, r3
}
 80086c2:	46c0      	nop			@ (mov r8, r8)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	495a      	ldr	r1, [pc, #360]	@ (8008838 <HAL_UART_IRQHandler+0x648>)
 80086d0:	400a      	ands	r2, r1
 80086d2:	609a      	str	r2, [r3, #8]
 80086d4:	193b      	adds	r3, r7, r4
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	f383 8810 	msr	PRIMASK, r3
}
 80086e0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	228c      	movs	r2, #140	@ 0x8c
 80086e6:	2120      	movs	r1, #32
 80086e8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086f6:	f3ef 8310 	mrs	r3, PRIMASK
 80086fa:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80086fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086fe:	2480      	movs	r4, #128	@ 0x80
 8008700:	193a      	adds	r2, r7, r4
 8008702:	6013      	str	r3, [r2, #0]
 8008704:	2301      	movs	r3, #1
 8008706:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870a:	f383 8810 	msr	PRIMASK, r3
}
 800870e:	46c0      	nop			@ (mov r8, r8)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2110      	movs	r1, #16
 800871c:	438a      	bics	r2, r1
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	193b      	adds	r3, r7, r4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008728:	f383 8810 	msr	PRIMASK, r3
}
 800872c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2202      	movs	r2, #2
 8008732:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008734:	183b      	adds	r3, r7, r0
 8008736:	881a      	ldrh	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	0011      	movs	r1, r2
 800873c:	0018      	movs	r0, r3
 800873e:	f000 f885 	bl	800884c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008742:	e06f      	b.n	8008824 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008744:	23a4      	movs	r3, #164	@ 0xa4
 8008746:	18fb      	adds	r3, r7, r3
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	2380      	movs	r3, #128	@ 0x80
 800874c:	035b      	lsls	r3, r3, #13
 800874e:	4013      	ands	r3, r2
 8008750:	d010      	beq.n	8008774 <HAL_UART_IRQHandler+0x584>
 8008752:	239c      	movs	r3, #156	@ 0x9c
 8008754:	18fb      	adds	r3, r7, r3
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	2380      	movs	r3, #128	@ 0x80
 800875a:	03db      	lsls	r3, r3, #15
 800875c:	4013      	ands	r3, r2
 800875e:	d009      	beq.n	8008774 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2280      	movs	r2, #128	@ 0x80
 8008766:	0352      	lsls	r2, r2, #13
 8008768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	0018      	movs	r0, r3
 800876e:	f001 fd45 	bl	800a1fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008772:	e05a      	b.n	800882a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008774:	23a4      	movs	r3, #164	@ 0xa4
 8008776:	18fb      	adds	r3, r7, r3
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2280      	movs	r2, #128	@ 0x80
 800877c:	4013      	ands	r3, r2
 800877e:	d016      	beq.n	80087ae <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008780:	23a0      	movs	r3, #160	@ 0xa0
 8008782:	18fb      	adds	r3, r7, r3
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2280      	movs	r2, #128	@ 0x80
 8008788:	4013      	ands	r3, r2
 800878a:	d106      	bne.n	800879a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800878c:	239c      	movs	r3, #156	@ 0x9c
 800878e:	18fb      	adds	r3, r7, r3
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	2380      	movs	r3, #128	@ 0x80
 8008794:	041b      	lsls	r3, r3, #16
 8008796:	4013      	ands	r3, r2
 8008798:	d009      	beq.n	80087ae <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d042      	beq.n	8008828 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	0010      	movs	r0, r2
 80087aa:	4798      	blx	r3
    }
    return;
 80087ac:	e03c      	b.n	8008828 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80087ae:	23a4      	movs	r3, #164	@ 0xa4
 80087b0:	18fb      	adds	r3, r7, r3
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2240      	movs	r2, #64	@ 0x40
 80087b6:	4013      	ands	r3, r2
 80087b8:	d00a      	beq.n	80087d0 <HAL_UART_IRQHandler+0x5e0>
 80087ba:	23a0      	movs	r3, #160	@ 0xa0
 80087bc:	18fb      	adds	r3, r7, r3
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2240      	movs	r2, #64	@ 0x40
 80087c2:	4013      	ands	r3, r2
 80087c4:	d004      	beq.n	80087d0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	0018      	movs	r0, r3
 80087ca:	f000 ffdb 	bl	8009784 <UART_EndTransmit_IT>
    return;
 80087ce:	e02c      	b.n	800882a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80087d0:	23a4      	movs	r3, #164	@ 0xa4
 80087d2:	18fb      	adds	r3, r7, r3
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	2380      	movs	r3, #128	@ 0x80
 80087d8:	041b      	lsls	r3, r3, #16
 80087da:	4013      	ands	r3, r2
 80087dc:	d00b      	beq.n	80087f6 <HAL_UART_IRQHandler+0x606>
 80087de:	23a0      	movs	r3, #160	@ 0xa0
 80087e0:	18fb      	adds	r3, r7, r3
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	2380      	movs	r3, #128	@ 0x80
 80087e6:	05db      	lsls	r3, r3, #23
 80087e8:	4013      	ands	r3, r2
 80087ea:	d004      	beq.n	80087f6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	0018      	movs	r0, r3
 80087f0:	f001 fd14 	bl	800a21c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087f4:	e019      	b.n	800882a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80087f6:	23a4      	movs	r3, #164	@ 0xa4
 80087f8:	18fb      	adds	r3, r7, r3
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	2380      	movs	r3, #128	@ 0x80
 80087fe:	045b      	lsls	r3, r3, #17
 8008800:	4013      	ands	r3, r2
 8008802:	d012      	beq.n	800882a <HAL_UART_IRQHandler+0x63a>
 8008804:	23a0      	movs	r3, #160	@ 0xa0
 8008806:	18fb      	adds	r3, r7, r3
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	da0d      	bge.n	800882a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	0018      	movs	r0, r3
 8008812:	f001 fcfb 	bl	800a20c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008816:	e008      	b.n	800882a <HAL_UART_IRQHandler+0x63a>
      return;
 8008818:	46c0      	nop			@ (mov r8, r8)
 800881a:	e006      	b.n	800882a <HAL_UART_IRQHandler+0x63a>
    return;
 800881c:	46c0      	nop			@ (mov r8, r8)
 800881e:	e004      	b.n	800882a <HAL_UART_IRQHandler+0x63a>
      return;
 8008820:	46c0      	nop			@ (mov r8, r8)
 8008822:	e002      	b.n	800882a <HAL_UART_IRQHandler+0x63a>
      return;
 8008824:	46c0      	nop			@ (mov r8, r8)
 8008826:	e000      	b.n	800882a <HAL_UART_IRQHandler+0x63a>
    return;
 8008828:	46c0      	nop			@ (mov r8, r8)
  }
}
 800882a:	46bd      	mov	sp, r7
 800882c:	b02a      	add	sp, #168	@ 0xa8
 800882e:	bdb0      	pop	{r4, r5, r7, pc}
 8008830:	fffffeff 	.word	0xfffffeff
 8008834:	fffffedf 	.word	0xfffffedf
 8008838:	effffffe 	.word	0xeffffffe

0800883c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008844:	46c0      	nop			@ (mov r8, r8)
 8008846:	46bd      	mov	sp, r7
 8008848:	b002      	add	sp, #8
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	000a      	movs	r2, r1
 8008856:	1cbb      	adds	r3, r7, #2
 8008858:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800885a:	46c0      	nop			@ (mov r8, r8)
 800885c:	46bd      	mov	sp, r7
 800885e:	b002      	add	sp, #8
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008864:	b5b0      	push	{r4, r5, r7, lr}
 8008866:	b090      	sub	sp, #64	@ 0x40
 8008868:	af00      	add	r7, sp, #0
 800886a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800886c:	231a      	movs	r3, #26
 800886e:	2220      	movs	r2, #32
 8008870:	189b      	adds	r3, r3, r2
 8008872:	19db      	adds	r3, r3, r7
 8008874:	2200      	movs	r2, #0
 8008876:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	431a      	orrs	r2, r3
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	431a      	orrs	r2, r3
 8008888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	4313      	orrs	r3, r2
 800888e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4ac4      	ldr	r2, [pc, #784]	@ (8008ba8 <UART_SetConfig+0x344>)
 8008898:	4013      	ands	r3, r2
 800889a:	0019      	movs	r1, r3
 800889c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088a2:	430b      	orrs	r3, r1
 80088a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	4abf      	ldr	r2, [pc, #764]	@ (8008bac <UART_SetConfig+0x348>)
 80088ae:	4013      	ands	r3, r2
 80088b0:	0018      	movs	r0, r3
 80088b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b4:	68d9      	ldr	r1, [r3, #12]
 80088b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	0003      	movs	r3, r0
 80088bc:	430b      	orrs	r3, r1
 80088be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4ab9      	ldr	r2, [pc, #740]	@ (8008bb0 <UART_SetConfig+0x34c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d004      	beq.n	80088da <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80088d6:	4313      	orrs	r3, r2
 80088d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	4ab4      	ldr	r2, [pc, #720]	@ (8008bb4 <UART_SetConfig+0x350>)
 80088e2:	4013      	ands	r3, r2
 80088e4:	0019      	movs	r1, r3
 80088e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ec:	430b      	orrs	r3, r1
 80088ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f6:	220f      	movs	r2, #15
 80088f8:	4393      	bics	r3, r2
 80088fa:	0018      	movs	r0, r3
 80088fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	0003      	movs	r3, r0
 8008906:	430b      	orrs	r3, r1
 8008908:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800890a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4aaa      	ldr	r2, [pc, #680]	@ (8008bb8 <UART_SetConfig+0x354>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d131      	bne.n	8008978 <UART_SetConfig+0x114>
 8008914:	4ba9      	ldr	r3, [pc, #676]	@ (8008bbc <UART_SetConfig+0x358>)
 8008916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008918:	2203      	movs	r2, #3
 800891a:	4013      	ands	r3, r2
 800891c:	2b03      	cmp	r3, #3
 800891e:	d01d      	beq.n	800895c <UART_SetConfig+0xf8>
 8008920:	d823      	bhi.n	800896a <UART_SetConfig+0x106>
 8008922:	2b02      	cmp	r3, #2
 8008924:	d00c      	beq.n	8008940 <UART_SetConfig+0xdc>
 8008926:	d820      	bhi.n	800896a <UART_SetConfig+0x106>
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <UART_SetConfig+0xce>
 800892c:	2b01      	cmp	r3, #1
 800892e:	d00e      	beq.n	800894e <UART_SetConfig+0xea>
 8008930:	e01b      	b.n	800896a <UART_SetConfig+0x106>
 8008932:	231b      	movs	r3, #27
 8008934:	2220      	movs	r2, #32
 8008936:	189b      	adds	r3, r3, r2
 8008938:	19db      	adds	r3, r3, r7
 800893a:	2200      	movs	r2, #0
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	e071      	b.n	8008a24 <UART_SetConfig+0x1c0>
 8008940:	231b      	movs	r3, #27
 8008942:	2220      	movs	r2, #32
 8008944:	189b      	adds	r3, r3, r2
 8008946:	19db      	adds	r3, r3, r7
 8008948:	2202      	movs	r2, #2
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	e06a      	b.n	8008a24 <UART_SetConfig+0x1c0>
 800894e:	231b      	movs	r3, #27
 8008950:	2220      	movs	r2, #32
 8008952:	189b      	adds	r3, r3, r2
 8008954:	19db      	adds	r3, r3, r7
 8008956:	2204      	movs	r2, #4
 8008958:	701a      	strb	r2, [r3, #0]
 800895a:	e063      	b.n	8008a24 <UART_SetConfig+0x1c0>
 800895c:	231b      	movs	r3, #27
 800895e:	2220      	movs	r2, #32
 8008960:	189b      	adds	r3, r3, r2
 8008962:	19db      	adds	r3, r3, r7
 8008964:	2208      	movs	r2, #8
 8008966:	701a      	strb	r2, [r3, #0]
 8008968:	e05c      	b.n	8008a24 <UART_SetConfig+0x1c0>
 800896a:	231b      	movs	r3, #27
 800896c:	2220      	movs	r2, #32
 800896e:	189b      	adds	r3, r3, r2
 8008970:	19db      	adds	r3, r3, r7
 8008972:	2210      	movs	r2, #16
 8008974:	701a      	strb	r2, [r3, #0]
 8008976:	e055      	b.n	8008a24 <UART_SetConfig+0x1c0>
 8008978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a90      	ldr	r2, [pc, #576]	@ (8008bc0 <UART_SetConfig+0x35c>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d106      	bne.n	8008990 <UART_SetConfig+0x12c>
 8008982:	231b      	movs	r3, #27
 8008984:	2220      	movs	r2, #32
 8008986:	189b      	adds	r3, r3, r2
 8008988:	19db      	adds	r3, r3, r7
 800898a:	2200      	movs	r2, #0
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	e049      	b.n	8008a24 <UART_SetConfig+0x1c0>
 8008990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a86      	ldr	r2, [pc, #536]	@ (8008bb0 <UART_SetConfig+0x34c>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d13e      	bne.n	8008a18 <UART_SetConfig+0x1b4>
 800899a:	4b88      	ldr	r3, [pc, #544]	@ (8008bbc <UART_SetConfig+0x358>)
 800899c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800899e:	23c0      	movs	r3, #192	@ 0xc0
 80089a0:	011b      	lsls	r3, r3, #4
 80089a2:	4013      	ands	r3, r2
 80089a4:	22c0      	movs	r2, #192	@ 0xc0
 80089a6:	0112      	lsls	r2, r2, #4
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d027      	beq.n	80089fc <UART_SetConfig+0x198>
 80089ac:	22c0      	movs	r2, #192	@ 0xc0
 80089ae:	0112      	lsls	r2, r2, #4
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d82a      	bhi.n	8008a0a <UART_SetConfig+0x1a6>
 80089b4:	2280      	movs	r2, #128	@ 0x80
 80089b6:	0112      	lsls	r2, r2, #4
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d011      	beq.n	80089e0 <UART_SetConfig+0x17c>
 80089bc:	2280      	movs	r2, #128	@ 0x80
 80089be:	0112      	lsls	r2, r2, #4
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d822      	bhi.n	8008a0a <UART_SetConfig+0x1a6>
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d004      	beq.n	80089d2 <UART_SetConfig+0x16e>
 80089c8:	2280      	movs	r2, #128	@ 0x80
 80089ca:	00d2      	lsls	r2, r2, #3
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00e      	beq.n	80089ee <UART_SetConfig+0x18a>
 80089d0:	e01b      	b.n	8008a0a <UART_SetConfig+0x1a6>
 80089d2:	231b      	movs	r3, #27
 80089d4:	2220      	movs	r2, #32
 80089d6:	189b      	adds	r3, r3, r2
 80089d8:	19db      	adds	r3, r3, r7
 80089da:	2200      	movs	r2, #0
 80089dc:	701a      	strb	r2, [r3, #0]
 80089de:	e021      	b.n	8008a24 <UART_SetConfig+0x1c0>
 80089e0:	231b      	movs	r3, #27
 80089e2:	2220      	movs	r2, #32
 80089e4:	189b      	adds	r3, r3, r2
 80089e6:	19db      	adds	r3, r3, r7
 80089e8:	2202      	movs	r2, #2
 80089ea:	701a      	strb	r2, [r3, #0]
 80089ec:	e01a      	b.n	8008a24 <UART_SetConfig+0x1c0>
 80089ee:	231b      	movs	r3, #27
 80089f0:	2220      	movs	r2, #32
 80089f2:	189b      	adds	r3, r3, r2
 80089f4:	19db      	adds	r3, r3, r7
 80089f6:	2204      	movs	r2, #4
 80089f8:	701a      	strb	r2, [r3, #0]
 80089fa:	e013      	b.n	8008a24 <UART_SetConfig+0x1c0>
 80089fc:	231b      	movs	r3, #27
 80089fe:	2220      	movs	r2, #32
 8008a00:	189b      	adds	r3, r3, r2
 8008a02:	19db      	adds	r3, r3, r7
 8008a04:	2208      	movs	r2, #8
 8008a06:	701a      	strb	r2, [r3, #0]
 8008a08:	e00c      	b.n	8008a24 <UART_SetConfig+0x1c0>
 8008a0a:	231b      	movs	r3, #27
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	189b      	adds	r3, r3, r2
 8008a10:	19db      	adds	r3, r3, r7
 8008a12:	2210      	movs	r2, #16
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	e005      	b.n	8008a24 <UART_SetConfig+0x1c0>
 8008a18:	231b      	movs	r3, #27
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	189b      	adds	r3, r3, r2
 8008a1e:	19db      	adds	r3, r3, r7
 8008a20:	2210      	movs	r2, #16
 8008a22:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a61      	ldr	r2, [pc, #388]	@ (8008bb0 <UART_SetConfig+0x34c>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d000      	beq.n	8008a30 <UART_SetConfig+0x1cc>
 8008a2e:	e092      	b.n	8008b56 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a30:	231b      	movs	r3, #27
 8008a32:	2220      	movs	r2, #32
 8008a34:	189b      	adds	r3, r3, r2
 8008a36:	19db      	adds	r3, r3, r7
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b08      	cmp	r3, #8
 8008a3c:	d015      	beq.n	8008a6a <UART_SetConfig+0x206>
 8008a3e:	dc18      	bgt.n	8008a72 <UART_SetConfig+0x20e>
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	d00d      	beq.n	8008a60 <UART_SetConfig+0x1fc>
 8008a44:	dc15      	bgt.n	8008a72 <UART_SetConfig+0x20e>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <UART_SetConfig+0x1ec>
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d005      	beq.n	8008a5a <UART_SetConfig+0x1f6>
 8008a4e:	e010      	b.n	8008a72 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a50:	f7fe fba0 	bl	8007194 <HAL_RCC_GetPCLK1Freq>
 8008a54:	0003      	movs	r3, r0
 8008a56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a58:	e014      	b.n	8008a84 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8008bc4 <UART_SetConfig+0x360>)
 8008a5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a5e:	e011      	b.n	8008a84 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a60:	f7fe fb0c 	bl	800707c <HAL_RCC_GetSysClockFreq>
 8008a64:	0003      	movs	r3, r0
 8008a66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a68:	e00c      	b.n	8008a84 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a6a:	2380      	movs	r3, #128	@ 0x80
 8008a6c:	021b      	lsls	r3, r3, #8
 8008a6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a70:	e008      	b.n	8008a84 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008a76:	231a      	movs	r3, #26
 8008a78:	2220      	movs	r2, #32
 8008a7a:	189b      	adds	r3, r3, r2
 8008a7c:	19db      	adds	r3, r3, r7
 8008a7e:	2201      	movs	r2, #1
 8008a80:	701a      	strb	r2, [r3, #0]
        break;
 8008a82:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d100      	bne.n	8008a8c <UART_SetConfig+0x228>
 8008a8a:	e147      	b.n	8008d1c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a90:	4b4d      	ldr	r3, [pc, #308]	@ (8008bc8 <UART_SetConfig+0x364>)
 8008a92:	0052      	lsls	r2, r2, #1
 8008a94:	5ad3      	ldrh	r3, [r2, r3]
 8008a96:	0019      	movs	r1, r3
 8008a98:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008a9a:	f7f7 fb4f 	bl	800013c <__udivsi3>
 8008a9e:	0003      	movs	r3, r0
 8008aa0:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	0013      	movs	r3, r2
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	189b      	adds	r3, r3, r2
 8008aac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d305      	bcc.n	8008abe <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d906      	bls.n	8008acc <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8008abe:	231a      	movs	r3, #26
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	189b      	adds	r3, r3, r2
 8008ac4:	19db      	adds	r3, r3, r7
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	701a      	strb	r2, [r3, #0]
 8008aca:	e127      	b.n	8008d1c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ace:	61bb      	str	r3, [r7, #24]
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61fb      	str	r3, [r7, #28]
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8008bc8 <UART_SetConfig+0x364>)
 8008ada:	0052      	lsls	r2, r2, #1
 8008adc:	5ad3      	ldrh	r3, [r2, r3]
 8008ade:	613b      	str	r3, [r7, #16]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	69b8      	ldr	r0, [r7, #24]
 8008aea:	69f9      	ldr	r1, [r7, #28]
 8008aec:	f7f7 fd14 	bl	8000518 <__aeabi_uldivmod>
 8008af0:	0002      	movs	r2, r0
 8008af2:	000b      	movs	r3, r1
 8008af4:	0e11      	lsrs	r1, r2, #24
 8008af6:	021d      	lsls	r5, r3, #8
 8008af8:	430d      	orrs	r5, r1
 8008afa:	0214      	lsls	r4, r2, #8
 8008afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	085b      	lsrs	r3, r3, #1
 8008b02:	60bb      	str	r3, [r7, #8]
 8008b04:	2300      	movs	r3, #0
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68b8      	ldr	r0, [r7, #8]
 8008b0a:	68f9      	ldr	r1, [r7, #12]
 8008b0c:	1900      	adds	r0, r0, r4
 8008b0e:	4169      	adcs	r1, r5
 8008b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	603b      	str	r3, [r7, #0]
 8008b16:	2300      	movs	r3, #0
 8008b18:	607b      	str	r3, [r7, #4]
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f7f7 fcfb 	bl	8000518 <__aeabi_uldivmod>
 8008b22:	0002      	movs	r2, r0
 8008b24:	000b      	movs	r3, r1
 8008b26:	0013      	movs	r3, r2
 8008b28:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b2c:	23c0      	movs	r3, #192	@ 0xc0
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d309      	bcc.n	8008b48 <UART_SetConfig+0x2e4>
 8008b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b36:	2380      	movs	r3, #128	@ 0x80
 8008b38:	035b      	lsls	r3, r3, #13
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d204      	bcs.n	8008b48 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b44:	60da      	str	r2, [r3, #12]
 8008b46:	e0e9      	b.n	8008d1c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8008b48:	231a      	movs	r3, #26
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	189b      	adds	r3, r3, r2
 8008b4e:	19db      	adds	r3, r3, r7
 8008b50:	2201      	movs	r2, #1
 8008b52:	701a      	strb	r2, [r3, #0]
 8008b54:	e0e2      	b.n	8008d1c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	69da      	ldr	r2, [r3, #28]
 8008b5a:	2380      	movs	r3, #128	@ 0x80
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d000      	beq.n	8008b64 <UART_SetConfig+0x300>
 8008b62:	e083      	b.n	8008c6c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8008b64:	231b      	movs	r3, #27
 8008b66:	2220      	movs	r2, #32
 8008b68:	189b      	adds	r3, r3, r2
 8008b6a:	19db      	adds	r3, r3, r7
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2b08      	cmp	r3, #8
 8008b70:	d015      	beq.n	8008b9e <UART_SetConfig+0x33a>
 8008b72:	dc2b      	bgt.n	8008bcc <UART_SetConfig+0x368>
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	d00d      	beq.n	8008b94 <UART_SetConfig+0x330>
 8008b78:	dc28      	bgt.n	8008bcc <UART_SetConfig+0x368>
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <UART_SetConfig+0x320>
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d005      	beq.n	8008b8e <UART_SetConfig+0x32a>
 8008b82:	e023      	b.n	8008bcc <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b84:	f7fe fb06 	bl	8007194 <HAL_RCC_GetPCLK1Freq>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b8c:	e027      	b.n	8008bde <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc4 <UART_SetConfig+0x360>)
 8008b90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b92:	e024      	b.n	8008bde <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b94:	f7fe fa72 	bl	800707c <HAL_RCC_GetSysClockFreq>
 8008b98:	0003      	movs	r3, r0
 8008b9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b9c:	e01f      	b.n	8008bde <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b9e:	2380      	movs	r3, #128	@ 0x80
 8008ba0:	021b      	lsls	r3, r3, #8
 8008ba2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ba4:	e01b      	b.n	8008bde <UART_SetConfig+0x37a>
 8008ba6:	46c0      	nop			@ (mov r8, r8)
 8008ba8:	cfff69f3 	.word	0xcfff69f3
 8008bac:	ffffcfff 	.word	0xffffcfff
 8008bb0:	40008000 	.word	0x40008000
 8008bb4:	11fff4ff 	.word	0x11fff4ff
 8008bb8:	40013800 	.word	0x40013800
 8008bbc:	40021000 	.word	0x40021000
 8008bc0:	40004400 	.word	0x40004400
 8008bc4:	00f42400 	.word	0x00f42400
 8008bc8:	0800d8e8 	.word	0x0800d8e8
      default:
        pclk = 0U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008bd0:	231a      	movs	r3, #26
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	189b      	adds	r3, r3, r2
 8008bd6:	19db      	adds	r3, r3, r7
 8008bd8:	2201      	movs	r2, #1
 8008bda:	701a      	strb	r2, [r3, #0]
        break;
 8008bdc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d100      	bne.n	8008be6 <UART_SetConfig+0x382>
 8008be4:	e09a      	b.n	8008d1c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bea:	4b58      	ldr	r3, [pc, #352]	@ (8008d4c <UART_SetConfig+0x4e8>)
 8008bec:	0052      	lsls	r2, r2, #1
 8008bee:	5ad3      	ldrh	r3, [r2, r3]
 8008bf0:	0019      	movs	r1, r3
 8008bf2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008bf4:	f7f7 faa2 	bl	800013c <__udivsi3>
 8008bf8:	0003      	movs	r3, r0
 8008bfa:	005a      	lsls	r2, r3, #1
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	085b      	lsrs	r3, r3, #1
 8008c02:	18d2      	adds	r2, r2, r3
 8008c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	0019      	movs	r1, r3
 8008c0a:	0010      	movs	r0, r2
 8008c0c:	f7f7 fa96 	bl	800013c <__udivsi3>
 8008c10:	0003      	movs	r3, r0
 8008c12:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c16:	2b0f      	cmp	r3, #15
 8008c18:	d921      	bls.n	8008c5e <UART_SetConfig+0x3fa>
 8008c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c1c:	2380      	movs	r3, #128	@ 0x80
 8008c1e:	025b      	lsls	r3, r3, #9
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d21c      	bcs.n	8008c5e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	200e      	movs	r0, #14
 8008c2a:	2420      	movs	r4, #32
 8008c2c:	1903      	adds	r3, r0, r4
 8008c2e:	19db      	adds	r3, r3, r7
 8008c30:	210f      	movs	r1, #15
 8008c32:	438a      	bics	r2, r1
 8008c34:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	085b      	lsrs	r3, r3, #1
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	2207      	movs	r2, #7
 8008c3e:	4013      	ands	r3, r2
 8008c40:	b299      	uxth	r1, r3
 8008c42:	1903      	adds	r3, r0, r4
 8008c44:	19db      	adds	r3, r3, r7
 8008c46:	1902      	adds	r2, r0, r4
 8008c48:	19d2      	adds	r2, r2, r7
 8008c4a:	8812      	ldrh	r2, [r2, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	1902      	adds	r2, r0, r4
 8008c56:	19d2      	adds	r2, r2, r7
 8008c58:	8812      	ldrh	r2, [r2, #0]
 8008c5a:	60da      	str	r2, [r3, #12]
 8008c5c:	e05e      	b.n	8008d1c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8008c5e:	231a      	movs	r3, #26
 8008c60:	2220      	movs	r2, #32
 8008c62:	189b      	adds	r3, r3, r2
 8008c64:	19db      	adds	r3, r3, r7
 8008c66:	2201      	movs	r2, #1
 8008c68:	701a      	strb	r2, [r3, #0]
 8008c6a:	e057      	b.n	8008d1c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c6c:	231b      	movs	r3, #27
 8008c6e:	2220      	movs	r2, #32
 8008c70:	189b      	adds	r3, r3, r2
 8008c72:	19db      	adds	r3, r3, r7
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d015      	beq.n	8008ca6 <UART_SetConfig+0x442>
 8008c7a:	dc18      	bgt.n	8008cae <UART_SetConfig+0x44a>
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	d00d      	beq.n	8008c9c <UART_SetConfig+0x438>
 8008c80:	dc15      	bgt.n	8008cae <UART_SetConfig+0x44a>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d002      	beq.n	8008c8c <UART_SetConfig+0x428>
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d005      	beq.n	8008c96 <UART_SetConfig+0x432>
 8008c8a:	e010      	b.n	8008cae <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c8c:	f7fe fa82 	bl	8007194 <HAL_RCC_GetPCLK1Freq>
 8008c90:	0003      	movs	r3, r0
 8008c92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c94:	e014      	b.n	8008cc0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c96:	4b2e      	ldr	r3, [pc, #184]	@ (8008d50 <UART_SetConfig+0x4ec>)
 8008c98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c9a:	e011      	b.n	8008cc0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c9c:	f7fe f9ee 	bl	800707c <HAL_RCC_GetSysClockFreq>
 8008ca0:	0003      	movs	r3, r0
 8008ca2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ca4:	e00c      	b.n	8008cc0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ca6:	2380      	movs	r3, #128	@ 0x80
 8008ca8:	021b      	lsls	r3, r3, #8
 8008caa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cac:	e008      	b.n	8008cc0 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008cb2:	231a      	movs	r3, #26
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	189b      	adds	r3, r3, r2
 8008cb8:	19db      	adds	r3, r3, r7
 8008cba:	2201      	movs	r2, #1
 8008cbc:	701a      	strb	r2, [r3, #0]
        break;
 8008cbe:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d02a      	beq.n	8008d1c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cca:	4b20      	ldr	r3, [pc, #128]	@ (8008d4c <UART_SetConfig+0x4e8>)
 8008ccc:	0052      	lsls	r2, r2, #1
 8008cce:	5ad3      	ldrh	r3, [r2, r3]
 8008cd0:	0019      	movs	r1, r3
 8008cd2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008cd4:	f7f7 fa32 	bl	800013c <__udivsi3>
 8008cd8:	0003      	movs	r3, r0
 8008cda:	001a      	movs	r2, r3
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	085b      	lsrs	r3, r3, #1
 8008ce2:	18d2      	adds	r2, r2, r3
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	0019      	movs	r1, r3
 8008cea:	0010      	movs	r0, r2
 8008cec:	f7f7 fa26 	bl	800013c <__udivsi3>
 8008cf0:	0003      	movs	r3, r0
 8008cf2:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf6:	2b0f      	cmp	r3, #15
 8008cf8:	d90a      	bls.n	8008d10 <UART_SetConfig+0x4ac>
 8008cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cfc:	2380      	movs	r3, #128	@ 0x80
 8008cfe:	025b      	lsls	r3, r3, #9
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d205      	bcs.n	8008d10 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	60da      	str	r2, [r3, #12]
 8008d0e:	e005      	b.n	8008d1c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8008d10:	231a      	movs	r3, #26
 8008d12:	2220      	movs	r2, #32
 8008d14:	189b      	adds	r3, r3, r2
 8008d16:	19db      	adds	r3, r3, r7
 8008d18:	2201      	movs	r2, #1
 8008d1a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1e:	226a      	movs	r2, #106	@ 0x6a
 8008d20:	2101      	movs	r1, #1
 8008d22:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d26:	2268      	movs	r2, #104	@ 0x68
 8008d28:	2101      	movs	r1, #1
 8008d2a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	2200      	movs	r2, #0
 8008d30:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d34:	2200      	movs	r2, #0
 8008d36:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008d38:	231a      	movs	r3, #26
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	189b      	adds	r3, r3, r2
 8008d3e:	19db      	adds	r3, r3, r7
 8008d40:	781b      	ldrb	r3, [r3, #0]
}
 8008d42:	0018      	movs	r0, r3
 8008d44:	46bd      	mov	sp, r7
 8008d46:	b010      	add	sp, #64	@ 0x40
 8008d48:	bdb0      	pop	{r4, r5, r7, pc}
 8008d4a:	46c0      	nop			@ (mov r8, r8)
 8008d4c:	0800d8e8 	.word	0x0800d8e8
 8008d50:	00f42400 	.word	0x00f42400

08008d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d60:	2208      	movs	r2, #8
 8008d62:	4013      	ands	r3, r2
 8008d64:	d00b      	beq.n	8008d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	4a4a      	ldr	r2, [pc, #296]	@ (8008e98 <UART_AdvFeatureConfig+0x144>)
 8008d6e:	4013      	ands	r3, r2
 8008d70:	0019      	movs	r1, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d82:	2201      	movs	r2, #1
 8008d84:	4013      	ands	r3, r2
 8008d86:	d00b      	beq.n	8008da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	4a43      	ldr	r2, [pc, #268]	@ (8008e9c <UART_AdvFeatureConfig+0x148>)
 8008d90:	4013      	ands	r3, r2
 8008d92:	0019      	movs	r1, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da4:	2202      	movs	r2, #2
 8008da6:	4013      	ands	r3, r2
 8008da8:	d00b      	beq.n	8008dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4a3b      	ldr	r2, [pc, #236]	@ (8008ea0 <UART_AdvFeatureConfig+0x14c>)
 8008db2:	4013      	ands	r3, r2
 8008db4:	0019      	movs	r1, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc6:	2204      	movs	r2, #4
 8008dc8:	4013      	ands	r3, r2
 8008dca:	d00b      	beq.n	8008de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	4a34      	ldr	r2, [pc, #208]	@ (8008ea4 <UART_AdvFeatureConfig+0x150>)
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	0019      	movs	r1, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	430a      	orrs	r2, r1
 8008de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de8:	2210      	movs	r2, #16
 8008dea:	4013      	ands	r3, r2
 8008dec:	d00b      	beq.n	8008e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	4a2c      	ldr	r2, [pc, #176]	@ (8008ea8 <UART_AdvFeatureConfig+0x154>)
 8008df6:	4013      	ands	r3, r2
 8008df8:	0019      	movs	r1, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	d00b      	beq.n	8008e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	4a25      	ldr	r2, [pc, #148]	@ (8008eac <UART_AdvFeatureConfig+0x158>)
 8008e18:	4013      	ands	r3, r2
 8008e1a:	0019      	movs	r1, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2c:	2240      	movs	r2, #64	@ 0x40
 8008e2e:	4013      	ands	r3, r2
 8008e30:	d01d      	beq.n	8008e6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	4a1d      	ldr	r2, [pc, #116]	@ (8008eb0 <UART_AdvFeatureConfig+0x15c>)
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	0019      	movs	r1, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e4e:	2380      	movs	r3, #128	@ 0x80
 8008e50:	035b      	lsls	r3, r3, #13
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d10b      	bne.n	8008e6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	4a15      	ldr	r2, [pc, #84]	@ (8008eb4 <UART_AdvFeatureConfig+0x160>)
 8008e5e:	4013      	ands	r3, r2
 8008e60:	0019      	movs	r1, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	430a      	orrs	r2, r1
 8008e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e72:	2280      	movs	r2, #128	@ 0x80
 8008e74:	4013      	ands	r3, r2
 8008e76:	d00b      	beq.n	8008e90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8008eb8 <UART_AdvFeatureConfig+0x164>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	0019      	movs	r1, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	430a      	orrs	r2, r1
 8008e8e:	605a      	str	r2, [r3, #4]
  }
}
 8008e90:	46c0      	nop			@ (mov r8, r8)
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b002      	add	sp, #8
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	ffff7fff 	.word	0xffff7fff
 8008e9c:	fffdffff 	.word	0xfffdffff
 8008ea0:	fffeffff 	.word	0xfffeffff
 8008ea4:	fffbffff 	.word	0xfffbffff
 8008ea8:	ffffefff 	.word	0xffffefff
 8008eac:	ffffdfff 	.word	0xffffdfff
 8008eb0:	ffefffff 	.word	0xffefffff
 8008eb4:	ff9fffff 	.word	0xff9fffff
 8008eb8:	fff7ffff 	.word	0xfff7ffff

08008ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b092      	sub	sp, #72	@ 0x48
 8008ec0:	af02      	add	r7, sp, #8
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2290      	movs	r2, #144	@ 0x90
 8008ec8:	2100      	movs	r1, #0
 8008eca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ecc:	f7fc f82e 	bl	8004f2c <HAL_GetTick>
 8008ed0:	0003      	movs	r3, r0
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2208      	movs	r2, #8
 8008edc:	4013      	ands	r3, r2
 8008ede:	2b08      	cmp	r3, #8
 8008ee0:	d12d      	bne.n	8008f3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ee4:	2280      	movs	r2, #128	@ 0x80
 8008ee6:	0391      	lsls	r1, r2, #14
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	4a47      	ldr	r2, [pc, #284]	@ (8009008 <UART_CheckIdleState+0x14c>)
 8008eec:	9200      	str	r2, [sp, #0]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f000 f88e 	bl	8009010 <UART_WaitOnFlagUntilTimeout>
 8008ef4:	1e03      	subs	r3, r0, #0
 8008ef6:	d022      	beq.n	8008f3e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8008efc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f02:	2301      	movs	r3, #1
 8008f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f08:	f383 8810 	msr	PRIMASK, r3
}
 8008f0c:	46c0      	nop			@ (mov r8, r8)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2180      	movs	r1, #128	@ 0x80
 8008f1a:	438a      	bics	r2, r1
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f24:	f383 8810 	msr	PRIMASK, r3
}
 8008f28:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2288      	movs	r2, #136	@ 0x88
 8008f2e:	2120      	movs	r1, #32
 8008f30:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2284      	movs	r2, #132	@ 0x84
 8008f36:	2100      	movs	r1, #0
 8008f38:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e060      	b.n	8009000 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2204      	movs	r2, #4
 8008f46:	4013      	ands	r3, r2
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d146      	bne.n	8008fda <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f4e:	2280      	movs	r2, #128	@ 0x80
 8008f50:	03d1      	lsls	r1, r2, #15
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	4a2c      	ldr	r2, [pc, #176]	@ (8009008 <UART_CheckIdleState+0x14c>)
 8008f56:	9200      	str	r2, [sp, #0]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f000 f859 	bl	8009010 <UART_WaitOnFlagUntilTimeout>
 8008f5e:	1e03      	subs	r3, r0, #0
 8008f60:	d03b      	beq.n	8008fda <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f62:	f3ef 8310 	mrs	r3, PRIMASK
 8008f66:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f68:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	f383 8810 	msr	PRIMASK, r3
}
 8008f76:	46c0      	nop			@ (mov r8, r8)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4922      	ldr	r1, [pc, #136]	@ (800900c <UART_CheckIdleState+0x150>)
 8008f84:	400a      	ands	r2, r1
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f383 8810 	msr	PRIMASK, r3
}
 8008f92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f94:	f3ef 8310 	mrs	r3, PRIMASK
 8008f98:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f9a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	f383 8810 	msr	PRIMASK, r3
}
 8008fa8:	46c0      	nop			@ (mov r8, r8)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689a      	ldr	r2, [r3, #8]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	438a      	bics	r2, r1
 8008fb8:	609a      	str	r2, [r3, #8]
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	f383 8810 	msr	PRIMASK, r3
}
 8008fc4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	228c      	movs	r2, #140	@ 0x8c
 8008fca:	2120      	movs	r1, #32
 8008fcc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2284      	movs	r2, #132	@ 0x84
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e012      	b.n	8009000 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2288      	movs	r2, #136	@ 0x88
 8008fde:	2120      	movs	r1, #32
 8008fe0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	228c      	movs	r2, #140	@ 0x8c
 8008fe6:	2120      	movs	r1, #32
 8008fe8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2284      	movs	r2, #132	@ 0x84
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	0018      	movs	r0, r3
 8009002:	46bd      	mov	sp, r7
 8009004:	b010      	add	sp, #64	@ 0x40
 8009006:	bd80      	pop	{r7, pc}
 8009008:	01ffffff 	.word	0x01ffffff
 800900c:	fffffedf 	.word	0xfffffedf

08009010 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	603b      	str	r3, [r7, #0]
 800901c:	1dfb      	adds	r3, r7, #7
 800901e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009020:	e051      	b.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	3301      	adds	r3, #1
 8009026:	d04e      	beq.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009028:	f7fb ff80 	bl	8004f2c <HAL_GetTick>
 800902c:	0002      	movs	r2, r0
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	429a      	cmp	r2, r3
 8009036:	d302      	bcc.n	800903e <UART_WaitOnFlagUntilTimeout+0x2e>
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e051      	b.n	80090e6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2204      	movs	r2, #4
 800904a:	4013      	ands	r3, r2
 800904c:	d03b      	beq.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	2b80      	cmp	r3, #128	@ 0x80
 8009052:	d038      	beq.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2b40      	cmp	r3, #64	@ 0x40
 8009058:	d035      	beq.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	2208      	movs	r2, #8
 8009062:	4013      	ands	r3, r2
 8009064:	2b08      	cmp	r3, #8
 8009066:	d111      	bne.n	800908c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2208      	movs	r2, #8
 800906e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	0018      	movs	r0, r3
 8009074:	f000 f960 	bl	8009338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2290      	movs	r2, #144	@ 0x90
 800907c:	2108      	movs	r1, #8
 800907e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2284      	movs	r2, #132	@ 0x84
 8009084:	2100      	movs	r1, #0
 8009086:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e02c      	b.n	80090e6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	69da      	ldr	r2, [r3, #28]
 8009092:	2380      	movs	r3, #128	@ 0x80
 8009094:	011b      	lsls	r3, r3, #4
 8009096:	401a      	ands	r2, r3
 8009098:	2380      	movs	r3, #128	@ 0x80
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	429a      	cmp	r2, r3
 800909e:	d112      	bne.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2280      	movs	r2, #128	@ 0x80
 80090a6:	0112      	lsls	r2, r2, #4
 80090a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	0018      	movs	r0, r3
 80090ae:	f000 f943 	bl	8009338 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2290      	movs	r2, #144	@ 0x90
 80090b6:	2120      	movs	r1, #32
 80090b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2284      	movs	r2, #132	@ 0x84
 80090be:	2100      	movs	r1, #0
 80090c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80090c2:	2303      	movs	r3, #3
 80090c4:	e00f      	b.n	80090e6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	4013      	ands	r3, r2
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	425a      	negs	r2, r3
 80090d6:	4153      	adcs	r3, r2
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	001a      	movs	r2, r3
 80090dc:	1dfb      	adds	r3, r7, #7
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d09e      	beq.n	8009022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	0018      	movs	r0, r3
 80090e8:	46bd      	mov	sp, r7
 80090ea:	b004      	add	sp, #16
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b098      	sub	sp, #96	@ 0x60
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	1dbb      	adds	r3, r7, #6
 80090fc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	1dba      	adds	r2, r7, #6
 8009108:	215c      	movs	r1, #92	@ 0x5c
 800910a:	8812      	ldrh	r2, [r2, #0]
 800910c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1dba      	adds	r2, r7, #6
 8009112:	215e      	movs	r1, #94	@ 0x5e
 8009114:	8812      	ldrh	r2, [r2, #0]
 8009116:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	689a      	ldr	r2, [r3, #8]
 8009122:	2380      	movs	r3, #128	@ 0x80
 8009124:	015b      	lsls	r3, r3, #5
 8009126:	429a      	cmp	r2, r3
 8009128:	d10d      	bne.n	8009146 <UART_Start_Receive_IT+0x56>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d104      	bne.n	800913c <UART_Start_Receive_IT+0x4c>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2260      	movs	r2, #96	@ 0x60
 8009136:	497b      	ldr	r1, [pc, #492]	@ (8009324 <UART_Start_Receive_IT+0x234>)
 8009138:	5299      	strh	r1, [r3, r2]
 800913a:	e02e      	b.n	800919a <UART_Start_Receive_IT+0xaa>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2260      	movs	r2, #96	@ 0x60
 8009140:	21ff      	movs	r1, #255	@ 0xff
 8009142:	5299      	strh	r1, [r3, r2]
 8009144:	e029      	b.n	800919a <UART_Start_Receive_IT+0xaa>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10d      	bne.n	800916a <UART_Start_Receive_IT+0x7a>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d104      	bne.n	8009160 <UART_Start_Receive_IT+0x70>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2260      	movs	r2, #96	@ 0x60
 800915a:	21ff      	movs	r1, #255	@ 0xff
 800915c:	5299      	strh	r1, [r3, r2]
 800915e:	e01c      	b.n	800919a <UART_Start_Receive_IT+0xaa>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2260      	movs	r2, #96	@ 0x60
 8009164:	217f      	movs	r1, #127	@ 0x7f
 8009166:	5299      	strh	r1, [r3, r2]
 8009168:	e017      	b.n	800919a <UART_Start_Receive_IT+0xaa>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689a      	ldr	r2, [r3, #8]
 800916e:	2380      	movs	r3, #128	@ 0x80
 8009170:	055b      	lsls	r3, r3, #21
 8009172:	429a      	cmp	r2, r3
 8009174:	d10d      	bne.n	8009192 <UART_Start_Receive_IT+0xa2>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d104      	bne.n	8009188 <UART_Start_Receive_IT+0x98>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2260      	movs	r2, #96	@ 0x60
 8009182:	217f      	movs	r1, #127	@ 0x7f
 8009184:	5299      	strh	r1, [r3, r2]
 8009186:	e008      	b.n	800919a <UART_Start_Receive_IT+0xaa>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2260      	movs	r2, #96	@ 0x60
 800918c:	213f      	movs	r1, #63	@ 0x3f
 800918e:	5299      	strh	r1, [r3, r2]
 8009190:	e003      	b.n	800919a <UART_Start_Receive_IT+0xaa>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2260      	movs	r2, #96	@ 0x60
 8009196:	2100      	movs	r1, #0
 8009198:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2290      	movs	r2, #144	@ 0x90
 800919e:	2100      	movs	r1, #0
 80091a0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	228c      	movs	r2, #140	@ 0x8c
 80091a6:	2122      	movs	r1, #34	@ 0x22
 80091a8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091aa:	f3ef 8310 	mrs	r3, PRIMASK
 80091ae:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80091b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091b4:	2301      	movs	r3, #1
 80091b6:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091ba:	f383 8810 	msr	PRIMASK, r3
}
 80091be:	46c0      	nop			@ (mov r8, r8)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689a      	ldr	r2, [r3, #8]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2101      	movs	r1, #1
 80091cc:	430a      	orrs	r2, r1
 80091ce:	609a      	str	r2, [r3, #8]
 80091d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091d6:	f383 8810 	msr	PRIMASK, r3
}
 80091da:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80091e0:	2380      	movs	r3, #128	@ 0x80
 80091e2:	059b      	lsls	r3, r3, #22
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d150      	bne.n	800928a <UART_Start_Receive_IT+0x19a>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2268      	movs	r2, #104	@ 0x68
 80091ec:	5a9b      	ldrh	r3, [r3, r2]
 80091ee:	1dba      	adds	r2, r7, #6
 80091f0:	8812      	ldrh	r2, [r2, #0]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d349      	bcc.n	800928a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	2380      	movs	r3, #128	@ 0x80
 80091fc:	015b      	lsls	r3, r3, #5
 80091fe:	429a      	cmp	r2, r3
 8009200:	d107      	bne.n	8009212 <UART_Start_Receive_IT+0x122>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d103      	bne.n	8009212 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4a46      	ldr	r2, [pc, #280]	@ (8009328 <UART_Start_Receive_IT+0x238>)
 800920e:	675a      	str	r2, [r3, #116]	@ 0x74
 8009210:	e002      	b.n	8009218 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	4a45      	ldr	r2, [pc, #276]	@ (800932c <UART_Start_Receive_IT+0x23c>)
 8009216:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d019      	beq.n	8009254 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009220:	f3ef 8310 	mrs	r3, PRIMASK
 8009224:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8009226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009228:	65bb      	str	r3, [r7, #88]	@ 0x58
 800922a:	2301      	movs	r3, #1
 800922c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800922e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009230:	f383 8810 	msr	PRIMASK, r3
}
 8009234:	46c0      	nop			@ (mov r8, r8)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2180      	movs	r1, #128	@ 0x80
 8009242:	0049      	lsls	r1, r1, #1
 8009244:	430a      	orrs	r2, r1
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800924a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800924c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800924e:	f383 8810 	msr	PRIMASK, r3
}
 8009252:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009254:	f3ef 8310 	mrs	r3, PRIMASK
 8009258:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800925a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800925c:	657b      	str	r3, [r7, #84]	@ 0x54
 800925e:	2301      	movs	r3, #1
 8009260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009264:	f383 8810 	msr	PRIMASK, r3
}
 8009268:	46c0      	nop			@ (mov r8, r8)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2180      	movs	r1, #128	@ 0x80
 8009276:	0549      	lsls	r1, r1, #21
 8009278:	430a      	orrs	r2, r1
 800927a:	609a      	str	r2, [r3, #8]
 800927c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800927e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009282:	f383 8810 	msr	PRIMASK, r3
}
 8009286:	46c0      	nop			@ (mov r8, r8)
 8009288:	e047      	b.n	800931a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	689a      	ldr	r2, [r3, #8]
 800928e:	2380      	movs	r3, #128	@ 0x80
 8009290:	015b      	lsls	r3, r3, #5
 8009292:	429a      	cmp	r2, r3
 8009294:	d107      	bne.n	80092a6 <UART_Start_Receive_IT+0x1b6>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d103      	bne.n	80092a6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4a23      	ldr	r2, [pc, #140]	@ (8009330 <UART_Start_Receive_IT+0x240>)
 80092a2:	675a      	str	r2, [r3, #116]	@ 0x74
 80092a4:	e002      	b.n	80092ac <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	4a22      	ldr	r2, [pc, #136]	@ (8009334 <UART_Start_Receive_IT+0x244>)
 80092aa:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d019      	beq.n	80092e8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092b4:	f3ef 8310 	mrs	r3, PRIMASK
 80092b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80092ba:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80092bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092be:	2301      	movs	r3, #1
 80092c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	f383 8810 	msr	PRIMASK, r3
}
 80092c8:	46c0      	nop			@ (mov r8, r8)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2190      	movs	r1, #144	@ 0x90
 80092d6:	0049      	lsls	r1, r1, #1
 80092d8:	430a      	orrs	r2, r1
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e2:	f383 8810 	msr	PRIMASK, r3
}
 80092e6:	e018      	b.n	800931a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092e8:	f3ef 8310 	mrs	r3, PRIMASK
 80092ec:	613b      	str	r3, [r7, #16]
  return(result);
 80092ee:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80092f2:	2301      	movs	r3, #1
 80092f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f383 8810 	msr	PRIMASK, r3
}
 80092fc:	46c0      	nop			@ (mov r8, r8)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2120      	movs	r1, #32
 800930a:	430a      	orrs	r2, r1
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009310:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	f383 8810 	msr	PRIMASK, r3
}
 8009318:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	0018      	movs	r0, r3
 800931e:	46bd      	mov	sp, r7
 8009320:	b018      	add	sp, #96	@ 0x60
 8009322:	bd80      	pop	{r7, pc}
 8009324:	000001ff 	.word	0x000001ff
 8009328:	08009ea5 	.word	0x08009ea5
 800932c:	08009b65 	.word	0x08009b65
 8009330:	080099a1 	.word	0x080099a1
 8009334:	080097dd 	.word	0x080097dd

08009338 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08e      	sub	sp, #56	@ 0x38
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009340:	f3ef 8310 	mrs	r3, PRIMASK
 8009344:	617b      	str	r3, [r7, #20]
  return(result);
 8009346:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009348:	637b      	str	r3, [r7, #52]	@ 0x34
 800934a:	2301      	movs	r3, #1
 800934c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	f383 8810 	msr	PRIMASK, r3
}
 8009354:	46c0      	nop			@ (mov r8, r8)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4926      	ldr	r1, [pc, #152]	@ (80093fc <UART_EndRxTransfer+0xc4>)
 8009362:	400a      	ands	r2, r1
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009368:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	f383 8810 	msr	PRIMASK, r3
}
 8009370:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009372:	f3ef 8310 	mrs	r3, PRIMASK
 8009376:	623b      	str	r3, [r7, #32]
  return(result);
 8009378:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800937a:	633b      	str	r3, [r7, #48]	@ 0x30
 800937c:	2301      	movs	r3, #1
 800937e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009382:	f383 8810 	msr	PRIMASK, r3
}
 8009386:	46c0      	nop			@ (mov r8, r8)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689a      	ldr	r2, [r3, #8]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	491b      	ldr	r1, [pc, #108]	@ (8009400 <UART_EndRxTransfer+0xc8>)
 8009394:	400a      	ands	r2, r1
 8009396:	609a      	str	r2, [r3, #8]
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800939c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939e:	f383 8810 	msr	PRIMASK, r3
}
 80093a2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d118      	bne.n	80093de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093ac:	f3ef 8310 	mrs	r3, PRIMASK
 80093b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80093b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093b6:	2301      	movs	r3, #1
 80093b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f383 8810 	msr	PRIMASK, r3
}
 80093c0:	46c0      	nop			@ (mov r8, r8)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2110      	movs	r1, #16
 80093ce:	438a      	bics	r2, r1
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f383 8810 	msr	PRIMASK, r3
}
 80093dc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	228c      	movs	r2, #140	@ 0x8c
 80093e2:	2120      	movs	r1, #32
 80093e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80093f2:	46c0      	nop			@ (mov r8, r8)
 80093f4:	46bd      	mov	sp, r7
 80093f6:	b00e      	add	sp, #56	@ 0x38
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	46c0      	nop			@ (mov r8, r8)
 80093fc:	fffffedf 	.word	0xfffffedf
 8009400:	effffffe 	.word	0xeffffffe

08009404 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009410:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	225e      	movs	r2, #94	@ 0x5e
 8009416:	2100      	movs	r1, #0
 8009418:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2256      	movs	r2, #86	@ 0x56
 800941e:	2100      	movs	r1, #0
 8009420:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	0018      	movs	r0, r3
 8009426:	f7ff fa09 	bl	800883c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800942a:	46c0      	nop			@ (mov r8, r8)
 800942c:	46bd      	mov	sp, r7
 800942e:	b004      	add	sp, #16
 8009430:	bd80      	pop	{r7, pc}

08009432 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b08a      	sub	sp, #40	@ 0x28
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2288      	movs	r2, #136	@ 0x88
 800943e:	589b      	ldr	r3, [r3, r2]
 8009440:	2b21      	cmp	r3, #33	@ 0x21
 8009442:	d14c      	bne.n	80094de <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2256      	movs	r2, #86	@ 0x56
 8009448:	5a9b      	ldrh	r3, [r3, r2]
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d132      	bne.n	80094b6 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009450:	f3ef 8310 	mrs	r3, PRIMASK
 8009454:	60bb      	str	r3, [r7, #8]
  return(result);
 8009456:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009458:	627b      	str	r3, [r7, #36]	@ 0x24
 800945a:	2301      	movs	r3, #1
 800945c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f383 8810 	msr	PRIMASK, r3
}
 8009464:	46c0      	nop			@ (mov r8, r8)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2180      	movs	r1, #128	@ 0x80
 8009472:	438a      	bics	r2, r1
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009478:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	f383 8810 	msr	PRIMASK, r3
}
 8009480:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009482:	f3ef 8310 	mrs	r3, PRIMASK
 8009486:	617b      	str	r3, [r7, #20]
  return(result);
 8009488:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800948a:	623b      	str	r3, [r7, #32]
 800948c:	2301      	movs	r3, #1
 800948e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	f383 8810 	msr	PRIMASK, r3
}
 8009496:	46c0      	nop			@ (mov r8, r8)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2140      	movs	r1, #64	@ 0x40
 80094a4:	430a      	orrs	r2, r1
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f383 8810 	msr	PRIMASK, r3
}
 80094b2:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80094b4:	e013      	b.n	80094de <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ba:	781a      	ldrb	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2256      	movs	r2, #86	@ 0x56
 80094d0:	5a9b      	ldrh	r3, [r3, r2]
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	3b01      	subs	r3, #1
 80094d6:	b299      	uxth	r1, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2256      	movs	r2, #86	@ 0x56
 80094dc:	5299      	strh	r1, [r3, r2]
}
 80094de:	46c0      	nop			@ (mov r8, r8)
 80094e0:	46bd      	mov	sp, r7
 80094e2:	b00a      	add	sp, #40	@ 0x28
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b08c      	sub	sp, #48	@ 0x30
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2288      	movs	r2, #136	@ 0x88
 80094f2:	589b      	ldr	r3, [r3, r2]
 80094f4:	2b21      	cmp	r3, #33	@ 0x21
 80094f6:	d151      	bne.n	800959c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2256      	movs	r2, #86	@ 0x56
 80094fc:	5a9b      	ldrh	r3, [r3, r2]
 80094fe:	b29b      	uxth	r3, r3
 8009500:	2b00      	cmp	r3, #0
 8009502:	d132      	bne.n	800956a <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009504:	f3ef 8310 	mrs	r3, PRIMASK
 8009508:	60fb      	str	r3, [r7, #12]
  return(result);
 800950a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800950c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800950e:	2301      	movs	r3, #1
 8009510:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f383 8810 	msr	PRIMASK, r3
}
 8009518:	46c0      	nop			@ (mov r8, r8)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2180      	movs	r1, #128	@ 0x80
 8009526:	438a      	bics	r2, r1
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f383 8810 	msr	PRIMASK, r3
}
 8009534:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009536:	f3ef 8310 	mrs	r3, PRIMASK
 800953a:	61bb      	str	r3, [r7, #24]
  return(result);
 800953c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800953e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009540:	2301      	movs	r3, #1
 8009542:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	f383 8810 	msr	PRIMASK, r3
}
 800954a:	46c0      	nop			@ (mov r8, r8)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2140      	movs	r1, #64	@ 0x40
 8009558:	430a      	orrs	r2, r1
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	f383 8810 	msr	PRIMASK, r3
}
 8009566:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009568:	e018      	b.n	800959c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800956e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	001a      	movs	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	05d2      	lsls	r2, r2, #23
 800957c:	0dd2      	lsrs	r2, r2, #23
 800957e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009584:	1c9a      	adds	r2, r3, #2
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2256      	movs	r2, #86	@ 0x56
 800958e:	5a9b      	ldrh	r3, [r3, r2]
 8009590:	b29b      	uxth	r3, r3
 8009592:	3b01      	subs	r3, #1
 8009594:	b299      	uxth	r1, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2256      	movs	r2, #86	@ 0x56
 800959a:	5299      	strh	r1, [r3, r2]
}
 800959c:	46c0      	nop			@ (mov r8, r8)
 800959e:	46bd      	mov	sp, r7
 80095a0:	b00c      	add	sp, #48	@ 0x30
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08c      	sub	sp, #48	@ 0x30
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2288      	movs	r2, #136	@ 0x88
 80095b0:	589b      	ldr	r3, [r3, r2]
 80095b2:	2b21      	cmp	r3, #33	@ 0x21
 80095b4:	d165      	bne.n	8009682 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80095b6:	232e      	movs	r3, #46	@ 0x2e
 80095b8:	18fb      	adds	r3, r7, r3
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	216a      	movs	r1, #106	@ 0x6a
 80095be:	5a52      	ldrh	r2, [r2, r1]
 80095c0:	801a      	strh	r2, [r3, #0]
 80095c2:	e059      	b.n	8009678 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2256      	movs	r2, #86	@ 0x56
 80095c8:	5a9b      	ldrh	r3, [r3, r2]
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d133      	bne.n	8009638 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095d0:	f3ef 8310 	mrs	r3, PRIMASK
 80095d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80095d6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80095d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095da:	2301      	movs	r3, #1
 80095dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f383 8810 	msr	PRIMASK, r3
}
 80095e4:	46c0      	nop			@ (mov r8, r8)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4926      	ldr	r1, [pc, #152]	@ (800968c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80095f2:	400a      	ands	r2, r1
 80095f4:	609a      	str	r2, [r3, #8]
 80095f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f383 8810 	msr	PRIMASK, r3
}
 8009600:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009602:	f3ef 8310 	mrs	r3, PRIMASK
 8009606:	61bb      	str	r3, [r7, #24]
  return(result);
 8009608:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800960a:	627b      	str	r3, [r7, #36]	@ 0x24
 800960c:	2301      	movs	r3, #1
 800960e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	f383 8810 	msr	PRIMASK, r3
}
 8009616:	46c0      	nop			@ (mov r8, r8)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2140      	movs	r1, #64	@ 0x40
 8009624:	430a      	orrs	r2, r1
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800962c:	6a3b      	ldr	r3, [r7, #32]
 800962e:	f383 8810 	msr	PRIMASK, r3
}
 8009632:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8009634:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8009636:	e024      	b.n	8009682 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	2280      	movs	r2, #128	@ 0x80
 8009640:	4013      	ands	r3, r2
 8009642:	d013      	beq.n	800966c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009648:	781a      	ldrb	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2256      	movs	r2, #86	@ 0x56
 800965e:	5a9b      	ldrh	r3, [r3, r2]
 8009660:	b29b      	uxth	r3, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	b299      	uxth	r1, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2256      	movs	r2, #86	@ 0x56
 800966a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800966c:	212e      	movs	r1, #46	@ 0x2e
 800966e:	187b      	adds	r3, r7, r1
 8009670:	881a      	ldrh	r2, [r3, #0]
 8009672:	187b      	adds	r3, r7, r1
 8009674:	3a01      	subs	r2, #1
 8009676:	801a      	strh	r2, [r3, #0]
 8009678:	232e      	movs	r3, #46	@ 0x2e
 800967a:	18fb      	adds	r3, r7, r3
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1a0      	bne.n	80095c4 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8009682:	46c0      	nop			@ (mov r8, r8)
 8009684:	46bd      	mov	sp, r7
 8009686:	b00c      	add	sp, #48	@ 0x30
 8009688:	bd80      	pop	{r7, pc}
 800968a:	46c0      	nop			@ (mov r8, r8)
 800968c:	ff7fffff 	.word	0xff7fffff

08009690 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b08c      	sub	sp, #48	@ 0x30
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2288      	movs	r2, #136	@ 0x88
 800969c:	589b      	ldr	r3, [r3, r2]
 800969e:	2b21      	cmp	r3, #33	@ 0x21
 80096a0:	d16a      	bne.n	8009778 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80096a2:	232e      	movs	r3, #46	@ 0x2e
 80096a4:	18fb      	adds	r3, r7, r3
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	216a      	movs	r1, #106	@ 0x6a
 80096aa:	5a52      	ldrh	r2, [r2, r1]
 80096ac:	801a      	strh	r2, [r3, #0]
 80096ae:	e05e      	b.n	800976e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2256      	movs	r2, #86	@ 0x56
 80096b4:	5a9b      	ldrh	r3, [r3, r2]
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d133      	bne.n	8009724 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096bc:	f3ef 8310 	mrs	r3, PRIMASK
 80096c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80096c2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80096c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80096c6:	2301      	movs	r3, #1
 80096c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f383 8810 	msr	PRIMASK, r3
}
 80096d0:	46c0      	nop			@ (mov r8, r8)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689a      	ldr	r2, [r3, #8]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4928      	ldr	r1, [pc, #160]	@ (8009780 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80096de:	400a      	ands	r2, r1
 80096e0:	609a      	str	r2, [r3, #8]
 80096e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	f383 8810 	msr	PRIMASK, r3
}
 80096ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096ee:	f3ef 8310 	mrs	r3, PRIMASK
 80096f2:	617b      	str	r3, [r7, #20]
  return(result);
 80096f4:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096f6:	623b      	str	r3, [r7, #32]
 80096f8:	2301      	movs	r3, #1
 80096fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	f383 8810 	msr	PRIMASK, r3
}
 8009702:	46c0      	nop			@ (mov r8, r8)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2140      	movs	r1, #64	@ 0x40
 8009710:	430a      	orrs	r2, r1
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	f383 8810 	msr	PRIMASK, r3
}
 800971e:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8009720:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8009722:	e029      	b.n	8009778 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	2280      	movs	r2, #128	@ 0x80
 800972c:	4013      	ands	r3, r2
 800972e:	d018      	beq.n	8009762 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009734:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	001a      	movs	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	05d2      	lsls	r2, r2, #23
 8009742:	0dd2      	lsrs	r2, r2, #23
 8009744:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800974a:	1c9a      	adds	r2, r3, #2
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2256      	movs	r2, #86	@ 0x56
 8009754:	5a9b      	ldrh	r3, [r3, r2]
 8009756:	b29b      	uxth	r3, r3
 8009758:	3b01      	subs	r3, #1
 800975a:	b299      	uxth	r1, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2256      	movs	r2, #86	@ 0x56
 8009760:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009762:	212e      	movs	r1, #46	@ 0x2e
 8009764:	187b      	adds	r3, r7, r1
 8009766:	881a      	ldrh	r2, [r3, #0]
 8009768:	187b      	adds	r3, r7, r1
 800976a:	3a01      	subs	r2, #1
 800976c:	801a      	strh	r2, [r3, #0]
 800976e:	232e      	movs	r3, #46	@ 0x2e
 8009770:	18fb      	adds	r3, r7, r3
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d19b      	bne.n	80096b0 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8009778:	46c0      	nop			@ (mov r8, r8)
 800977a:	46bd      	mov	sp, r7
 800977c:	b00c      	add	sp, #48	@ 0x30
 800977e:	bd80      	pop	{r7, pc}
 8009780:	ff7fffff 	.word	0xff7fffff

08009784 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800978c:	f3ef 8310 	mrs	r3, PRIMASK
 8009790:	60bb      	str	r3, [r7, #8]
  return(result);
 8009792:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	2301      	movs	r3, #1
 8009798:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f383 8810 	msr	PRIMASK, r3
}
 80097a0:	46c0      	nop			@ (mov r8, r8)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2140      	movs	r1, #64	@ 0x40
 80097ae:	438a      	bics	r2, r1
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f383 8810 	msr	PRIMASK, r3
}
 80097bc:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2288      	movs	r2, #136	@ 0x88
 80097c2:	2120      	movs	r1, #32
 80097c4:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	0018      	movs	r0, r3
 80097d0:	f7f9 fc4a 	bl	8003068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097d4:	46c0      	nop			@ (mov r8, r8)
 80097d6:	46bd      	mov	sp, r7
 80097d8:	b006      	add	sp, #24
 80097da:	bd80      	pop	{r7, pc}

080097dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b094      	sub	sp, #80	@ 0x50
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80097e4:	204e      	movs	r0, #78	@ 0x4e
 80097e6:	183b      	adds	r3, r7, r0
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	2160      	movs	r1, #96	@ 0x60
 80097ec:	5a52      	ldrh	r2, [r2, r1]
 80097ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	228c      	movs	r2, #140	@ 0x8c
 80097f4:	589b      	ldr	r3, [r3, r2]
 80097f6:	2b22      	cmp	r3, #34	@ 0x22
 80097f8:	d000      	beq.n	80097fc <UART_RxISR_8BIT+0x20>
 80097fa:	e0bf      	b.n	800997c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009802:	214c      	movs	r1, #76	@ 0x4c
 8009804:	187b      	adds	r3, r7, r1
 8009806:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009808:	187b      	adds	r3, r7, r1
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	b2da      	uxtb	r2, r3
 800980e:	183b      	adds	r3, r7, r0
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b2d9      	uxtb	r1, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009818:	400a      	ands	r2, r1
 800981a:	b2d2      	uxtb	r2, r2
 800981c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	225e      	movs	r2, #94	@ 0x5e
 800982c:	5a9b      	ldrh	r3, [r3, r2]
 800982e:	b29b      	uxth	r3, r3
 8009830:	3b01      	subs	r3, #1
 8009832:	b299      	uxth	r1, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	225e      	movs	r2, #94	@ 0x5e
 8009838:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	225e      	movs	r2, #94	@ 0x5e
 800983e:	5a9b      	ldrh	r3, [r3, r2]
 8009840:	b29b      	uxth	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d000      	beq.n	8009848 <UART_RxISR_8BIT+0x6c>
 8009846:	e0a1      	b.n	800998c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009848:	f3ef 8310 	mrs	r3, PRIMASK
 800984c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800984e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009850:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009852:	2301      	movs	r3, #1
 8009854:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009858:	f383 8810 	msr	PRIMASK, r3
}
 800985c:	46c0      	nop			@ (mov r8, r8)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	494a      	ldr	r1, [pc, #296]	@ (8009994 <UART_RxISR_8BIT+0x1b8>)
 800986a:	400a      	ands	r2, r1
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009874:	f383 8810 	msr	PRIMASK, r3
}
 8009878:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800987a:	f3ef 8310 	mrs	r3, PRIMASK
 800987e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009882:	647b      	str	r3, [r7, #68]	@ 0x44
 8009884:	2301      	movs	r3, #1
 8009886:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800988a:	f383 8810 	msr	PRIMASK, r3
}
 800988e:	46c0      	nop			@ (mov r8, r8)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689a      	ldr	r2, [r3, #8]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2101      	movs	r1, #1
 800989c:	438a      	bics	r2, r1
 800989e:	609a      	str	r2, [r3, #8]
 80098a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a6:	f383 8810 	msr	PRIMASK, r3
}
 80098aa:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	228c      	movs	r2, #140	@ 0x8c
 80098b0:	2120      	movs	r1, #32
 80098b2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a34      	ldr	r2, [pc, #208]	@ (8009998 <UART_RxISR_8BIT+0x1bc>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d01f      	beq.n	800990a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	2380      	movs	r3, #128	@ 0x80
 80098d2:	041b      	lsls	r3, r3, #16
 80098d4:	4013      	ands	r3, r2
 80098d6:	d018      	beq.n	800990a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098d8:	f3ef 8310 	mrs	r3, PRIMASK
 80098dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80098de:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80098e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80098e2:	2301      	movs	r3, #1
 80098e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	f383 8810 	msr	PRIMASK, r3
}
 80098ec:	46c0      	nop			@ (mov r8, r8)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4928      	ldr	r1, [pc, #160]	@ (800999c <UART_RxISR_8BIT+0x1c0>)
 80098fa:	400a      	ands	r2, r1
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009900:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	f383 8810 	msr	PRIMASK, r3
}
 8009908:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800990e:	2b01      	cmp	r3, #1
 8009910:	d12f      	bne.n	8009972 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009918:	f3ef 8310 	mrs	r3, PRIMASK
 800991c:	60fb      	str	r3, [r7, #12]
  return(result);
 800991e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009922:	2301      	movs	r3, #1
 8009924:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	f383 8810 	msr	PRIMASK, r3
}
 800992c:	46c0      	nop			@ (mov r8, r8)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2110      	movs	r1, #16
 800993a:	438a      	bics	r2, r1
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009940:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	f383 8810 	msr	PRIMASK, r3
}
 8009948:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	2210      	movs	r2, #16
 8009952:	4013      	ands	r3, r2
 8009954:	2b10      	cmp	r3, #16
 8009956:	d103      	bne.n	8009960 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2210      	movs	r2, #16
 800995e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	225c      	movs	r2, #92	@ 0x5c
 8009964:	5a9a      	ldrh	r2, [r3, r2]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	0011      	movs	r1, r2
 800996a:	0018      	movs	r0, r3
 800996c:	f7fe ff6e 	bl	800884c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009970:	e00c      	b.n	800998c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	0018      	movs	r0, r3
 8009976:	f7f9 fb99 	bl	80030ac <HAL_UART_RxCpltCallback>
}
 800997a:	e007      	b.n	800998c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	699a      	ldr	r2, [r3, #24]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2108      	movs	r1, #8
 8009988:	430a      	orrs	r2, r1
 800998a:	619a      	str	r2, [r3, #24]
}
 800998c:	46c0      	nop			@ (mov r8, r8)
 800998e:	46bd      	mov	sp, r7
 8009990:	b014      	add	sp, #80	@ 0x50
 8009992:	bd80      	pop	{r7, pc}
 8009994:	fffffedf 	.word	0xfffffedf
 8009998:	40008000 	.word	0x40008000
 800999c:	fbffffff 	.word	0xfbffffff

080099a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b094      	sub	sp, #80	@ 0x50
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80099a8:	204e      	movs	r0, #78	@ 0x4e
 80099aa:	183b      	adds	r3, r7, r0
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	2160      	movs	r1, #96	@ 0x60
 80099b0:	5a52      	ldrh	r2, [r2, r1]
 80099b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	228c      	movs	r2, #140	@ 0x8c
 80099b8:	589b      	ldr	r3, [r3, r2]
 80099ba:	2b22      	cmp	r3, #34	@ 0x22
 80099bc:	d000      	beq.n	80099c0 <UART_RxISR_16BIT+0x20>
 80099be:	e0bf      	b.n	8009b40 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099c6:	214c      	movs	r1, #76	@ 0x4c
 80099c8:	187b      	adds	r3, r7, r1
 80099ca:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099d0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80099d2:	187b      	adds	r3, r7, r1
 80099d4:	183a      	adds	r2, r7, r0
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	8812      	ldrh	r2, [r2, #0]
 80099da:	4013      	ands	r3, r2
 80099dc:	b29a      	uxth	r2, r3
 80099de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099e6:	1c9a      	adds	r2, r3, #2
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	225e      	movs	r2, #94	@ 0x5e
 80099f0:	5a9b      	ldrh	r3, [r3, r2]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	3b01      	subs	r3, #1
 80099f6:	b299      	uxth	r1, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	225e      	movs	r2, #94	@ 0x5e
 80099fc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	225e      	movs	r2, #94	@ 0x5e
 8009a02:	5a9b      	ldrh	r3, [r3, r2]
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d000      	beq.n	8009a0c <UART_RxISR_16BIT+0x6c>
 8009a0a:	e0a1      	b.n	8009b50 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a10:	623b      	str	r3, [r7, #32]
  return(result);
 8009a12:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a16:	2301      	movs	r3, #1
 8009a18:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1c:	f383 8810 	msr	PRIMASK, r3
}
 8009a20:	46c0      	nop			@ (mov r8, r8)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	494a      	ldr	r1, [pc, #296]	@ (8009b58 <UART_RxISR_16BIT+0x1b8>)
 8009a2e:	400a      	ands	r2, r1
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a38:	f383 8810 	msr	PRIMASK, r3
}
 8009a3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8009a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8009a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a46:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a48:	2301      	movs	r3, #1
 8009a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4e:	f383 8810 	msr	PRIMASK, r3
}
 8009a52:	46c0      	nop			@ (mov r8, r8)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689a      	ldr	r2, [r3, #8]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2101      	movs	r1, #1
 8009a60:	438a      	bics	r2, r1
 8009a62:	609a      	str	r2, [r3, #8]
 8009a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a66:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a6a:	f383 8810 	msr	PRIMASK, r3
}
 8009a6e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	228c      	movs	r2, #140	@ 0x8c
 8009a74:	2120      	movs	r1, #32
 8009a76:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a34      	ldr	r2, [pc, #208]	@ (8009b5c <UART_RxISR_16BIT+0x1bc>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d01f      	beq.n	8009ace <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	2380      	movs	r3, #128	@ 0x80
 8009a96:	041b      	lsls	r3, r3, #16
 8009a98:	4013      	ands	r3, r2
 8009a9a:	d018      	beq.n	8009ace <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8009aa0:	617b      	str	r3, [r7, #20]
  return(result);
 8009aa2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	f383 8810 	msr	PRIMASK, r3
}
 8009ab0:	46c0      	nop			@ (mov r8, r8)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4928      	ldr	r1, [pc, #160]	@ (8009b60 <UART_RxISR_16BIT+0x1c0>)
 8009abe:	400a      	ands	r2, r1
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	f383 8810 	msr	PRIMASK, r3
}
 8009acc:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d12f      	bne.n	8009b36 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009adc:	f3ef 8310 	mrs	r3, PRIMASK
 8009ae0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ae2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f383 8810 	msr	PRIMASK, r3
}
 8009af0:	46c0      	nop			@ (mov r8, r8)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2110      	movs	r1, #16
 8009afe:	438a      	bics	r2, r1
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f383 8810 	msr	PRIMASK, r3
}
 8009b0c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69db      	ldr	r3, [r3, #28]
 8009b14:	2210      	movs	r2, #16
 8009b16:	4013      	ands	r3, r2
 8009b18:	2b10      	cmp	r3, #16
 8009b1a:	d103      	bne.n	8009b24 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2210      	movs	r2, #16
 8009b22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	225c      	movs	r2, #92	@ 0x5c
 8009b28:	5a9a      	ldrh	r2, [r3, r2]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	0011      	movs	r1, r2
 8009b2e:	0018      	movs	r0, r3
 8009b30:	f7fe fe8c 	bl	800884c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b34:	e00c      	b.n	8009b50 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	0018      	movs	r0, r3
 8009b3a:	f7f9 fab7 	bl	80030ac <HAL_UART_RxCpltCallback>
}
 8009b3e:	e007      	b.n	8009b50 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	699a      	ldr	r2, [r3, #24]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2108      	movs	r1, #8
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	619a      	str	r2, [r3, #24]
}
 8009b50:	46c0      	nop			@ (mov r8, r8)
 8009b52:	46bd      	mov	sp, r7
 8009b54:	b014      	add	sp, #80	@ 0x50
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	fffffedf 	.word	0xfffffedf
 8009b5c:	40008000 	.word	0x40008000
 8009b60:	fbffffff 	.word	0xfbffffff

08009b64 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b0a0      	sub	sp, #128	@ 0x80
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009b6c:	237a      	movs	r3, #122	@ 0x7a
 8009b6e:	18fb      	adds	r3, r7, r3
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	2160      	movs	r1, #96	@ 0x60
 8009b74:	5a52      	ldrh	r2, [r2, r1]
 8009b76:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	69db      	ldr	r3, [r3, #28]
 8009b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	228c      	movs	r2, #140	@ 0x8c
 8009b94:	589b      	ldr	r3, [r3, r2]
 8009b96:	2b22      	cmp	r3, #34	@ 0x22
 8009b98:	d000      	beq.n	8009b9c <UART_RxISR_8BIT_FIFOEN+0x38>
 8009b9a:	e16a      	b.n	8009e72 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b9c:	236e      	movs	r3, #110	@ 0x6e
 8009b9e:	18fb      	adds	r3, r7, r3
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	2168      	movs	r1, #104	@ 0x68
 8009ba4:	5a52      	ldrh	r2, [r2, r1]
 8009ba6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ba8:	e111      	b.n	8009dce <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bb0:	216c      	movs	r1, #108	@ 0x6c
 8009bb2:	187b      	adds	r3, r7, r1
 8009bb4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009bb6:	187b      	adds	r3, r7, r1
 8009bb8:	881b      	ldrh	r3, [r3, #0]
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	237a      	movs	r3, #122	@ 0x7a
 8009bbe:	18fb      	adds	r3, r7, r3
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	b2d9      	uxtb	r1, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bc8:	400a      	ands	r2, r1
 8009bca:	b2d2      	uxtb	r2, r2
 8009bcc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bd2:	1c5a      	adds	r2, r3, #1
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	225e      	movs	r2, #94	@ 0x5e
 8009bdc:	5a9b      	ldrh	r3, [r3, r2]
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	3b01      	subs	r3, #1
 8009be2:	b299      	uxth	r1, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	225e      	movs	r2, #94	@ 0x5e
 8009be8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009bf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bf4:	2207      	movs	r2, #7
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	d049      	beq.n	8009c8e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	4013      	ands	r3, r2
 8009c00:	d010      	beq.n	8009c24 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8009c02:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009c04:	2380      	movs	r3, #128	@ 0x80
 8009c06:	005b      	lsls	r3, r3, #1
 8009c08:	4013      	ands	r3, r2
 8009c0a:	d00b      	beq.n	8009c24 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2201      	movs	r2, #1
 8009c12:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2290      	movs	r2, #144	@ 0x90
 8009c18:	589b      	ldr	r3, [r3, r2]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	431a      	orrs	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2190      	movs	r1, #144	@ 0x90
 8009c22:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c26:	2202      	movs	r2, #2
 8009c28:	4013      	ands	r3, r2
 8009c2a:	d00f      	beq.n	8009c4c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8009c2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c2e:	2201      	movs	r2, #1
 8009c30:	4013      	ands	r3, r2
 8009c32:	d00b      	beq.n	8009c4c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2202      	movs	r2, #2
 8009c3a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2290      	movs	r2, #144	@ 0x90
 8009c40:	589b      	ldr	r3, [r3, r2]
 8009c42:	2204      	movs	r2, #4
 8009c44:	431a      	orrs	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2190      	movs	r1, #144	@ 0x90
 8009c4a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c4e:	2204      	movs	r2, #4
 8009c50:	4013      	ands	r3, r2
 8009c52:	d00f      	beq.n	8009c74 <UART_RxISR_8BIT_FIFOEN+0x110>
 8009c54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c56:	2201      	movs	r2, #1
 8009c58:	4013      	ands	r3, r2
 8009c5a:	d00b      	beq.n	8009c74 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2204      	movs	r2, #4
 8009c62:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2290      	movs	r2, #144	@ 0x90
 8009c68:	589b      	ldr	r3, [r3, r2]
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	431a      	orrs	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2190      	movs	r1, #144	@ 0x90
 8009c72:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2290      	movs	r2, #144	@ 0x90
 8009c78:	589b      	ldr	r3, [r3, r2]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	0018      	movs	r0, r3
 8009c82:	f7fe fddb 	bl	800883c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2290      	movs	r2, #144	@ 0x90
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	225e      	movs	r2, #94	@ 0x5e
 8009c92:	5a9b      	ldrh	r3, [r3, r2]
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d000      	beq.n	8009c9c <UART_RxISR_8BIT_FIFOEN+0x138>
 8009c9a:	e098      	b.n	8009dce <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8009ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cac:	f383 8810 	msr	PRIMASK, r3
}
 8009cb0:	46c0      	nop			@ (mov r8, r8)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4973      	ldr	r1, [pc, #460]	@ (8009e8c <UART_RxISR_8BIT_FIFOEN+0x328>)
 8009cbe:	400a      	ands	r2, r1
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cc4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cc8:	f383 8810 	msr	PRIMASK, r3
}
 8009ccc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cce:	f3ef 8310 	mrs	r3, PRIMASK
 8009cd2:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8009cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cd8:	2301      	movs	r3, #1
 8009cda:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cde:	f383 8810 	msr	PRIMASK, r3
}
 8009ce2:	46c0      	nop			@ (mov r8, r8)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4968      	ldr	r1, [pc, #416]	@ (8009e90 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8009cf0:	400a      	ands	r2, r1
 8009cf2:	609a      	str	r2, [r3, #8]
 8009cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cfa:	f383 8810 	msr	PRIMASK, r3
}
 8009cfe:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	228c      	movs	r2, #140	@ 0x8c
 8009d04:	2120      	movs	r1, #32
 8009d06:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a5e      	ldr	r2, [pc, #376]	@ (8009e94 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d01f      	beq.n	8009d5e <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	2380      	movs	r3, #128	@ 0x80
 8009d26:	041b      	lsls	r3, r3, #16
 8009d28:	4013      	ands	r3, r2
 8009d2a:	d018      	beq.n	8009d5e <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8009d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d34:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d36:	2301      	movs	r3, #1
 8009d38:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3c:	f383 8810 	msr	PRIMASK, r3
}
 8009d40:	46c0      	nop			@ (mov r8, r8)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4952      	ldr	r1, [pc, #328]	@ (8009e98 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8009d4e:	400a      	ands	r2, r1
 8009d50:	601a      	str	r2, [r3, #0]
 8009d52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d54:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d58:	f383 8810 	msr	PRIMASK, r3
}
 8009d5c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d12f      	bne.n	8009dc6 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8009d70:	623b      	str	r3, [r7, #32]
  return(result);
 8009d72:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d76:	2301      	movs	r3, #1
 8009d78:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7c:	f383 8810 	msr	PRIMASK, r3
}
 8009d80:	46c0      	nop			@ (mov r8, r8)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2110      	movs	r1, #16
 8009d8e:	438a      	bics	r2, r1
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d98:	f383 8810 	msr	PRIMASK, r3
}
 8009d9c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	2210      	movs	r2, #16
 8009da6:	4013      	ands	r3, r2
 8009da8:	2b10      	cmp	r3, #16
 8009daa:	d103      	bne.n	8009db4 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2210      	movs	r2, #16
 8009db2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	225c      	movs	r2, #92	@ 0x5c
 8009db8:	5a9a      	ldrh	r2, [r3, r2]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	0011      	movs	r1, r2
 8009dbe:	0018      	movs	r0, r3
 8009dc0:	f7fe fd44 	bl	800884c <HAL_UARTEx_RxEventCallback>
 8009dc4:	e003      	b.n	8009dce <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	0018      	movs	r0, r3
 8009dca:	f7f9 f96f 	bl	80030ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dce:	236e      	movs	r3, #110	@ 0x6e
 8009dd0:	18fb      	adds	r3, r7, r3
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d004      	beq.n	8009de2 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8009dd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009dda:	2220      	movs	r2, #32
 8009ddc:	4013      	ands	r3, r2
 8009dde:	d000      	beq.n	8009de2 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8009de0:	e6e3      	b.n	8009baa <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009de2:	205a      	movs	r0, #90	@ 0x5a
 8009de4:	183b      	adds	r3, r7, r0
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	215e      	movs	r1, #94	@ 0x5e
 8009dea:	5a52      	ldrh	r2, [r2, r1]
 8009dec:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009dee:	0001      	movs	r1, r0
 8009df0:	187b      	adds	r3, r7, r1
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d044      	beq.n	8009e82 <UART_RxISR_8BIT_FIFOEN+0x31e>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2268      	movs	r2, #104	@ 0x68
 8009dfc:	5a9b      	ldrh	r3, [r3, r2]
 8009dfe:	187a      	adds	r2, r7, r1
 8009e00:	8812      	ldrh	r2, [r2, #0]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d23d      	bcs.n	8009e82 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e06:	f3ef 8310 	mrs	r3, PRIMASK
 8009e0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e0c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e10:	2301      	movs	r3, #1
 8009e12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f383 8810 	msr	PRIMASK, r3
}
 8009e1a:	46c0      	nop			@ (mov r8, r8)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	689a      	ldr	r2, [r3, #8]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	491d      	ldr	r1, [pc, #116]	@ (8009e9c <UART_RxISR_8BIT_FIFOEN+0x338>)
 8009e28:	400a      	ands	r2, r1
 8009e2a:	609a      	str	r2, [r3, #8]
 8009e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	f383 8810 	msr	PRIMASK, r3
}
 8009e36:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a19      	ldr	r2, [pc, #100]	@ (8009ea0 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8009e3c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e42:	617b      	str	r3, [r7, #20]
  return(result);
 8009e44:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e46:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e48:	2301      	movs	r3, #1
 8009e4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	f383 8810 	msr	PRIMASK, r3
}
 8009e52:	46c0      	nop			@ (mov r8, r8)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2120      	movs	r1, #32
 8009e60:	430a      	orrs	r2, r1
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	f383 8810 	msr	PRIMASK, r3
}
 8009e6e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e70:	e007      	b.n	8009e82 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	699a      	ldr	r2, [r3, #24]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2108      	movs	r1, #8
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	619a      	str	r2, [r3, #24]
}
 8009e82:	46c0      	nop			@ (mov r8, r8)
 8009e84:	46bd      	mov	sp, r7
 8009e86:	b020      	add	sp, #128	@ 0x80
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	46c0      	nop			@ (mov r8, r8)
 8009e8c:	fffffeff 	.word	0xfffffeff
 8009e90:	effffffe 	.word	0xeffffffe
 8009e94:	40008000 	.word	0x40008000
 8009e98:	fbffffff 	.word	0xfbffffff
 8009e9c:	efffffff 	.word	0xefffffff
 8009ea0:	080097dd 	.word	0x080097dd

08009ea4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b0a2      	sub	sp, #136	@ 0x88
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009eac:	2382      	movs	r3, #130	@ 0x82
 8009eae:	18fb      	adds	r3, r7, r3
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	2160      	movs	r1, #96	@ 0x60
 8009eb4:	5a52      	ldrh	r2, [r2, r1]
 8009eb6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	69db      	ldr	r3, [r3, #28]
 8009ebe:	2284      	movs	r2, #132	@ 0x84
 8009ec0:	18ba      	adds	r2, r7, r2
 8009ec2:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	228c      	movs	r2, #140	@ 0x8c
 8009ed8:	589b      	ldr	r3, [r3, r2]
 8009eda:	2b22      	cmp	r3, #34	@ 0x22
 8009edc:	d000      	beq.n	8009ee0 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8009ede:	e174      	b.n	800a1ca <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ee0:	2376      	movs	r3, #118	@ 0x76
 8009ee2:	18fb      	adds	r3, r7, r3
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	2168      	movs	r1, #104	@ 0x68
 8009ee8:	5a52      	ldrh	r2, [r2, r1]
 8009eea:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009eec:	e119      	b.n	800a122 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ef4:	2174      	movs	r1, #116	@ 0x74
 8009ef6:	187b      	adds	r3, r7, r1
 8009ef8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009efe:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8009f00:	187b      	adds	r3, r7, r1
 8009f02:	2282      	movs	r2, #130	@ 0x82
 8009f04:	18ba      	adds	r2, r7, r2
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	8812      	ldrh	r2, [r2, #0]
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f16:	1c9a      	adds	r2, r3, #2
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	225e      	movs	r2, #94	@ 0x5e
 8009f20:	5a9b      	ldrh	r3, [r3, r2]
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	3b01      	subs	r3, #1
 8009f26:	b299      	uxth	r1, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	225e      	movs	r2, #94	@ 0x5e
 8009f2c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	69db      	ldr	r3, [r3, #28]
 8009f34:	2184      	movs	r1, #132	@ 0x84
 8009f36:	187a      	adds	r2, r7, r1
 8009f38:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f3a:	187b      	adds	r3, r7, r1
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2207      	movs	r2, #7
 8009f40:	4013      	ands	r3, r2
 8009f42:	d04e      	beq.n	8009fe2 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f44:	187b      	adds	r3, r7, r1
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	d010      	beq.n	8009f70 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8009f4e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009f50:	2380      	movs	r3, #128	@ 0x80
 8009f52:	005b      	lsls	r3, r3, #1
 8009f54:	4013      	ands	r3, r2
 8009f56:	d00b      	beq.n	8009f70 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2290      	movs	r2, #144	@ 0x90
 8009f64:	589b      	ldr	r3, [r3, r2]
 8009f66:	2201      	movs	r2, #1
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2190      	movs	r1, #144	@ 0x90
 8009f6e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f70:	2384      	movs	r3, #132	@ 0x84
 8009f72:	18fb      	adds	r3, r7, r3
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2202      	movs	r2, #2
 8009f78:	4013      	ands	r3, r2
 8009f7a:	d00f      	beq.n	8009f9c <UART_RxISR_16BIT_FIFOEN+0xf8>
 8009f7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f7e:	2201      	movs	r2, #1
 8009f80:	4013      	ands	r3, r2
 8009f82:	d00b      	beq.n	8009f9c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2202      	movs	r2, #2
 8009f8a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2290      	movs	r2, #144	@ 0x90
 8009f90:	589b      	ldr	r3, [r3, r2]
 8009f92:	2204      	movs	r2, #4
 8009f94:	431a      	orrs	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2190      	movs	r1, #144	@ 0x90
 8009f9a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f9c:	2384      	movs	r3, #132	@ 0x84
 8009f9e:	18fb      	adds	r3, r7, r3
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2204      	movs	r2, #4
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	d00f      	beq.n	8009fc8 <UART_RxISR_16BIT_FIFOEN+0x124>
 8009fa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009faa:	2201      	movs	r2, #1
 8009fac:	4013      	ands	r3, r2
 8009fae:	d00b      	beq.n	8009fc8 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2204      	movs	r2, #4
 8009fb6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2290      	movs	r2, #144	@ 0x90
 8009fbc:	589b      	ldr	r3, [r3, r2]
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	431a      	orrs	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2190      	movs	r1, #144	@ 0x90
 8009fc6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2290      	movs	r2, #144	@ 0x90
 8009fcc:	589b      	ldr	r3, [r3, r2]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d007      	beq.n	8009fe2 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	0018      	movs	r0, r3
 8009fd6:	f7fe fc31 	bl	800883c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2290      	movs	r2, #144	@ 0x90
 8009fde:	2100      	movs	r1, #0
 8009fe0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	225e      	movs	r2, #94	@ 0x5e
 8009fe6:	5a9b      	ldrh	r3, [r3, r2]
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d000      	beq.n	8009ff0 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8009fee:	e098      	b.n	800a122 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8009ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ff8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a000:	f383 8810 	msr	PRIMASK, r3
}
 800a004:	46c0      	nop			@ (mov r8, r8)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4974      	ldr	r1, [pc, #464]	@ (800a1e4 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800a012:	400a      	ands	r2, r1
 800a014:	601a      	str	r2, [r3, #0]
 800a016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a018:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a01a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a01c:	f383 8810 	msr	PRIMASK, r3
}
 800a020:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a022:	f3ef 8310 	mrs	r3, PRIMASK
 800a026:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800a028:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a02a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a02c:	2301      	movs	r3, #1
 800a02e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a032:	f383 8810 	msr	PRIMASK, r3
}
 800a036:	46c0      	nop			@ (mov r8, r8)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4969      	ldr	r1, [pc, #420]	@ (800a1e8 <UART_RxISR_16BIT_FIFOEN+0x344>)
 800a044:	400a      	ands	r2, r1
 800a046:	609a      	str	r2, [r3, #8]
 800a048:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a04a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a04c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a04e:	f383 8810 	msr	PRIMASK, r3
}
 800a052:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	228c      	movs	r2, #140	@ 0x8c
 800a058:	2120      	movs	r1, #32
 800a05a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a5f      	ldr	r2, [pc, #380]	@ (800a1ec <UART_RxISR_16BIT_FIFOEN+0x348>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d01f      	beq.n	800a0b2 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	2380      	movs	r3, #128	@ 0x80
 800a07a:	041b      	lsls	r3, r3, #16
 800a07c:	4013      	ands	r3, r2
 800a07e:	d018      	beq.n	800a0b2 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a080:	f3ef 8310 	mrs	r3, PRIMASK
 800a084:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a088:	667b      	str	r3, [r7, #100]	@ 0x64
 800a08a:	2301      	movs	r3, #1
 800a08c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a090:	f383 8810 	msr	PRIMASK, r3
}
 800a094:	46c0      	nop			@ (mov r8, r8)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4953      	ldr	r1, [pc, #332]	@ (800a1f0 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800a0a2:	400a      	ands	r2, r1
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ac:	f383 8810 	msr	PRIMASK, r3
}
 800a0b0:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d12f      	bne.n	800a11a <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a0c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d0:	f383 8810 	msr	PRIMASK, r3
}
 800a0d4:	46c0      	nop			@ (mov r8, r8)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2110      	movs	r1, #16
 800a0e2:	438a      	bics	r2, r1
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ec:	f383 8810 	msr	PRIMASK, r3
}
 800a0f0:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	2210      	movs	r2, #16
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	2b10      	cmp	r3, #16
 800a0fe:	d103      	bne.n	800a108 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2210      	movs	r2, #16
 800a106:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	225c      	movs	r2, #92	@ 0x5c
 800a10c:	5a9a      	ldrh	r2, [r3, r2]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	0011      	movs	r1, r2
 800a112:	0018      	movs	r0, r3
 800a114:	f7fe fb9a 	bl	800884c <HAL_UARTEx_RxEventCallback>
 800a118:	e003      	b.n	800a122 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	0018      	movs	r0, r3
 800a11e:	f7f8 ffc5 	bl	80030ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a122:	2376      	movs	r3, #118	@ 0x76
 800a124:	18fb      	adds	r3, r7, r3
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d006      	beq.n	800a13a <UART_RxISR_16BIT_FIFOEN+0x296>
 800a12c:	2384      	movs	r3, #132	@ 0x84
 800a12e:	18fb      	adds	r3, r7, r3
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2220      	movs	r2, #32
 800a134:	4013      	ands	r3, r2
 800a136:	d000      	beq.n	800a13a <UART_RxISR_16BIT_FIFOEN+0x296>
 800a138:	e6d9      	b.n	8009eee <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a13a:	205e      	movs	r0, #94	@ 0x5e
 800a13c:	183b      	adds	r3, r7, r0
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	215e      	movs	r1, #94	@ 0x5e
 800a142:	5a52      	ldrh	r2, [r2, r1]
 800a144:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a146:	0001      	movs	r1, r0
 800a148:	187b      	adds	r3, r7, r1
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d044      	beq.n	800a1da <UART_RxISR_16BIT_FIFOEN+0x336>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2268      	movs	r2, #104	@ 0x68
 800a154:	5a9b      	ldrh	r3, [r3, r2]
 800a156:	187a      	adds	r2, r7, r1
 800a158:	8812      	ldrh	r2, [r2, #0]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d23d      	bcs.n	800a1da <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a15e:	f3ef 8310 	mrs	r3, PRIMASK
 800a162:	60fb      	str	r3, [r7, #12]
  return(result);
 800a164:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a166:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a168:	2301      	movs	r3, #1
 800a16a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f383 8810 	msr	PRIMASK, r3
}
 800a172:	46c0      	nop			@ (mov r8, r8)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	689a      	ldr	r2, [r3, #8]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	491d      	ldr	r1, [pc, #116]	@ (800a1f4 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800a180:	400a      	ands	r2, r1
 800a182:	609a      	str	r2, [r3, #8]
 800a184:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a186:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	f383 8810 	msr	PRIMASK, r3
}
 800a18e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a19      	ldr	r2, [pc, #100]	@ (800a1f8 <UART_RxISR_16BIT_FIFOEN+0x354>)
 800a194:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a196:	f3ef 8310 	mrs	r3, PRIMASK
 800a19a:	61bb      	str	r3, [r7, #24]
  return(result);
 800a19c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a19e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	f383 8810 	msr	PRIMASK, r3
}
 800a1aa:	46c0      	nop			@ (mov r8, r8)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2120      	movs	r1, #32
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	f383 8810 	msr	PRIMASK, r3
}
 800a1c6:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1c8:	e007      	b.n	800a1da <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	699a      	ldr	r2, [r3, #24]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2108      	movs	r1, #8
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	619a      	str	r2, [r3, #24]
}
 800a1da:	46c0      	nop			@ (mov r8, r8)
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	b022      	add	sp, #136	@ 0x88
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	46c0      	nop			@ (mov r8, r8)
 800a1e4:	fffffeff 	.word	0xfffffeff
 800a1e8:	effffffe 	.word	0xeffffffe
 800a1ec:	40008000 	.word	0x40008000
 800a1f0:	fbffffff 	.word	0xfbffffff
 800a1f4:	efffffff 	.word	0xefffffff
 800a1f8:	080099a1 	.word	0x080099a1

0800a1fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a204:	46c0      	nop			@ (mov r8, r8)
 800a206:	46bd      	mov	sp, r7
 800a208:	b002      	add	sp, #8
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a214:	46c0      	nop			@ (mov r8, r8)
 800a216:	46bd      	mov	sp, r7
 800a218:	b002      	add	sp, #8
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a224:	46c0      	nop			@ (mov r8, r8)
 800a226:	46bd      	mov	sp, r7
 800a228:	b002      	add	sp, #8
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2284      	movs	r2, #132	@ 0x84
 800a238:	5c9b      	ldrb	r3, [r3, r2]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d101      	bne.n	800a242 <HAL_UARTEx_DisableFifoMode+0x16>
 800a23e:	2302      	movs	r3, #2
 800a240:	e027      	b.n	800a292 <HAL_UARTEx_DisableFifoMode+0x66>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2284      	movs	r2, #132	@ 0x84
 800a246:	2101      	movs	r1, #1
 800a248:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2288      	movs	r2, #136	@ 0x88
 800a24e:	2124      	movs	r1, #36	@ 0x24
 800a250:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2101      	movs	r1, #1
 800a266:	438a      	bics	r2, r1
 800a268:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	4a0b      	ldr	r2, [pc, #44]	@ (800a29c <HAL_UARTEx_DisableFifoMode+0x70>)
 800a26e:	4013      	ands	r3, r2
 800a270:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2288      	movs	r2, #136	@ 0x88
 800a284:	2120      	movs	r1, #32
 800a286:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2284      	movs	r2, #132	@ 0x84
 800a28c:	2100      	movs	r1, #0
 800a28e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	0018      	movs	r0, r3
 800a294:	46bd      	mov	sp, r7
 800a296:	b004      	add	sp, #16
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	46c0      	nop			@ (mov r8, r8)
 800a29c:	dfffffff 	.word	0xdfffffff

0800a2a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2284      	movs	r2, #132	@ 0x84
 800a2ae:	5c9b      	ldrb	r3, [r3, r2]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d101      	bne.n	800a2b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	e02e      	b.n	800a316 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2284      	movs	r2, #132	@ 0x84
 800a2bc:	2101      	movs	r1, #1
 800a2be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2288      	movs	r2, #136	@ 0x88
 800a2c4:	2124      	movs	r1, #36	@ 0x24
 800a2c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2101      	movs	r1, #1
 800a2dc:	438a      	bics	r2, r1
 800a2de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	08d9      	lsrs	r1, r3, #3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	430a      	orrs	r2, r1
 800a2f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	f000 f854 	bl	800a3a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2288      	movs	r2, #136	@ 0x88
 800a308:	2120      	movs	r1, #32
 800a30a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2284      	movs	r2, #132	@ 0x84
 800a310:	2100      	movs	r1, #0
 800a312:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	0018      	movs	r0, r3
 800a318:	46bd      	mov	sp, r7
 800a31a:	b004      	add	sp, #16
 800a31c:	bd80      	pop	{r7, pc}
	...

0800a320 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2284      	movs	r2, #132	@ 0x84
 800a32e:	5c9b      	ldrb	r3, [r3, r2]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d101      	bne.n	800a338 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a334:	2302      	movs	r3, #2
 800a336:	e02f      	b.n	800a398 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2284      	movs	r2, #132	@ 0x84
 800a33c:	2101      	movs	r1, #1
 800a33e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2288      	movs	r2, #136	@ 0x88
 800a344:	2124      	movs	r1, #36	@ 0x24
 800a346:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2101      	movs	r1, #1
 800a35c:	438a      	bics	r2, r1
 800a35e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	4a0e      	ldr	r2, [pc, #56]	@ (800a3a0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a368:	4013      	ands	r3, r2
 800a36a:	0019      	movs	r1, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	0018      	movs	r0, r3
 800a37a:	f000 f813 	bl	800a3a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2288      	movs	r2, #136	@ 0x88
 800a38a:	2120      	movs	r1, #32
 800a38c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2284      	movs	r2, #132	@ 0x84
 800a392:	2100      	movs	r1, #0
 800a394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	0018      	movs	r0, r3
 800a39a:	46bd      	mov	sp, r7
 800a39c:	b004      	add	sp, #16
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	f1ffffff 	.word	0xf1ffffff

0800a3a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d108      	bne.n	800a3c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	226a      	movs	r2, #106	@ 0x6a
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2268      	movs	r2, #104	@ 0x68
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a3c4:	e043      	b.n	800a44e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a3c6:	260f      	movs	r6, #15
 800a3c8:	19bb      	adds	r3, r7, r6
 800a3ca:	2208      	movs	r2, #8
 800a3cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3ce:	200e      	movs	r0, #14
 800a3d0:	183b      	adds	r3, r7, r0
 800a3d2:	2208      	movs	r2, #8
 800a3d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	0e5b      	lsrs	r3, r3, #25
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	240d      	movs	r4, #13
 800a3e2:	193b      	adds	r3, r7, r4
 800a3e4:	2107      	movs	r1, #7
 800a3e6:	400a      	ands	r2, r1
 800a3e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	0f5b      	lsrs	r3, r3, #29
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	250c      	movs	r5, #12
 800a3f6:	197b      	adds	r3, r7, r5
 800a3f8:	2107      	movs	r1, #7
 800a3fa:	400a      	ands	r2, r1
 800a3fc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3fe:	183b      	adds	r3, r7, r0
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	197a      	adds	r2, r7, r5
 800a404:	7812      	ldrb	r2, [r2, #0]
 800a406:	4914      	ldr	r1, [pc, #80]	@ (800a458 <UARTEx_SetNbDataToProcess+0xb4>)
 800a408:	5c8a      	ldrb	r2, [r1, r2]
 800a40a:	435a      	muls	r2, r3
 800a40c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a40e:	197b      	adds	r3, r7, r5
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	4a12      	ldr	r2, [pc, #72]	@ (800a45c <UARTEx_SetNbDataToProcess+0xb8>)
 800a414:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a416:	0019      	movs	r1, r3
 800a418:	f7f5 ff1a 	bl	8000250 <__divsi3>
 800a41c:	0003      	movs	r3, r0
 800a41e:	b299      	uxth	r1, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	226a      	movs	r2, #106	@ 0x6a
 800a424:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a426:	19bb      	adds	r3, r7, r6
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	193a      	adds	r2, r7, r4
 800a42c:	7812      	ldrb	r2, [r2, #0]
 800a42e:	490a      	ldr	r1, [pc, #40]	@ (800a458 <UARTEx_SetNbDataToProcess+0xb4>)
 800a430:	5c8a      	ldrb	r2, [r1, r2]
 800a432:	435a      	muls	r2, r3
 800a434:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a436:	193b      	adds	r3, r7, r4
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	4a08      	ldr	r2, [pc, #32]	@ (800a45c <UARTEx_SetNbDataToProcess+0xb8>)
 800a43c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a43e:	0019      	movs	r1, r3
 800a440:	f7f5 ff06 	bl	8000250 <__divsi3>
 800a444:	0003      	movs	r3, r0
 800a446:	b299      	uxth	r1, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2268      	movs	r2, #104	@ 0x68
 800a44c:	5299      	strh	r1, [r3, r2]
}
 800a44e:	46c0      	nop			@ (mov r8, r8)
 800a450:	46bd      	mov	sp, r7
 800a452:	b005      	add	sp, #20
 800a454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a456:	46c0      	nop			@ (mov r8, r8)
 800a458:	0800d900 	.word	0x0800d900
 800a45c:	0800d908 	.word	0x0800d908

0800a460 <log>:
 800a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a462:	0004      	movs	r4, r0
 800a464:	000d      	movs	r5, r1
 800a466:	f000 f837 	bl	800a4d8 <__ieee754_log>
 800a46a:	0022      	movs	r2, r4
 800a46c:	0006      	movs	r6, r0
 800a46e:	000f      	movs	r7, r1
 800a470:	002b      	movs	r3, r5
 800a472:	0020      	movs	r0, r4
 800a474:	0029      	movs	r1, r5
 800a476:	f7f8 fc51 	bl	8002d1c <__aeabi_dcmpun>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d115      	bne.n	800a4aa <log+0x4a>
 800a47e:	2200      	movs	r2, #0
 800a480:	2300      	movs	r3, #0
 800a482:	0020      	movs	r0, r4
 800a484:	0029      	movs	r1, r5
 800a486:	f7f5 fff9 	bl	800047c <__aeabi_dcmpgt>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d10d      	bne.n	800a4aa <log+0x4a>
 800a48e:	2200      	movs	r2, #0
 800a490:	2300      	movs	r3, #0
 800a492:	0020      	movs	r0, r4
 800a494:	0029      	movs	r1, r5
 800a496:	f7f5 ffd7 	bl	8000448 <__aeabi_dcmpeq>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d008      	beq.n	800a4b0 <log+0x50>
 800a49e:	f001 f8bb 	bl	800b618 <__errno>
 800a4a2:	2322      	movs	r3, #34	@ 0x22
 800a4a4:	2600      	movs	r6, #0
 800a4a6:	4f07      	ldr	r7, [pc, #28]	@ (800a4c4 <log+0x64>)
 800a4a8:	6003      	str	r3, [r0, #0]
 800a4aa:	0030      	movs	r0, r6
 800a4ac:	0039      	movs	r1, r7
 800a4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b0:	f001 f8b2 	bl	800b618 <__errno>
 800a4b4:	2321      	movs	r3, #33	@ 0x21
 800a4b6:	6003      	str	r3, [r0, #0]
 800a4b8:	4803      	ldr	r0, [pc, #12]	@ (800a4c8 <log+0x68>)
 800a4ba:	f000 f807 	bl	800a4cc <nan>
 800a4be:	0006      	movs	r6, r0
 800a4c0:	000f      	movs	r7, r1
 800a4c2:	e7f2      	b.n	800a4aa <log+0x4a>
 800a4c4:	fff00000 	.word	0xfff00000
 800a4c8:	0800db7e 	.word	0x0800db7e

0800a4cc <nan>:
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	4901      	ldr	r1, [pc, #4]	@ (800a4d4 <nan+0x8>)
 800a4d0:	4770      	bx	lr
 800a4d2:	46c0      	nop			@ (mov r8, r8)
 800a4d4:	7ff80000 	.word	0x7ff80000

0800a4d8 <__ieee754_log>:
 800a4d8:	2380      	movs	r3, #128	@ 0x80
 800a4da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4dc:	035b      	lsls	r3, r3, #13
 800a4de:	000e      	movs	r6, r1
 800a4e0:	b08d      	sub	sp, #52	@ 0x34
 800a4e2:	4299      	cmp	r1, r3
 800a4e4:	da23      	bge.n	800a52e <__ieee754_log+0x56>
 800a4e6:	004b      	lsls	r3, r1, #1
 800a4e8:	085b      	lsrs	r3, r3, #1
 800a4ea:	4303      	orrs	r3, r0
 800a4ec:	d107      	bne.n	800a4fe <__ieee754_log+0x26>
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	49b4      	ldr	r1, [pc, #720]	@ (800a7c8 <__ieee754_log+0x2f0>)
 800a4f6:	f7f7 f969 	bl	80017cc <__aeabi_ddiv>
 800a4fa:	b00d      	add	sp, #52	@ 0x34
 800a4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4fe:	2900      	cmp	r1, #0
 800a500:	da06      	bge.n	800a510 <__ieee754_log+0x38>
 800a502:	0002      	movs	r2, r0
 800a504:	000b      	movs	r3, r1
 800a506:	f7f8 f86d 	bl	80025e4 <__aeabi_dsub>
 800a50a:	2200      	movs	r2, #0
 800a50c:	2300      	movs	r3, #0
 800a50e:	e7f2      	b.n	800a4f6 <__ieee754_log+0x1e>
 800a510:	4bae      	ldr	r3, [pc, #696]	@ (800a7cc <__ieee754_log+0x2f4>)
 800a512:	2200      	movs	r2, #0
 800a514:	f7f7 fd9e 	bl	8002054 <__aeabi_dmul>
 800a518:	2336      	movs	r3, #54	@ 0x36
 800a51a:	000e      	movs	r6, r1
 800a51c:	425b      	negs	r3, r3
 800a51e:	4aac      	ldr	r2, [pc, #688]	@ (800a7d0 <__ieee754_log+0x2f8>)
 800a520:	4296      	cmp	r6, r2
 800a522:	dd06      	ble.n	800a532 <__ieee754_log+0x5a>
 800a524:	0002      	movs	r2, r0
 800a526:	000b      	movs	r3, r1
 800a528:	f7f6 fdec 	bl	8001104 <__aeabi_dadd>
 800a52c:	e7e5      	b.n	800a4fa <__ieee754_log+0x22>
 800a52e:	2300      	movs	r3, #0
 800a530:	e7f5      	b.n	800a51e <__ieee754_log+0x46>
 800a532:	4ca8      	ldr	r4, [pc, #672]	@ (800a7d4 <__ieee754_log+0x2fc>)
 800a534:	1532      	asrs	r2, r6, #20
 800a536:	1912      	adds	r2, r2, r4
 800a538:	0336      	lsls	r6, r6, #12
 800a53a:	4ca7      	ldr	r4, [pc, #668]	@ (800a7d8 <__ieee754_log+0x300>)
 800a53c:	18d2      	adds	r2, r2, r3
 800a53e:	0b33      	lsrs	r3, r6, #12
 800a540:	9302      	str	r3, [sp, #8]
 800a542:	191b      	adds	r3, r3, r4
 800a544:	2480      	movs	r4, #128	@ 0x80
 800a546:	0364      	lsls	r4, r4, #13
 800a548:	4023      	ands	r3, r4
 800a54a:	4ca4      	ldr	r4, [pc, #656]	@ (800a7dc <__ieee754_log+0x304>)
 800a54c:	9d02      	ldr	r5, [sp, #8]
 800a54e:	405c      	eors	r4, r3
 800a550:	151b      	asrs	r3, r3, #20
 800a552:	189b      	adds	r3, r3, r2
 800a554:	4325      	orrs	r5, r4
 800a556:	2200      	movs	r2, #0
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	0029      	movs	r1, r5
 800a55c:	4b9f      	ldr	r3, [pc, #636]	@ (800a7dc <__ieee754_log+0x304>)
 800a55e:	f7f8 f841 	bl	80025e4 <__aeabi_dsub>
 800a562:	9b02      	ldr	r3, [sp, #8]
 800a564:	0006      	movs	r6, r0
 800a566:	3302      	adds	r3, #2
 800a568:	031b      	lsls	r3, r3, #12
 800a56a:	000f      	movs	r7, r1
 800a56c:	2200      	movs	r2, #0
 800a56e:	0b1b      	lsrs	r3, r3, #12
 800a570:	2b02      	cmp	r3, #2
 800a572:	dc64      	bgt.n	800a63e <__ieee754_log+0x166>
 800a574:	2300      	movs	r3, #0
 800a576:	f7f5 ff67 	bl	8000448 <__aeabi_dcmpeq>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d019      	beq.n	800a5b2 <__ieee754_log+0xda>
 800a57e:	9b00      	ldr	r3, [sp, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d100      	bne.n	800a586 <__ieee754_log+0xae>
 800a584:	e11c      	b.n	800a7c0 <__ieee754_log+0x2e8>
 800a586:	0018      	movs	r0, r3
 800a588:	f7f8 fc26 	bl	8002dd8 <__aeabi_i2d>
 800a58c:	4a94      	ldr	r2, [pc, #592]	@ (800a7e0 <__ieee754_log+0x308>)
 800a58e:	4b95      	ldr	r3, [pc, #596]	@ (800a7e4 <__ieee754_log+0x30c>)
 800a590:	0004      	movs	r4, r0
 800a592:	000d      	movs	r5, r1
 800a594:	f7f7 fd5e 	bl	8002054 <__aeabi_dmul>
 800a598:	4a93      	ldr	r2, [pc, #588]	@ (800a7e8 <__ieee754_log+0x310>)
 800a59a:	0006      	movs	r6, r0
 800a59c:	000f      	movs	r7, r1
 800a59e:	4b93      	ldr	r3, [pc, #588]	@ (800a7ec <__ieee754_log+0x314>)
 800a5a0:	0020      	movs	r0, r4
 800a5a2:	0029      	movs	r1, r5
 800a5a4:	f7f7 fd56 	bl	8002054 <__aeabi_dmul>
 800a5a8:	0002      	movs	r2, r0
 800a5aa:	000b      	movs	r3, r1
 800a5ac:	0030      	movs	r0, r6
 800a5ae:	0039      	movs	r1, r7
 800a5b0:	e7ba      	b.n	800a528 <__ieee754_log+0x50>
 800a5b2:	4a8f      	ldr	r2, [pc, #572]	@ (800a7f0 <__ieee754_log+0x318>)
 800a5b4:	4b8f      	ldr	r3, [pc, #572]	@ (800a7f4 <__ieee754_log+0x31c>)
 800a5b6:	0030      	movs	r0, r6
 800a5b8:	0039      	movs	r1, r7
 800a5ba:	f7f7 fd4b 	bl	8002054 <__aeabi_dmul>
 800a5be:	0002      	movs	r2, r0
 800a5c0:	000b      	movs	r3, r1
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	498c      	ldr	r1, [pc, #560]	@ (800a7f8 <__ieee754_log+0x320>)
 800a5c6:	f7f8 f80d 	bl	80025e4 <__aeabi_dsub>
 800a5ca:	0032      	movs	r2, r6
 800a5cc:	0004      	movs	r4, r0
 800a5ce:	000d      	movs	r5, r1
 800a5d0:	003b      	movs	r3, r7
 800a5d2:	0030      	movs	r0, r6
 800a5d4:	0039      	movs	r1, r7
 800a5d6:	f7f7 fd3d 	bl	8002054 <__aeabi_dmul>
 800a5da:	000b      	movs	r3, r1
 800a5dc:	0002      	movs	r2, r0
 800a5de:	0029      	movs	r1, r5
 800a5e0:	0020      	movs	r0, r4
 800a5e2:	f7f7 fd37 	bl	8002054 <__aeabi_dmul>
 800a5e6:	9b00      	ldr	r3, [sp, #0]
 800a5e8:	9002      	str	r0, [sp, #8]
 800a5ea:	9103      	str	r1, [sp, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d106      	bne.n	800a5fe <__ieee754_log+0x126>
 800a5f0:	0002      	movs	r2, r0
 800a5f2:	000b      	movs	r3, r1
 800a5f4:	0030      	movs	r0, r6
 800a5f6:	0039      	movs	r1, r7
 800a5f8:	f7f7 fff4 	bl	80025e4 <__aeabi_dsub>
 800a5fc:	e77d      	b.n	800a4fa <__ieee754_log+0x22>
 800a5fe:	9800      	ldr	r0, [sp, #0]
 800a600:	f7f8 fbea 	bl	8002dd8 <__aeabi_i2d>
 800a604:	4a76      	ldr	r2, [pc, #472]	@ (800a7e0 <__ieee754_log+0x308>)
 800a606:	4b77      	ldr	r3, [pc, #476]	@ (800a7e4 <__ieee754_log+0x30c>)
 800a608:	0004      	movs	r4, r0
 800a60a:	000d      	movs	r5, r1
 800a60c:	f7f7 fd22 	bl	8002054 <__aeabi_dmul>
 800a610:	4a75      	ldr	r2, [pc, #468]	@ (800a7e8 <__ieee754_log+0x310>)
 800a612:	9000      	str	r0, [sp, #0]
 800a614:	9101      	str	r1, [sp, #4]
 800a616:	4b75      	ldr	r3, [pc, #468]	@ (800a7ec <__ieee754_log+0x314>)
 800a618:	0020      	movs	r0, r4
 800a61a:	0029      	movs	r1, r5
 800a61c:	f7f7 fd1a 	bl	8002054 <__aeabi_dmul>
 800a620:	0002      	movs	r2, r0
 800a622:	000b      	movs	r3, r1
 800a624:	9802      	ldr	r0, [sp, #8]
 800a626:	9903      	ldr	r1, [sp, #12]
 800a628:	f7f7 ffdc 	bl	80025e4 <__aeabi_dsub>
 800a62c:	0032      	movs	r2, r6
 800a62e:	003b      	movs	r3, r7
 800a630:	f7f7 ffd8 	bl	80025e4 <__aeabi_dsub>
 800a634:	0002      	movs	r2, r0
 800a636:	000b      	movs	r3, r1
 800a638:	9800      	ldr	r0, [sp, #0]
 800a63a:	9901      	ldr	r1, [sp, #4]
 800a63c:	e7dc      	b.n	800a5f8 <__ieee754_log+0x120>
 800a63e:	2380      	movs	r3, #128	@ 0x80
 800a640:	05db      	lsls	r3, r3, #23
 800a642:	f7f6 fd5f 	bl	8001104 <__aeabi_dadd>
 800a646:	0002      	movs	r2, r0
 800a648:	000b      	movs	r3, r1
 800a64a:	0030      	movs	r0, r6
 800a64c:	0039      	movs	r1, r7
 800a64e:	f7f7 f8bd 	bl	80017cc <__aeabi_ddiv>
 800a652:	9004      	str	r0, [sp, #16]
 800a654:	9105      	str	r1, [sp, #20]
 800a656:	9800      	ldr	r0, [sp, #0]
 800a658:	f7f8 fbbe 	bl	8002dd8 <__aeabi_i2d>
 800a65c:	9a04      	ldr	r2, [sp, #16]
 800a65e:	9b05      	ldr	r3, [sp, #20]
 800a660:	9006      	str	r0, [sp, #24]
 800a662:	9107      	str	r1, [sp, #28]
 800a664:	0010      	movs	r0, r2
 800a666:	0019      	movs	r1, r3
 800a668:	f7f7 fcf4 	bl	8002054 <__aeabi_dmul>
 800a66c:	4a63      	ldr	r2, [pc, #396]	@ (800a7fc <__ieee754_log+0x324>)
 800a66e:	9b02      	ldr	r3, [sp, #8]
 800a670:	4694      	mov	ip, r2
 800a672:	4463      	add	r3, ip
 800a674:	0002      	movs	r2, r0
 800a676:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a678:	000b      	movs	r3, r1
 800a67a:	9008      	str	r0, [sp, #32]
 800a67c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a67e:	f7f7 fce9 	bl	8002054 <__aeabi_dmul>
 800a682:	0004      	movs	r4, r0
 800a684:	000d      	movs	r5, r1
 800a686:	4a5e      	ldr	r2, [pc, #376]	@ (800a800 <__ieee754_log+0x328>)
 800a688:	4b5e      	ldr	r3, [pc, #376]	@ (800a804 <__ieee754_log+0x32c>)
 800a68a:	f7f7 fce3 	bl	8002054 <__aeabi_dmul>
 800a68e:	4a5e      	ldr	r2, [pc, #376]	@ (800a808 <__ieee754_log+0x330>)
 800a690:	4b5e      	ldr	r3, [pc, #376]	@ (800a80c <__ieee754_log+0x334>)
 800a692:	f7f6 fd37 	bl	8001104 <__aeabi_dadd>
 800a696:	0022      	movs	r2, r4
 800a698:	002b      	movs	r3, r5
 800a69a:	f7f7 fcdb 	bl	8002054 <__aeabi_dmul>
 800a69e:	4a5c      	ldr	r2, [pc, #368]	@ (800a810 <__ieee754_log+0x338>)
 800a6a0:	4b5c      	ldr	r3, [pc, #368]	@ (800a814 <__ieee754_log+0x33c>)
 800a6a2:	f7f6 fd2f 	bl	8001104 <__aeabi_dadd>
 800a6a6:	0022      	movs	r2, r4
 800a6a8:	002b      	movs	r3, r5
 800a6aa:	f7f7 fcd3 	bl	8002054 <__aeabi_dmul>
 800a6ae:	4a5a      	ldr	r2, [pc, #360]	@ (800a818 <__ieee754_log+0x340>)
 800a6b0:	4b5a      	ldr	r3, [pc, #360]	@ (800a81c <__ieee754_log+0x344>)
 800a6b2:	f7f6 fd27 	bl	8001104 <__aeabi_dadd>
 800a6b6:	9a08      	ldr	r2, [sp, #32]
 800a6b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ba:	f7f7 fccb 	bl	8002054 <__aeabi_dmul>
 800a6be:	4a58      	ldr	r2, [pc, #352]	@ (800a820 <__ieee754_log+0x348>)
 800a6c0:	9008      	str	r0, [sp, #32]
 800a6c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6c4:	4b57      	ldr	r3, [pc, #348]	@ (800a824 <__ieee754_log+0x34c>)
 800a6c6:	0020      	movs	r0, r4
 800a6c8:	0029      	movs	r1, r5
 800a6ca:	f7f7 fcc3 	bl	8002054 <__aeabi_dmul>
 800a6ce:	4a56      	ldr	r2, [pc, #344]	@ (800a828 <__ieee754_log+0x350>)
 800a6d0:	4b56      	ldr	r3, [pc, #344]	@ (800a82c <__ieee754_log+0x354>)
 800a6d2:	f7f6 fd17 	bl	8001104 <__aeabi_dadd>
 800a6d6:	0022      	movs	r2, r4
 800a6d8:	002b      	movs	r3, r5
 800a6da:	f7f7 fcbb 	bl	8002054 <__aeabi_dmul>
 800a6de:	4a54      	ldr	r2, [pc, #336]	@ (800a830 <__ieee754_log+0x358>)
 800a6e0:	4b54      	ldr	r3, [pc, #336]	@ (800a834 <__ieee754_log+0x35c>)
 800a6e2:	f7f6 fd0f 	bl	8001104 <__aeabi_dadd>
 800a6e6:	0022      	movs	r2, r4
 800a6e8:	002b      	movs	r3, r5
 800a6ea:	f7f7 fcb3 	bl	8002054 <__aeabi_dmul>
 800a6ee:	0002      	movs	r2, r0
 800a6f0:	000b      	movs	r3, r1
 800a6f2:	9808      	ldr	r0, [sp, #32]
 800a6f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6f6:	f7f6 fd05 	bl	8001104 <__aeabi_dadd>
 800a6fa:	9a02      	ldr	r2, [sp, #8]
 800a6fc:	4b4e      	ldr	r3, [pc, #312]	@ (800a838 <__ieee754_log+0x360>)
 800a6fe:	0004      	movs	r4, r0
 800a700:	1a9b      	subs	r3, r3, r2
 800a702:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a704:	000d      	movs	r5, r1
 800a706:	4313      	orrs	r3, r2
 800a708:	2b00      	cmp	r3, #0
 800a70a:	dd34      	ble.n	800a776 <__ieee754_log+0x29e>
 800a70c:	2200      	movs	r2, #0
 800a70e:	4b3a      	ldr	r3, [pc, #232]	@ (800a7f8 <__ieee754_log+0x320>)
 800a710:	0030      	movs	r0, r6
 800a712:	0039      	movs	r1, r7
 800a714:	f7f7 fc9e 	bl	8002054 <__aeabi_dmul>
 800a718:	0032      	movs	r2, r6
 800a71a:	003b      	movs	r3, r7
 800a71c:	f7f7 fc9a 	bl	8002054 <__aeabi_dmul>
 800a720:	0002      	movs	r2, r0
 800a722:	000b      	movs	r3, r1
 800a724:	9002      	str	r0, [sp, #8]
 800a726:	9103      	str	r1, [sp, #12]
 800a728:	0020      	movs	r0, r4
 800a72a:	0029      	movs	r1, r5
 800a72c:	f7f6 fcea 	bl	8001104 <__aeabi_dadd>
 800a730:	9a04      	ldr	r2, [sp, #16]
 800a732:	9b05      	ldr	r3, [sp, #20]
 800a734:	f7f7 fc8e 	bl	8002054 <__aeabi_dmul>
 800a738:	9b00      	ldr	r3, [sp, #0]
 800a73a:	0004      	movs	r4, r0
 800a73c:	000d      	movs	r5, r1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d106      	bne.n	800a750 <__ieee754_log+0x278>
 800a742:	0002      	movs	r2, r0
 800a744:	000b      	movs	r3, r1
 800a746:	9802      	ldr	r0, [sp, #8]
 800a748:	9903      	ldr	r1, [sp, #12]
 800a74a:	f7f7 ff4b 	bl	80025e4 <__aeabi_dsub>
 800a74e:	e74f      	b.n	800a5f0 <__ieee754_log+0x118>
 800a750:	4a23      	ldr	r2, [pc, #140]	@ (800a7e0 <__ieee754_log+0x308>)
 800a752:	4b24      	ldr	r3, [pc, #144]	@ (800a7e4 <__ieee754_log+0x30c>)
 800a754:	9806      	ldr	r0, [sp, #24]
 800a756:	9907      	ldr	r1, [sp, #28]
 800a758:	f7f7 fc7c 	bl	8002054 <__aeabi_dmul>
 800a75c:	4a22      	ldr	r2, [pc, #136]	@ (800a7e8 <__ieee754_log+0x310>)
 800a75e:	9000      	str	r0, [sp, #0]
 800a760:	9101      	str	r1, [sp, #4]
 800a762:	9806      	ldr	r0, [sp, #24]
 800a764:	9907      	ldr	r1, [sp, #28]
 800a766:	4b21      	ldr	r3, [pc, #132]	@ (800a7ec <__ieee754_log+0x314>)
 800a768:	f7f7 fc74 	bl	8002054 <__aeabi_dmul>
 800a76c:	0022      	movs	r2, r4
 800a76e:	002b      	movs	r3, r5
 800a770:	f7f6 fcc8 	bl	8001104 <__aeabi_dadd>
 800a774:	e754      	b.n	800a620 <__ieee754_log+0x148>
 800a776:	0002      	movs	r2, r0
 800a778:	000b      	movs	r3, r1
 800a77a:	0030      	movs	r0, r6
 800a77c:	0039      	movs	r1, r7
 800a77e:	f7f7 ff31 	bl	80025e4 <__aeabi_dsub>
 800a782:	9a04      	ldr	r2, [sp, #16]
 800a784:	9b05      	ldr	r3, [sp, #20]
 800a786:	f7f7 fc65 	bl	8002054 <__aeabi_dmul>
 800a78a:	9b00      	ldr	r3, [sp, #0]
 800a78c:	0004      	movs	r4, r0
 800a78e:	000d      	movs	r5, r1
 800a790:	2b00      	cmp	r3, #0
 800a792:	d102      	bne.n	800a79a <__ieee754_log+0x2c2>
 800a794:	0002      	movs	r2, r0
 800a796:	000b      	movs	r3, r1
 800a798:	e72c      	b.n	800a5f4 <__ieee754_log+0x11c>
 800a79a:	4a11      	ldr	r2, [pc, #68]	@ (800a7e0 <__ieee754_log+0x308>)
 800a79c:	4b11      	ldr	r3, [pc, #68]	@ (800a7e4 <__ieee754_log+0x30c>)
 800a79e:	9806      	ldr	r0, [sp, #24]
 800a7a0:	9907      	ldr	r1, [sp, #28]
 800a7a2:	f7f7 fc57 	bl	8002054 <__aeabi_dmul>
 800a7a6:	4a10      	ldr	r2, [pc, #64]	@ (800a7e8 <__ieee754_log+0x310>)
 800a7a8:	9000      	str	r0, [sp, #0]
 800a7aa:	9101      	str	r1, [sp, #4]
 800a7ac:	9806      	ldr	r0, [sp, #24]
 800a7ae:	9907      	ldr	r1, [sp, #28]
 800a7b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a7ec <__ieee754_log+0x314>)
 800a7b2:	f7f7 fc4f 	bl	8002054 <__aeabi_dmul>
 800a7b6:	0002      	movs	r2, r0
 800a7b8:	000b      	movs	r3, r1
 800a7ba:	0020      	movs	r0, r4
 800a7bc:	0029      	movs	r1, r5
 800a7be:	e733      	b.n	800a628 <__ieee754_log+0x150>
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	e699      	b.n	800a4fa <__ieee754_log+0x22>
 800a7c6:	46c0      	nop			@ (mov r8, r8)
 800a7c8:	c3500000 	.word	0xc3500000
 800a7cc:	43500000 	.word	0x43500000
 800a7d0:	7fefffff 	.word	0x7fefffff
 800a7d4:	fffffc01 	.word	0xfffffc01
 800a7d8:	00095f64 	.word	0x00095f64
 800a7dc:	3ff00000 	.word	0x3ff00000
 800a7e0:	fee00000 	.word	0xfee00000
 800a7e4:	3fe62e42 	.word	0x3fe62e42
 800a7e8:	35793c76 	.word	0x35793c76
 800a7ec:	3dea39ef 	.word	0x3dea39ef
 800a7f0:	55555555 	.word	0x55555555
 800a7f4:	3fd55555 	.word	0x3fd55555
 800a7f8:	3fe00000 	.word	0x3fe00000
 800a7fc:	fff9eb86 	.word	0xfff9eb86
 800a800:	df3e5244 	.word	0xdf3e5244
 800a804:	3fc2f112 	.word	0x3fc2f112
 800a808:	96cb03de 	.word	0x96cb03de
 800a80c:	3fc74664 	.word	0x3fc74664
 800a810:	94229359 	.word	0x94229359
 800a814:	3fd24924 	.word	0x3fd24924
 800a818:	55555593 	.word	0x55555593
 800a81c:	3fe55555 	.word	0x3fe55555
 800a820:	d078c69f 	.word	0xd078c69f
 800a824:	3fc39a09 	.word	0x3fc39a09
 800a828:	1d8e78af 	.word	0x1d8e78af
 800a82c:	3fcc71c5 	.word	0x3fcc71c5
 800a830:	9997fa04 	.word	0x9997fa04
 800a834:	3fd99999 	.word	0x3fd99999
 800a838:	0006b851 	.word	0x0006b851

0800a83c <malloc>:
 800a83c:	b510      	push	{r4, lr}
 800a83e:	4b03      	ldr	r3, [pc, #12]	@ (800a84c <malloc+0x10>)
 800a840:	0001      	movs	r1, r0
 800a842:	6818      	ldr	r0, [r3, #0]
 800a844:	f000 f826 	bl	800a894 <_malloc_r>
 800a848:	bd10      	pop	{r4, pc}
 800a84a:	46c0      	nop			@ (mov r8, r8)
 800a84c:	2000002c 	.word	0x2000002c

0800a850 <sbrk_aligned>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	4e0f      	ldr	r6, [pc, #60]	@ (800a890 <sbrk_aligned+0x40>)
 800a854:	000d      	movs	r5, r1
 800a856:	6831      	ldr	r1, [r6, #0]
 800a858:	0004      	movs	r4, r0
 800a85a:	2900      	cmp	r1, #0
 800a85c:	d102      	bne.n	800a864 <sbrk_aligned+0x14>
 800a85e:	f000 feb5 	bl	800b5cc <_sbrk_r>
 800a862:	6030      	str	r0, [r6, #0]
 800a864:	0029      	movs	r1, r5
 800a866:	0020      	movs	r0, r4
 800a868:	f000 feb0 	bl	800b5cc <_sbrk_r>
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d103      	bne.n	800a878 <sbrk_aligned+0x28>
 800a870:	2501      	movs	r5, #1
 800a872:	426d      	negs	r5, r5
 800a874:	0028      	movs	r0, r5
 800a876:	bd70      	pop	{r4, r5, r6, pc}
 800a878:	2303      	movs	r3, #3
 800a87a:	1cc5      	adds	r5, r0, #3
 800a87c:	439d      	bics	r5, r3
 800a87e:	42a8      	cmp	r0, r5
 800a880:	d0f8      	beq.n	800a874 <sbrk_aligned+0x24>
 800a882:	1a29      	subs	r1, r5, r0
 800a884:	0020      	movs	r0, r4
 800a886:	f000 fea1 	bl	800b5cc <_sbrk_r>
 800a88a:	3001      	adds	r0, #1
 800a88c:	d1f2      	bne.n	800a874 <sbrk_aligned+0x24>
 800a88e:	e7ef      	b.n	800a870 <sbrk_aligned+0x20>
 800a890:	20000780 	.word	0x20000780

0800a894 <_malloc_r>:
 800a894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a896:	2203      	movs	r2, #3
 800a898:	1ccb      	adds	r3, r1, #3
 800a89a:	4393      	bics	r3, r2
 800a89c:	3308      	adds	r3, #8
 800a89e:	0005      	movs	r5, r0
 800a8a0:	001f      	movs	r7, r3
 800a8a2:	2b0c      	cmp	r3, #12
 800a8a4:	d234      	bcs.n	800a910 <_malloc_r+0x7c>
 800a8a6:	270c      	movs	r7, #12
 800a8a8:	42b9      	cmp	r1, r7
 800a8aa:	d833      	bhi.n	800a914 <_malloc_r+0x80>
 800a8ac:	0028      	movs	r0, r5
 800a8ae:	f000 f871 	bl	800a994 <__malloc_lock>
 800a8b2:	4e37      	ldr	r6, [pc, #220]	@ (800a990 <_malloc_r+0xfc>)
 800a8b4:	6833      	ldr	r3, [r6, #0]
 800a8b6:	001c      	movs	r4, r3
 800a8b8:	2c00      	cmp	r4, #0
 800a8ba:	d12f      	bne.n	800a91c <_malloc_r+0x88>
 800a8bc:	0039      	movs	r1, r7
 800a8be:	0028      	movs	r0, r5
 800a8c0:	f7ff ffc6 	bl	800a850 <sbrk_aligned>
 800a8c4:	0004      	movs	r4, r0
 800a8c6:	1c43      	adds	r3, r0, #1
 800a8c8:	d15f      	bne.n	800a98a <_malloc_r+0xf6>
 800a8ca:	6834      	ldr	r4, [r6, #0]
 800a8cc:	9400      	str	r4, [sp, #0]
 800a8ce:	9b00      	ldr	r3, [sp, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d14a      	bne.n	800a96a <_malloc_r+0xd6>
 800a8d4:	2c00      	cmp	r4, #0
 800a8d6:	d052      	beq.n	800a97e <_malloc_r+0xea>
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	0028      	movs	r0, r5
 800a8dc:	18e3      	adds	r3, r4, r3
 800a8de:	9900      	ldr	r1, [sp, #0]
 800a8e0:	9301      	str	r3, [sp, #4]
 800a8e2:	f000 fe73 	bl	800b5cc <_sbrk_r>
 800a8e6:	9b01      	ldr	r3, [sp, #4]
 800a8e8:	4283      	cmp	r3, r0
 800a8ea:	d148      	bne.n	800a97e <_malloc_r+0xea>
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	0028      	movs	r0, r5
 800a8f0:	1aff      	subs	r7, r7, r3
 800a8f2:	0039      	movs	r1, r7
 800a8f4:	f7ff ffac 	bl	800a850 <sbrk_aligned>
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	d040      	beq.n	800a97e <_malloc_r+0xea>
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	19db      	adds	r3, r3, r7
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	6833      	ldr	r3, [r6, #0]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	2a00      	cmp	r2, #0
 800a908:	d133      	bne.n	800a972 <_malloc_r+0xde>
 800a90a:	9b00      	ldr	r3, [sp, #0]
 800a90c:	6033      	str	r3, [r6, #0]
 800a90e:	e019      	b.n	800a944 <_malloc_r+0xb0>
 800a910:	2b00      	cmp	r3, #0
 800a912:	dac9      	bge.n	800a8a8 <_malloc_r+0x14>
 800a914:	230c      	movs	r3, #12
 800a916:	602b      	str	r3, [r5, #0]
 800a918:	2000      	movs	r0, #0
 800a91a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a91c:	6821      	ldr	r1, [r4, #0]
 800a91e:	1bc9      	subs	r1, r1, r7
 800a920:	d420      	bmi.n	800a964 <_malloc_r+0xd0>
 800a922:	290b      	cmp	r1, #11
 800a924:	d90a      	bls.n	800a93c <_malloc_r+0xa8>
 800a926:	19e2      	adds	r2, r4, r7
 800a928:	6027      	str	r7, [r4, #0]
 800a92a:	42a3      	cmp	r3, r4
 800a92c:	d104      	bne.n	800a938 <_malloc_r+0xa4>
 800a92e:	6032      	str	r2, [r6, #0]
 800a930:	6863      	ldr	r3, [r4, #4]
 800a932:	6011      	str	r1, [r2, #0]
 800a934:	6053      	str	r3, [r2, #4]
 800a936:	e005      	b.n	800a944 <_malloc_r+0xb0>
 800a938:	605a      	str	r2, [r3, #4]
 800a93a:	e7f9      	b.n	800a930 <_malloc_r+0x9c>
 800a93c:	6862      	ldr	r2, [r4, #4]
 800a93e:	42a3      	cmp	r3, r4
 800a940:	d10e      	bne.n	800a960 <_malloc_r+0xcc>
 800a942:	6032      	str	r2, [r6, #0]
 800a944:	0028      	movs	r0, r5
 800a946:	f000 f82d 	bl	800a9a4 <__malloc_unlock>
 800a94a:	0020      	movs	r0, r4
 800a94c:	2207      	movs	r2, #7
 800a94e:	300b      	adds	r0, #11
 800a950:	1d23      	adds	r3, r4, #4
 800a952:	4390      	bics	r0, r2
 800a954:	1ac2      	subs	r2, r0, r3
 800a956:	4298      	cmp	r0, r3
 800a958:	d0df      	beq.n	800a91a <_malloc_r+0x86>
 800a95a:	1a1b      	subs	r3, r3, r0
 800a95c:	50a3      	str	r3, [r4, r2]
 800a95e:	e7dc      	b.n	800a91a <_malloc_r+0x86>
 800a960:	605a      	str	r2, [r3, #4]
 800a962:	e7ef      	b.n	800a944 <_malloc_r+0xb0>
 800a964:	0023      	movs	r3, r4
 800a966:	6864      	ldr	r4, [r4, #4]
 800a968:	e7a6      	b.n	800a8b8 <_malloc_r+0x24>
 800a96a:	9c00      	ldr	r4, [sp, #0]
 800a96c:	6863      	ldr	r3, [r4, #4]
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	e7ad      	b.n	800a8ce <_malloc_r+0x3a>
 800a972:	001a      	movs	r2, r3
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	42a3      	cmp	r3, r4
 800a978:	d1fb      	bne.n	800a972 <_malloc_r+0xde>
 800a97a:	2300      	movs	r3, #0
 800a97c:	e7da      	b.n	800a934 <_malloc_r+0xa0>
 800a97e:	230c      	movs	r3, #12
 800a980:	0028      	movs	r0, r5
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	f000 f80e 	bl	800a9a4 <__malloc_unlock>
 800a988:	e7c6      	b.n	800a918 <_malloc_r+0x84>
 800a98a:	6007      	str	r7, [r0, #0]
 800a98c:	e7da      	b.n	800a944 <_malloc_r+0xb0>
 800a98e:	46c0      	nop			@ (mov r8, r8)
 800a990:	20000784 	.word	0x20000784

0800a994 <__malloc_lock>:
 800a994:	b510      	push	{r4, lr}
 800a996:	4802      	ldr	r0, [pc, #8]	@ (800a9a0 <__malloc_lock+0xc>)
 800a998:	f000 fe69 	bl	800b66e <__retarget_lock_acquire_recursive>
 800a99c:	bd10      	pop	{r4, pc}
 800a99e:	46c0      	nop			@ (mov r8, r8)
 800a9a0:	200008c8 	.word	0x200008c8

0800a9a4 <__malloc_unlock>:
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	4802      	ldr	r0, [pc, #8]	@ (800a9b0 <__malloc_unlock+0xc>)
 800a9a8:	f000 fe62 	bl	800b670 <__retarget_lock_release_recursive>
 800a9ac:	bd10      	pop	{r4, pc}
 800a9ae:	46c0      	nop			@ (mov r8, r8)
 800a9b0:	200008c8 	.word	0x200008c8

0800a9b4 <__cvt>:
 800a9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9b6:	001f      	movs	r7, r3
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	0016      	movs	r6, r2
 800a9bc:	b08b      	sub	sp, #44	@ 0x2c
 800a9be:	429f      	cmp	r7, r3
 800a9c0:	da04      	bge.n	800a9cc <__cvt+0x18>
 800a9c2:	2180      	movs	r1, #128	@ 0x80
 800a9c4:	0609      	lsls	r1, r1, #24
 800a9c6:	187b      	adds	r3, r7, r1
 800a9c8:	001f      	movs	r7, r3
 800a9ca:	232d      	movs	r3, #45	@ 0x2d
 800a9cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a9ce:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a9d0:	7013      	strb	r3, [r2, #0]
 800a9d2:	2320      	movs	r3, #32
 800a9d4:	2203      	movs	r2, #3
 800a9d6:	439d      	bics	r5, r3
 800a9d8:	2d46      	cmp	r5, #70	@ 0x46
 800a9da:	d007      	beq.n	800a9ec <__cvt+0x38>
 800a9dc:	002b      	movs	r3, r5
 800a9de:	3b45      	subs	r3, #69	@ 0x45
 800a9e0:	4259      	negs	r1, r3
 800a9e2:	414b      	adcs	r3, r1
 800a9e4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a9e6:	3a01      	subs	r2, #1
 800a9e8:	18cb      	adds	r3, r1, r3
 800a9ea:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9ec:	ab09      	add	r3, sp, #36	@ 0x24
 800a9ee:	9304      	str	r3, [sp, #16]
 800a9f0:	ab08      	add	r3, sp, #32
 800a9f2:	9303      	str	r3, [sp, #12]
 800a9f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a9f6:	9200      	str	r2, [sp, #0]
 800a9f8:	9302      	str	r3, [sp, #8]
 800a9fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a9fc:	0032      	movs	r2, r6
 800a9fe:	9301      	str	r3, [sp, #4]
 800aa00:	003b      	movs	r3, r7
 800aa02:	f000 fed7 	bl	800b7b4 <_dtoa_r>
 800aa06:	0004      	movs	r4, r0
 800aa08:	2d47      	cmp	r5, #71	@ 0x47
 800aa0a:	d11b      	bne.n	800aa44 <__cvt+0x90>
 800aa0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa0e:	07db      	lsls	r3, r3, #31
 800aa10:	d511      	bpl.n	800aa36 <__cvt+0x82>
 800aa12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa14:	18c3      	adds	r3, r0, r3
 800aa16:	9307      	str	r3, [sp, #28]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	0030      	movs	r0, r6
 800aa1e:	0039      	movs	r1, r7
 800aa20:	f7f5 fd12 	bl	8000448 <__aeabi_dcmpeq>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d001      	beq.n	800aa2c <__cvt+0x78>
 800aa28:	9b07      	ldr	r3, [sp, #28]
 800aa2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa2c:	2230      	movs	r2, #48	@ 0x30
 800aa2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa30:	9907      	ldr	r1, [sp, #28]
 800aa32:	428b      	cmp	r3, r1
 800aa34:	d320      	bcc.n	800aa78 <__cvt+0xc4>
 800aa36:	0020      	movs	r0, r4
 800aa38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa3a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800aa3c:	1b1b      	subs	r3, r3, r4
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	b00b      	add	sp, #44	@ 0x2c
 800aa42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa46:	18c3      	adds	r3, r0, r3
 800aa48:	9307      	str	r3, [sp, #28]
 800aa4a:	2d46      	cmp	r5, #70	@ 0x46
 800aa4c:	d1e4      	bne.n	800aa18 <__cvt+0x64>
 800aa4e:	7803      	ldrb	r3, [r0, #0]
 800aa50:	2b30      	cmp	r3, #48	@ 0x30
 800aa52:	d10c      	bne.n	800aa6e <__cvt+0xba>
 800aa54:	2200      	movs	r2, #0
 800aa56:	2300      	movs	r3, #0
 800aa58:	0030      	movs	r0, r6
 800aa5a:	0039      	movs	r1, r7
 800aa5c:	f7f5 fcf4 	bl	8000448 <__aeabi_dcmpeq>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d104      	bne.n	800aa6e <__cvt+0xba>
 800aa64:	2301      	movs	r3, #1
 800aa66:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800aa68:	1a9b      	subs	r3, r3, r2
 800aa6a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa70:	9a07      	ldr	r2, [sp, #28]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	18d3      	adds	r3, r2, r3
 800aa76:	e7ce      	b.n	800aa16 <__cvt+0x62>
 800aa78:	1c59      	adds	r1, r3, #1
 800aa7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	e7d6      	b.n	800aa2e <__cvt+0x7a>

0800aa80 <__exponent>:
 800aa80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa82:	232b      	movs	r3, #43	@ 0x2b
 800aa84:	0005      	movs	r5, r0
 800aa86:	000c      	movs	r4, r1
 800aa88:	b085      	sub	sp, #20
 800aa8a:	7002      	strb	r2, [r0, #0]
 800aa8c:	2900      	cmp	r1, #0
 800aa8e:	da01      	bge.n	800aa94 <__exponent+0x14>
 800aa90:	424c      	negs	r4, r1
 800aa92:	3302      	adds	r3, #2
 800aa94:	706b      	strb	r3, [r5, #1]
 800aa96:	2c09      	cmp	r4, #9
 800aa98:	dd2c      	ble.n	800aaf4 <__exponent+0x74>
 800aa9a:	ab02      	add	r3, sp, #8
 800aa9c:	1dde      	adds	r6, r3, #7
 800aa9e:	0020      	movs	r0, r4
 800aaa0:	210a      	movs	r1, #10
 800aaa2:	f7f5 fcbb 	bl	800041c <__aeabi_idivmod>
 800aaa6:	0037      	movs	r7, r6
 800aaa8:	3130      	adds	r1, #48	@ 0x30
 800aaaa:	3e01      	subs	r6, #1
 800aaac:	0020      	movs	r0, r4
 800aaae:	7031      	strb	r1, [r6, #0]
 800aab0:	210a      	movs	r1, #10
 800aab2:	9401      	str	r4, [sp, #4]
 800aab4:	f7f5 fbcc 	bl	8000250 <__divsi3>
 800aab8:	9b01      	ldr	r3, [sp, #4]
 800aaba:	0004      	movs	r4, r0
 800aabc:	2b63      	cmp	r3, #99	@ 0x63
 800aabe:	dcee      	bgt.n	800aa9e <__exponent+0x1e>
 800aac0:	1eba      	subs	r2, r7, #2
 800aac2:	1ca8      	adds	r0, r5, #2
 800aac4:	0001      	movs	r1, r0
 800aac6:	0013      	movs	r3, r2
 800aac8:	3430      	adds	r4, #48	@ 0x30
 800aaca:	7014      	strb	r4, [r2, #0]
 800aacc:	ac02      	add	r4, sp, #8
 800aace:	3407      	adds	r4, #7
 800aad0:	429c      	cmp	r4, r3
 800aad2:	d80a      	bhi.n	800aaea <__exponent+0x6a>
 800aad4:	2300      	movs	r3, #0
 800aad6:	42a2      	cmp	r2, r4
 800aad8:	d803      	bhi.n	800aae2 <__exponent+0x62>
 800aada:	3309      	adds	r3, #9
 800aadc:	aa02      	add	r2, sp, #8
 800aade:	189b      	adds	r3, r3, r2
 800aae0:	1bdb      	subs	r3, r3, r7
 800aae2:	18c0      	adds	r0, r0, r3
 800aae4:	1b40      	subs	r0, r0, r5
 800aae6:	b005      	add	sp, #20
 800aae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaea:	781c      	ldrb	r4, [r3, #0]
 800aaec:	3301      	adds	r3, #1
 800aaee:	700c      	strb	r4, [r1, #0]
 800aaf0:	3101      	adds	r1, #1
 800aaf2:	e7eb      	b.n	800aacc <__exponent+0x4c>
 800aaf4:	2330      	movs	r3, #48	@ 0x30
 800aaf6:	18e4      	adds	r4, r4, r3
 800aaf8:	70ab      	strb	r3, [r5, #2]
 800aafa:	1d28      	adds	r0, r5, #4
 800aafc:	70ec      	strb	r4, [r5, #3]
 800aafe:	e7f1      	b.n	800aae4 <__exponent+0x64>

0800ab00 <_printf_float>:
 800ab00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab02:	b097      	sub	sp, #92	@ 0x5c
 800ab04:	000d      	movs	r5, r1
 800ab06:	920a      	str	r2, [sp, #40]	@ 0x28
 800ab08:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800ab0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab0c:	9009      	str	r0, [sp, #36]	@ 0x24
 800ab0e:	f000 fd1f 	bl	800b550 <_localeconv_r>
 800ab12:	6803      	ldr	r3, [r0, #0]
 800ab14:	0018      	movs	r0, r3
 800ab16:	930d      	str	r3, [sp, #52]	@ 0x34
 800ab18:	f7f5 faf4 	bl	8000104 <strlen>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ab20:	9314      	str	r3, [sp, #80]	@ 0x50
 800ab22:	7e2b      	ldrb	r3, [r5, #24]
 800ab24:	2207      	movs	r2, #7
 800ab26:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	930e      	str	r3, [sp, #56]	@ 0x38
 800ab2c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	05c9      	lsls	r1, r1, #23
 800ab32:	d545      	bpl.n	800abc0 <_printf_float+0xc0>
 800ab34:	189b      	adds	r3, r3, r2
 800ab36:	4393      	bics	r3, r2
 800ab38:	001a      	movs	r2, r3
 800ab3a:	3208      	adds	r2, #8
 800ab3c:	6022      	str	r2, [r4, #0]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	681e      	ldr	r6, [r3, #0]
 800ab42:	685f      	ldr	r7, [r3, #4]
 800ab44:	007b      	lsls	r3, r7, #1
 800ab46:	085b      	lsrs	r3, r3, #1
 800ab48:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab4a:	9610      	str	r6, [sp, #64]	@ 0x40
 800ab4c:	64ae      	str	r6, [r5, #72]	@ 0x48
 800ab4e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800ab50:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ab52:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ab54:	4ba7      	ldr	r3, [pc, #668]	@ (800adf4 <_printf_float+0x2f4>)
 800ab56:	4252      	negs	r2, r2
 800ab58:	f7f8 f8e0 	bl	8002d1c <__aeabi_dcmpun>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d131      	bne.n	800abc4 <_printf_float+0xc4>
 800ab60:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ab62:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ab64:	2201      	movs	r2, #1
 800ab66:	4ba3      	ldr	r3, [pc, #652]	@ (800adf4 <_printf_float+0x2f4>)
 800ab68:	4252      	negs	r2, r2
 800ab6a:	f7f5 fc7d 	bl	8000468 <__aeabi_dcmple>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	d128      	bne.n	800abc4 <_printf_float+0xc4>
 800ab72:	2200      	movs	r2, #0
 800ab74:	2300      	movs	r3, #0
 800ab76:	0030      	movs	r0, r6
 800ab78:	0039      	movs	r1, r7
 800ab7a:	f7f5 fc6b 	bl	8000454 <__aeabi_dcmplt>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d003      	beq.n	800ab8a <_printf_float+0x8a>
 800ab82:	002b      	movs	r3, r5
 800ab84:	222d      	movs	r2, #45	@ 0x2d
 800ab86:	3343      	adds	r3, #67	@ 0x43
 800ab88:	701a      	strb	r2, [r3, #0]
 800ab8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab8c:	4f9a      	ldr	r7, [pc, #616]	@ (800adf8 <_printf_float+0x2f8>)
 800ab8e:	2b47      	cmp	r3, #71	@ 0x47
 800ab90:	d900      	bls.n	800ab94 <_printf_float+0x94>
 800ab92:	4f9a      	ldr	r7, [pc, #616]	@ (800adfc <_printf_float+0x2fc>)
 800ab94:	2303      	movs	r3, #3
 800ab96:	2400      	movs	r4, #0
 800ab98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab9a:	612b      	str	r3, [r5, #16]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	439a      	bics	r2, r3
 800aba0:	602a      	str	r2, [r5, #0]
 800aba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aba4:	0029      	movs	r1, r5
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abac:	aa15      	add	r2, sp, #84	@ 0x54
 800abae:	f000 f9e5 	bl	800af7c <_printf_common>
 800abb2:	3001      	adds	r0, #1
 800abb4:	d000      	beq.n	800abb8 <_printf_float+0xb8>
 800abb6:	e09f      	b.n	800acf8 <_printf_float+0x1f8>
 800abb8:	2001      	movs	r0, #1
 800abba:	4240      	negs	r0, r0
 800abbc:	b017      	add	sp, #92	@ 0x5c
 800abbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abc0:	3307      	adds	r3, #7
 800abc2:	e7b8      	b.n	800ab36 <_printf_float+0x36>
 800abc4:	0032      	movs	r2, r6
 800abc6:	003b      	movs	r3, r7
 800abc8:	0030      	movs	r0, r6
 800abca:	0039      	movs	r1, r7
 800abcc:	f7f8 f8a6 	bl	8002d1c <__aeabi_dcmpun>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d00b      	beq.n	800abec <_printf_float+0xec>
 800abd4:	2f00      	cmp	r7, #0
 800abd6:	da03      	bge.n	800abe0 <_printf_float+0xe0>
 800abd8:	002b      	movs	r3, r5
 800abda:	222d      	movs	r2, #45	@ 0x2d
 800abdc:	3343      	adds	r3, #67	@ 0x43
 800abde:	701a      	strb	r2, [r3, #0]
 800abe0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abe2:	4f87      	ldr	r7, [pc, #540]	@ (800ae00 <_printf_float+0x300>)
 800abe4:	2b47      	cmp	r3, #71	@ 0x47
 800abe6:	d9d5      	bls.n	800ab94 <_printf_float+0x94>
 800abe8:	4f86      	ldr	r7, [pc, #536]	@ (800ae04 <_printf_float+0x304>)
 800abea:	e7d3      	b.n	800ab94 <_printf_float+0x94>
 800abec:	2220      	movs	r2, #32
 800abee:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800abf0:	686b      	ldr	r3, [r5, #4]
 800abf2:	4394      	bics	r4, r2
 800abf4:	1c5a      	adds	r2, r3, #1
 800abf6:	d146      	bne.n	800ac86 <_printf_float+0x186>
 800abf8:	3307      	adds	r3, #7
 800abfa:	606b      	str	r3, [r5, #4]
 800abfc:	2380      	movs	r3, #128	@ 0x80
 800abfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac00:	00db      	lsls	r3, r3, #3
 800ac02:	4313      	orrs	r3, r2
 800ac04:	2200      	movs	r2, #0
 800ac06:	602b      	str	r3, [r5, #0]
 800ac08:	9206      	str	r2, [sp, #24]
 800ac0a:	aa14      	add	r2, sp, #80	@ 0x50
 800ac0c:	9205      	str	r2, [sp, #20]
 800ac0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac10:	a90a      	add	r1, sp, #40	@ 0x28
 800ac12:	9204      	str	r2, [sp, #16]
 800ac14:	aa13      	add	r2, sp, #76	@ 0x4c
 800ac16:	9203      	str	r2, [sp, #12]
 800ac18:	2223      	movs	r2, #35	@ 0x23
 800ac1a:	1852      	adds	r2, r2, r1
 800ac1c:	9202      	str	r2, [sp, #8]
 800ac1e:	9301      	str	r3, [sp, #4]
 800ac20:	686b      	ldr	r3, [r5, #4]
 800ac22:	0032      	movs	r2, r6
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac28:	003b      	movs	r3, r7
 800ac2a:	f7ff fec3 	bl	800a9b4 <__cvt>
 800ac2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ac30:	0007      	movs	r7, r0
 800ac32:	2c47      	cmp	r4, #71	@ 0x47
 800ac34:	d12d      	bne.n	800ac92 <_printf_float+0x192>
 800ac36:	1cd3      	adds	r3, r2, #3
 800ac38:	db02      	blt.n	800ac40 <_printf_float+0x140>
 800ac3a:	686b      	ldr	r3, [r5, #4]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	dd48      	ble.n	800acd2 <_printf_float+0x1d2>
 800ac40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac42:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ac44:	3b02      	subs	r3, #2
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac4a:	0028      	movs	r0, r5
 800ac4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac4e:	3901      	subs	r1, #1
 800ac50:	3050      	adds	r0, #80	@ 0x50
 800ac52:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ac54:	f7ff ff14 	bl	800aa80 <__exponent>
 800ac58:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ac5a:	0004      	movs	r4, r0
 800ac5c:	1813      	adds	r3, r2, r0
 800ac5e:	612b      	str	r3, [r5, #16]
 800ac60:	2a01      	cmp	r2, #1
 800ac62:	dc02      	bgt.n	800ac6a <_printf_float+0x16a>
 800ac64:	682a      	ldr	r2, [r5, #0]
 800ac66:	07d2      	lsls	r2, r2, #31
 800ac68:	d501      	bpl.n	800ac6e <_printf_float+0x16e>
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	612b      	str	r3, [r5, #16]
 800ac6e:	2323      	movs	r3, #35	@ 0x23
 800ac70:	aa0a      	add	r2, sp, #40	@ 0x28
 800ac72:	189b      	adds	r3, r3, r2
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d100      	bne.n	800ac7c <_printf_float+0x17c>
 800ac7a:	e792      	b.n	800aba2 <_printf_float+0xa2>
 800ac7c:	002b      	movs	r3, r5
 800ac7e:	222d      	movs	r2, #45	@ 0x2d
 800ac80:	3343      	adds	r3, #67	@ 0x43
 800ac82:	701a      	strb	r2, [r3, #0]
 800ac84:	e78d      	b.n	800aba2 <_printf_float+0xa2>
 800ac86:	2c47      	cmp	r4, #71	@ 0x47
 800ac88:	d1b8      	bne.n	800abfc <_printf_float+0xfc>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1b6      	bne.n	800abfc <_printf_float+0xfc>
 800ac8e:	3301      	adds	r3, #1
 800ac90:	e7b3      	b.n	800abfa <_printf_float+0xfa>
 800ac92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac94:	0011      	movs	r1, r2
 800ac96:	2b65      	cmp	r3, #101	@ 0x65
 800ac98:	d9d7      	bls.n	800ac4a <_printf_float+0x14a>
 800ac9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac9c:	2b66      	cmp	r3, #102	@ 0x66
 800ac9e:	d11a      	bne.n	800acd6 <_printf_float+0x1d6>
 800aca0:	686b      	ldr	r3, [r5, #4]
 800aca2:	2a00      	cmp	r2, #0
 800aca4:	dd09      	ble.n	800acba <_printf_float+0x1ba>
 800aca6:	612a      	str	r2, [r5, #16]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d102      	bne.n	800acb2 <_printf_float+0x1b2>
 800acac:	6829      	ldr	r1, [r5, #0]
 800acae:	07c9      	lsls	r1, r1, #31
 800acb0:	d50b      	bpl.n	800acca <_printf_float+0x1ca>
 800acb2:	3301      	adds	r3, #1
 800acb4:	189b      	adds	r3, r3, r2
 800acb6:	612b      	str	r3, [r5, #16]
 800acb8:	e007      	b.n	800acca <_printf_float+0x1ca>
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d103      	bne.n	800acc6 <_printf_float+0x1c6>
 800acbe:	2201      	movs	r2, #1
 800acc0:	6829      	ldr	r1, [r5, #0]
 800acc2:	4211      	tst	r1, r2
 800acc4:	d000      	beq.n	800acc8 <_printf_float+0x1c8>
 800acc6:	1c9a      	adds	r2, r3, #2
 800acc8:	612a      	str	r2, [r5, #16]
 800acca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800accc:	2400      	movs	r4, #0
 800acce:	65ab      	str	r3, [r5, #88]	@ 0x58
 800acd0:	e7cd      	b.n	800ac6e <_printf_float+0x16e>
 800acd2:	2367      	movs	r3, #103	@ 0x67
 800acd4:	930c      	str	r3, [sp, #48]	@ 0x30
 800acd6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800acd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800acda:	4299      	cmp	r1, r3
 800acdc:	db06      	blt.n	800acec <_printf_float+0x1ec>
 800acde:	682b      	ldr	r3, [r5, #0]
 800ace0:	6129      	str	r1, [r5, #16]
 800ace2:	07db      	lsls	r3, r3, #31
 800ace4:	d5f1      	bpl.n	800acca <_printf_float+0x1ca>
 800ace6:	3101      	adds	r1, #1
 800ace8:	6129      	str	r1, [r5, #16]
 800acea:	e7ee      	b.n	800acca <_printf_float+0x1ca>
 800acec:	2201      	movs	r2, #1
 800acee:	2900      	cmp	r1, #0
 800acf0:	dce0      	bgt.n	800acb4 <_printf_float+0x1b4>
 800acf2:	1892      	adds	r2, r2, r2
 800acf4:	1a52      	subs	r2, r2, r1
 800acf6:	e7dd      	b.n	800acb4 <_printf_float+0x1b4>
 800acf8:	682a      	ldr	r2, [r5, #0]
 800acfa:	0553      	lsls	r3, r2, #21
 800acfc:	d408      	bmi.n	800ad10 <_printf_float+0x210>
 800acfe:	692b      	ldr	r3, [r5, #16]
 800ad00:	003a      	movs	r2, r7
 800ad02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ad08:	47a0      	blx	r4
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	d129      	bne.n	800ad62 <_printf_float+0x262>
 800ad0e:	e753      	b.n	800abb8 <_printf_float+0xb8>
 800ad10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad12:	2b65      	cmp	r3, #101	@ 0x65
 800ad14:	d800      	bhi.n	800ad18 <_printf_float+0x218>
 800ad16:	e0da      	b.n	800aece <_printf_float+0x3ce>
 800ad18:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ad1a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f7f5 fb92 	bl	8000448 <__aeabi_dcmpeq>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d033      	beq.n	800ad90 <_printf_float+0x290>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	4a37      	ldr	r2, [pc, #220]	@ (800ae08 <_printf_float+0x308>)
 800ad2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ad32:	47a0      	blx	r4
 800ad34:	3001      	adds	r0, #1
 800ad36:	d100      	bne.n	800ad3a <_printf_float+0x23a>
 800ad38:	e73e      	b.n	800abb8 <_printf_float+0xb8>
 800ad3a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ad3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad3e:	42b3      	cmp	r3, r6
 800ad40:	db02      	blt.n	800ad48 <_printf_float+0x248>
 800ad42:	682b      	ldr	r3, [r5, #0]
 800ad44:	07db      	lsls	r3, r3, #31
 800ad46:	d50c      	bpl.n	800ad62 <_printf_float+0x262>
 800ad48:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ad4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad52:	47a0      	blx	r4
 800ad54:	2400      	movs	r4, #0
 800ad56:	3001      	adds	r0, #1
 800ad58:	d100      	bne.n	800ad5c <_printf_float+0x25c>
 800ad5a:	e72d      	b.n	800abb8 <_printf_float+0xb8>
 800ad5c:	1e73      	subs	r3, r6, #1
 800ad5e:	42a3      	cmp	r3, r4
 800ad60:	dc0a      	bgt.n	800ad78 <_printf_float+0x278>
 800ad62:	682b      	ldr	r3, [r5, #0]
 800ad64:	079b      	lsls	r3, r3, #30
 800ad66:	d500      	bpl.n	800ad6a <_printf_float+0x26a>
 800ad68:	e105      	b.n	800af76 <_printf_float+0x476>
 800ad6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ad6c:	68e8      	ldr	r0, [r5, #12]
 800ad6e:	4298      	cmp	r0, r3
 800ad70:	db00      	blt.n	800ad74 <_printf_float+0x274>
 800ad72:	e723      	b.n	800abbc <_printf_float+0xbc>
 800ad74:	0018      	movs	r0, r3
 800ad76:	e721      	b.n	800abbc <_printf_float+0xbc>
 800ad78:	002a      	movs	r2, r5
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad80:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ad82:	321a      	adds	r2, #26
 800ad84:	47b8      	blx	r7
 800ad86:	3001      	adds	r0, #1
 800ad88:	d100      	bne.n	800ad8c <_printf_float+0x28c>
 800ad8a:	e715      	b.n	800abb8 <_printf_float+0xb8>
 800ad8c:	3401      	adds	r4, #1
 800ad8e:	e7e5      	b.n	800ad5c <_printf_float+0x25c>
 800ad90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	dc3a      	bgt.n	800ae0c <_printf_float+0x30c>
 800ad96:	2301      	movs	r3, #1
 800ad98:	4a1b      	ldr	r2, [pc, #108]	@ (800ae08 <_printf_float+0x308>)
 800ad9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad9e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ada0:	47a0      	blx	r4
 800ada2:	3001      	adds	r0, #1
 800ada4:	d100      	bne.n	800ada8 <_printf_float+0x2a8>
 800ada6:	e707      	b.n	800abb8 <_printf_float+0xb8>
 800ada8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800adaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800adac:	4333      	orrs	r3, r6
 800adae:	d102      	bne.n	800adb6 <_printf_float+0x2b6>
 800adb0:	682b      	ldr	r3, [r5, #0]
 800adb2:	07db      	lsls	r3, r3, #31
 800adb4:	d5d5      	bpl.n	800ad62 <_printf_float+0x262>
 800adb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800adbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adbe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800adc0:	47a0      	blx	r4
 800adc2:	2300      	movs	r3, #0
 800adc4:	3001      	adds	r0, #1
 800adc6:	d100      	bne.n	800adca <_printf_float+0x2ca>
 800adc8:	e6f6      	b.n	800abb8 <_printf_float+0xb8>
 800adca:	930c      	str	r3, [sp, #48]	@ 0x30
 800adcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800adce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800add0:	425b      	negs	r3, r3
 800add2:	4293      	cmp	r3, r2
 800add4:	dc01      	bgt.n	800adda <_printf_float+0x2da>
 800add6:	0033      	movs	r3, r6
 800add8:	e792      	b.n	800ad00 <_printf_float+0x200>
 800adda:	002a      	movs	r2, r5
 800addc:	2301      	movs	r3, #1
 800adde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ade0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ade2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ade4:	321a      	adds	r2, #26
 800ade6:	47a0      	blx	r4
 800ade8:	3001      	adds	r0, #1
 800adea:	d100      	bne.n	800adee <_printf_float+0x2ee>
 800adec:	e6e4      	b.n	800abb8 <_printf_float+0xb8>
 800adee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800adf0:	3301      	adds	r3, #1
 800adf2:	e7ea      	b.n	800adca <_printf_float+0x2ca>
 800adf4:	7fefffff 	.word	0x7fefffff
 800adf8:	0800d910 	.word	0x0800d910
 800adfc:	0800d914 	.word	0x0800d914
 800ae00:	0800d918 	.word	0x0800d918
 800ae04:	0800d91c 	.word	0x0800d91c
 800ae08:	0800d920 	.word	0x0800d920
 800ae0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae0e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ae10:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae12:	429e      	cmp	r6, r3
 800ae14:	dd00      	ble.n	800ae18 <_printf_float+0x318>
 800ae16:	001e      	movs	r6, r3
 800ae18:	2e00      	cmp	r6, #0
 800ae1a:	dc31      	bgt.n	800ae80 <_printf_float+0x380>
 800ae1c:	43f3      	mvns	r3, r6
 800ae1e:	2400      	movs	r4, #0
 800ae20:	17db      	asrs	r3, r3, #31
 800ae22:	4033      	ands	r3, r6
 800ae24:	930e      	str	r3, [sp, #56]	@ 0x38
 800ae26:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ae28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae2a:	1af3      	subs	r3, r6, r3
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	dc30      	bgt.n	800ae92 <_printf_float+0x392>
 800ae30:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ae34:	429a      	cmp	r2, r3
 800ae36:	dc38      	bgt.n	800aeaa <_printf_float+0x3aa>
 800ae38:	682b      	ldr	r3, [r5, #0]
 800ae3a:	07db      	lsls	r3, r3, #31
 800ae3c:	d435      	bmi.n	800aeaa <_printf_float+0x3aa>
 800ae3e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800ae40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ae44:	1b9b      	subs	r3, r3, r6
 800ae46:	1b14      	subs	r4, r2, r4
 800ae48:	429c      	cmp	r4, r3
 800ae4a:	dd00      	ble.n	800ae4e <_printf_float+0x34e>
 800ae4c:	001c      	movs	r4, r3
 800ae4e:	2c00      	cmp	r4, #0
 800ae50:	dc34      	bgt.n	800aebc <_printf_float+0x3bc>
 800ae52:	43e3      	mvns	r3, r4
 800ae54:	2600      	movs	r6, #0
 800ae56:	17db      	asrs	r3, r3, #31
 800ae58:	401c      	ands	r4, r3
 800ae5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	1b1b      	subs	r3, r3, r4
 800ae62:	42b3      	cmp	r3, r6
 800ae64:	dc00      	bgt.n	800ae68 <_printf_float+0x368>
 800ae66:	e77c      	b.n	800ad62 <_printf_float+0x262>
 800ae68:	002a      	movs	r2, r5
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae70:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ae72:	321a      	adds	r2, #26
 800ae74:	47b8      	blx	r7
 800ae76:	3001      	adds	r0, #1
 800ae78:	d100      	bne.n	800ae7c <_printf_float+0x37c>
 800ae7a:	e69d      	b.n	800abb8 <_printf_float+0xb8>
 800ae7c:	3601      	adds	r6, #1
 800ae7e:	e7ec      	b.n	800ae5a <_printf_float+0x35a>
 800ae80:	0033      	movs	r3, r6
 800ae82:	003a      	movs	r2, r7
 800ae84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ae8a:	47a0      	blx	r4
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	d1c5      	bne.n	800ae1c <_printf_float+0x31c>
 800ae90:	e692      	b.n	800abb8 <_printf_float+0xb8>
 800ae92:	002a      	movs	r2, r5
 800ae94:	2301      	movs	r3, #1
 800ae96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae9a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ae9c:	321a      	adds	r2, #26
 800ae9e:	47b0      	blx	r6
 800aea0:	3001      	adds	r0, #1
 800aea2:	d100      	bne.n	800aea6 <_printf_float+0x3a6>
 800aea4:	e688      	b.n	800abb8 <_printf_float+0xb8>
 800aea6:	3401      	adds	r4, #1
 800aea8:	e7bd      	b.n	800ae26 <_printf_float+0x326>
 800aeaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aeae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aeb0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aeb2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800aeb4:	47a0      	blx	r4
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	d1c1      	bne.n	800ae3e <_printf_float+0x33e>
 800aeba:	e67d      	b.n	800abb8 <_printf_float+0xb8>
 800aebc:	19ba      	adds	r2, r7, r6
 800aebe:	0023      	movs	r3, r4
 800aec0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aec4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aec6:	47b0      	blx	r6
 800aec8:	3001      	adds	r0, #1
 800aeca:	d1c2      	bne.n	800ae52 <_printf_float+0x352>
 800aecc:	e674      	b.n	800abb8 <_printf_float+0xb8>
 800aece:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aed0:	930c      	str	r3, [sp, #48]	@ 0x30
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	dc02      	bgt.n	800aedc <_printf_float+0x3dc>
 800aed6:	2301      	movs	r3, #1
 800aed8:	421a      	tst	r2, r3
 800aeda:	d039      	beq.n	800af50 <_printf_float+0x450>
 800aedc:	2301      	movs	r3, #1
 800aede:	003a      	movs	r2, r7
 800aee0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aee4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aee6:	47b0      	blx	r6
 800aee8:	3001      	adds	r0, #1
 800aeea:	d100      	bne.n	800aeee <_printf_float+0x3ee>
 800aeec:	e664      	b.n	800abb8 <_printf_float+0xb8>
 800aeee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aef0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aef2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aef4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aef6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aef8:	47b0      	blx	r6
 800aefa:	3001      	adds	r0, #1
 800aefc:	d100      	bne.n	800af00 <_printf_float+0x400>
 800aefe:	e65b      	b.n	800abb8 <_printf_float+0xb8>
 800af00:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800af02:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800af04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af06:	2200      	movs	r2, #0
 800af08:	3b01      	subs	r3, #1
 800af0a:	930c      	str	r3, [sp, #48]	@ 0x30
 800af0c:	2300      	movs	r3, #0
 800af0e:	f7f5 fa9b 	bl	8000448 <__aeabi_dcmpeq>
 800af12:	2800      	cmp	r0, #0
 800af14:	d11a      	bne.n	800af4c <_printf_float+0x44c>
 800af16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af18:	1c7a      	adds	r2, r7, #1
 800af1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af1e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800af20:	47b0      	blx	r6
 800af22:	3001      	adds	r0, #1
 800af24:	d10e      	bne.n	800af44 <_printf_float+0x444>
 800af26:	e647      	b.n	800abb8 <_printf_float+0xb8>
 800af28:	002a      	movs	r2, r5
 800af2a:	2301      	movs	r3, #1
 800af2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af30:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800af32:	321a      	adds	r2, #26
 800af34:	47b8      	blx	r7
 800af36:	3001      	adds	r0, #1
 800af38:	d100      	bne.n	800af3c <_printf_float+0x43c>
 800af3a:	e63d      	b.n	800abb8 <_printf_float+0xb8>
 800af3c:	3601      	adds	r6, #1
 800af3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af40:	429e      	cmp	r6, r3
 800af42:	dbf1      	blt.n	800af28 <_printf_float+0x428>
 800af44:	002a      	movs	r2, r5
 800af46:	0023      	movs	r3, r4
 800af48:	3250      	adds	r2, #80	@ 0x50
 800af4a:	e6da      	b.n	800ad02 <_printf_float+0x202>
 800af4c:	2600      	movs	r6, #0
 800af4e:	e7f6      	b.n	800af3e <_printf_float+0x43e>
 800af50:	003a      	movs	r2, r7
 800af52:	e7e2      	b.n	800af1a <_printf_float+0x41a>
 800af54:	002a      	movs	r2, r5
 800af56:	2301      	movs	r3, #1
 800af58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af5c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800af5e:	3219      	adds	r2, #25
 800af60:	47b0      	blx	r6
 800af62:	3001      	adds	r0, #1
 800af64:	d100      	bne.n	800af68 <_printf_float+0x468>
 800af66:	e627      	b.n	800abb8 <_printf_float+0xb8>
 800af68:	3401      	adds	r4, #1
 800af6a:	68eb      	ldr	r3, [r5, #12]
 800af6c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800af6e:	1a9b      	subs	r3, r3, r2
 800af70:	42a3      	cmp	r3, r4
 800af72:	dcef      	bgt.n	800af54 <_printf_float+0x454>
 800af74:	e6f9      	b.n	800ad6a <_printf_float+0x26a>
 800af76:	2400      	movs	r4, #0
 800af78:	e7f7      	b.n	800af6a <_printf_float+0x46a>
 800af7a:	46c0      	nop			@ (mov r8, r8)

0800af7c <_printf_common>:
 800af7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af7e:	0016      	movs	r6, r2
 800af80:	9301      	str	r3, [sp, #4]
 800af82:	688a      	ldr	r2, [r1, #8]
 800af84:	690b      	ldr	r3, [r1, #16]
 800af86:	000c      	movs	r4, r1
 800af88:	9000      	str	r0, [sp, #0]
 800af8a:	4293      	cmp	r3, r2
 800af8c:	da00      	bge.n	800af90 <_printf_common+0x14>
 800af8e:	0013      	movs	r3, r2
 800af90:	0022      	movs	r2, r4
 800af92:	6033      	str	r3, [r6, #0]
 800af94:	3243      	adds	r2, #67	@ 0x43
 800af96:	7812      	ldrb	r2, [r2, #0]
 800af98:	2a00      	cmp	r2, #0
 800af9a:	d001      	beq.n	800afa0 <_printf_common+0x24>
 800af9c:	3301      	adds	r3, #1
 800af9e:	6033      	str	r3, [r6, #0]
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	069b      	lsls	r3, r3, #26
 800afa4:	d502      	bpl.n	800afac <_printf_common+0x30>
 800afa6:	6833      	ldr	r3, [r6, #0]
 800afa8:	3302      	adds	r3, #2
 800afaa:	6033      	str	r3, [r6, #0]
 800afac:	6822      	ldr	r2, [r4, #0]
 800afae:	2306      	movs	r3, #6
 800afb0:	0015      	movs	r5, r2
 800afb2:	401d      	ands	r5, r3
 800afb4:	421a      	tst	r2, r3
 800afb6:	d027      	beq.n	800b008 <_printf_common+0x8c>
 800afb8:	0023      	movs	r3, r4
 800afba:	3343      	adds	r3, #67	@ 0x43
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	1e5a      	subs	r2, r3, #1
 800afc0:	4193      	sbcs	r3, r2
 800afc2:	6822      	ldr	r2, [r4, #0]
 800afc4:	0692      	lsls	r2, r2, #26
 800afc6:	d430      	bmi.n	800b02a <_printf_common+0xae>
 800afc8:	0022      	movs	r2, r4
 800afca:	9901      	ldr	r1, [sp, #4]
 800afcc:	9800      	ldr	r0, [sp, #0]
 800afce:	9d08      	ldr	r5, [sp, #32]
 800afd0:	3243      	adds	r2, #67	@ 0x43
 800afd2:	47a8      	blx	r5
 800afd4:	3001      	adds	r0, #1
 800afd6:	d025      	beq.n	800b024 <_printf_common+0xa8>
 800afd8:	2206      	movs	r2, #6
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	2500      	movs	r5, #0
 800afde:	4013      	ands	r3, r2
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	d105      	bne.n	800aff0 <_printf_common+0x74>
 800afe4:	6833      	ldr	r3, [r6, #0]
 800afe6:	68e5      	ldr	r5, [r4, #12]
 800afe8:	1aed      	subs	r5, r5, r3
 800afea:	43eb      	mvns	r3, r5
 800afec:	17db      	asrs	r3, r3, #31
 800afee:	401d      	ands	r5, r3
 800aff0:	68a3      	ldr	r3, [r4, #8]
 800aff2:	6922      	ldr	r2, [r4, #16]
 800aff4:	4293      	cmp	r3, r2
 800aff6:	dd01      	ble.n	800affc <_printf_common+0x80>
 800aff8:	1a9b      	subs	r3, r3, r2
 800affa:	18ed      	adds	r5, r5, r3
 800affc:	2600      	movs	r6, #0
 800affe:	42b5      	cmp	r5, r6
 800b000:	d120      	bne.n	800b044 <_printf_common+0xc8>
 800b002:	2000      	movs	r0, #0
 800b004:	e010      	b.n	800b028 <_printf_common+0xac>
 800b006:	3501      	adds	r5, #1
 800b008:	68e3      	ldr	r3, [r4, #12]
 800b00a:	6832      	ldr	r2, [r6, #0]
 800b00c:	1a9b      	subs	r3, r3, r2
 800b00e:	42ab      	cmp	r3, r5
 800b010:	ddd2      	ble.n	800afb8 <_printf_common+0x3c>
 800b012:	0022      	movs	r2, r4
 800b014:	2301      	movs	r3, #1
 800b016:	9901      	ldr	r1, [sp, #4]
 800b018:	9800      	ldr	r0, [sp, #0]
 800b01a:	9f08      	ldr	r7, [sp, #32]
 800b01c:	3219      	adds	r2, #25
 800b01e:	47b8      	blx	r7
 800b020:	3001      	adds	r0, #1
 800b022:	d1f0      	bne.n	800b006 <_printf_common+0x8a>
 800b024:	2001      	movs	r0, #1
 800b026:	4240      	negs	r0, r0
 800b028:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b02a:	2030      	movs	r0, #48	@ 0x30
 800b02c:	18e1      	adds	r1, r4, r3
 800b02e:	3143      	adds	r1, #67	@ 0x43
 800b030:	7008      	strb	r0, [r1, #0]
 800b032:	0021      	movs	r1, r4
 800b034:	1c5a      	adds	r2, r3, #1
 800b036:	3145      	adds	r1, #69	@ 0x45
 800b038:	7809      	ldrb	r1, [r1, #0]
 800b03a:	18a2      	adds	r2, r4, r2
 800b03c:	3243      	adds	r2, #67	@ 0x43
 800b03e:	3302      	adds	r3, #2
 800b040:	7011      	strb	r1, [r2, #0]
 800b042:	e7c1      	b.n	800afc8 <_printf_common+0x4c>
 800b044:	0022      	movs	r2, r4
 800b046:	2301      	movs	r3, #1
 800b048:	9901      	ldr	r1, [sp, #4]
 800b04a:	9800      	ldr	r0, [sp, #0]
 800b04c:	9f08      	ldr	r7, [sp, #32]
 800b04e:	321a      	adds	r2, #26
 800b050:	47b8      	blx	r7
 800b052:	3001      	adds	r0, #1
 800b054:	d0e6      	beq.n	800b024 <_printf_common+0xa8>
 800b056:	3601      	adds	r6, #1
 800b058:	e7d1      	b.n	800affe <_printf_common+0x82>
	...

0800b05c <_printf_i>:
 800b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b05e:	b08b      	sub	sp, #44	@ 0x2c
 800b060:	9206      	str	r2, [sp, #24]
 800b062:	000a      	movs	r2, r1
 800b064:	3243      	adds	r2, #67	@ 0x43
 800b066:	9307      	str	r3, [sp, #28]
 800b068:	9005      	str	r0, [sp, #20]
 800b06a:	9203      	str	r2, [sp, #12]
 800b06c:	7e0a      	ldrb	r2, [r1, #24]
 800b06e:	000c      	movs	r4, r1
 800b070:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b072:	2a78      	cmp	r2, #120	@ 0x78
 800b074:	d809      	bhi.n	800b08a <_printf_i+0x2e>
 800b076:	2a62      	cmp	r2, #98	@ 0x62
 800b078:	d80b      	bhi.n	800b092 <_printf_i+0x36>
 800b07a:	2a00      	cmp	r2, #0
 800b07c:	d100      	bne.n	800b080 <_printf_i+0x24>
 800b07e:	e0bc      	b.n	800b1fa <_printf_i+0x19e>
 800b080:	497b      	ldr	r1, [pc, #492]	@ (800b270 <_printf_i+0x214>)
 800b082:	9104      	str	r1, [sp, #16]
 800b084:	2a58      	cmp	r2, #88	@ 0x58
 800b086:	d100      	bne.n	800b08a <_printf_i+0x2e>
 800b088:	e090      	b.n	800b1ac <_printf_i+0x150>
 800b08a:	0025      	movs	r5, r4
 800b08c:	3542      	adds	r5, #66	@ 0x42
 800b08e:	702a      	strb	r2, [r5, #0]
 800b090:	e022      	b.n	800b0d8 <_printf_i+0x7c>
 800b092:	0010      	movs	r0, r2
 800b094:	3863      	subs	r0, #99	@ 0x63
 800b096:	2815      	cmp	r0, #21
 800b098:	d8f7      	bhi.n	800b08a <_printf_i+0x2e>
 800b09a:	f7f5 f845 	bl	8000128 <__gnu_thumb1_case_shi>
 800b09e:	0016      	.short	0x0016
 800b0a0:	fff6001f 	.word	0xfff6001f
 800b0a4:	fff6fff6 	.word	0xfff6fff6
 800b0a8:	001ffff6 	.word	0x001ffff6
 800b0ac:	fff6fff6 	.word	0xfff6fff6
 800b0b0:	fff6fff6 	.word	0xfff6fff6
 800b0b4:	003600a1 	.word	0x003600a1
 800b0b8:	fff60080 	.word	0xfff60080
 800b0bc:	00b2fff6 	.word	0x00b2fff6
 800b0c0:	0036fff6 	.word	0x0036fff6
 800b0c4:	fff6fff6 	.word	0xfff6fff6
 800b0c8:	0084      	.short	0x0084
 800b0ca:	0025      	movs	r5, r4
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	3542      	adds	r5, #66	@ 0x42
 800b0d0:	1d11      	adds	r1, r2, #4
 800b0d2:	6019      	str	r1, [r3, #0]
 800b0d4:	6813      	ldr	r3, [r2, #0]
 800b0d6:	702b      	strb	r3, [r5, #0]
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e0a0      	b.n	800b21e <_printf_i+0x1c2>
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	6809      	ldr	r1, [r1, #0]
 800b0e0:	1d02      	adds	r2, r0, #4
 800b0e2:	060d      	lsls	r5, r1, #24
 800b0e4:	d50b      	bpl.n	800b0fe <_printf_i+0xa2>
 800b0e6:	6806      	ldr	r6, [r0, #0]
 800b0e8:	601a      	str	r2, [r3, #0]
 800b0ea:	2e00      	cmp	r6, #0
 800b0ec:	da03      	bge.n	800b0f6 <_printf_i+0x9a>
 800b0ee:	232d      	movs	r3, #45	@ 0x2d
 800b0f0:	9a03      	ldr	r2, [sp, #12]
 800b0f2:	4276      	negs	r6, r6
 800b0f4:	7013      	strb	r3, [r2, #0]
 800b0f6:	4b5e      	ldr	r3, [pc, #376]	@ (800b270 <_printf_i+0x214>)
 800b0f8:	270a      	movs	r7, #10
 800b0fa:	9304      	str	r3, [sp, #16]
 800b0fc:	e018      	b.n	800b130 <_printf_i+0xd4>
 800b0fe:	6806      	ldr	r6, [r0, #0]
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	0649      	lsls	r1, r1, #25
 800b104:	d5f1      	bpl.n	800b0ea <_printf_i+0x8e>
 800b106:	b236      	sxth	r6, r6
 800b108:	e7ef      	b.n	800b0ea <_printf_i+0x8e>
 800b10a:	6808      	ldr	r0, [r1, #0]
 800b10c:	6819      	ldr	r1, [r3, #0]
 800b10e:	c940      	ldmia	r1!, {r6}
 800b110:	0605      	lsls	r5, r0, #24
 800b112:	d402      	bmi.n	800b11a <_printf_i+0xbe>
 800b114:	0640      	lsls	r0, r0, #25
 800b116:	d500      	bpl.n	800b11a <_printf_i+0xbe>
 800b118:	b2b6      	uxth	r6, r6
 800b11a:	6019      	str	r1, [r3, #0]
 800b11c:	4b54      	ldr	r3, [pc, #336]	@ (800b270 <_printf_i+0x214>)
 800b11e:	270a      	movs	r7, #10
 800b120:	9304      	str	r3, [sp, #16]
 800b122:	2a6f      	cmp	r2, #111	@ 0x6f
 800b124:	d100      	bne.n	800b128 <_printf_i+0xcc>
 800b126:	3f02      	subs	r7, #2
 800b128:	0023      	movs	r3, r4
 800b12a:	2200      	movs	r2, #0
 800b12c:	3343      	adds	r3, #67	@ 0x43
 800b12e:	701a      	strb	r2, [r3, #0]
 800b130:	6863      	ldr	r3, [r4, #4]
 800b132:	60a3      	str	r3, [r4, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	db03      	blt.n	800b140 <_printf_i+0xe4>
 800b138:	2104      	movs	r1, #4
 800b13a:	6822      	ldr	r2, [r4, #0]
 800b13c:	438a      	bics	r2, r1
 800b13e:	6022      	str	r2, [r4, #0]
 800b140:	2e00      	cmp	r6, #0
 800b142:	d102      	bne.n	800b14a <_printf_i+0xee>
 800b144:	9d03      	ldr	r5, [sp, #12]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00c      	beq.n	800b164 <_printf_i+0x108>
 800b14a:	9d03      	ldr	r5, [sp, #12]
 800b14c:	0030      	movs	r0, r6
 800b14e:	0039      	movs	r1, r7
 800b150:	f7f5 f87a 	bl	8000248 <__aeabi_uidivmod>
 800b154:	9b04      	ldr	r3, [sp, #16]
 800b156:	3d01      	subs	r5, #1
 800b158:	5c5b      	ldrb	r3, [r3, r1]
 800b15a:	702b      	strb	r3, [r5, #0]
 800b15c:	0033      	movs	r3, r6
 800b15e:	0006      	movs	r6, r0
 800b160:	429f      	cmp	r7, r3
 800b162:	d9f3      	bls.n	800b14c <_printf_i+0xf0>
 800b164:	2f08      	cmp	r7, #8
 800b166:	d109      	bne.n	800b17c <_printf_i+0x120>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	07db      	lsls	r3, r3, #31
 800b16c:	d506      	bpl.n	800b17c <_printf_i+0x120>
 800b16e:	6862      	ldr	r2, [r4, #4]
 800b170:	6923      	ldr	r3, [r4, #16]
 800b172:	429a      	cmp	r2, r3
 800b174:	dc02      	bgt.n	800b17c <_printf_i+0x120>
 800b176:	2330      	movs	r3, #48	@ 0x30
 800b178:	3d01      	subs	r5, #1
 800b17a:	702b      	strb	r3, [r5, #0]
 800b17c:	9b03      	ldr	r3, [sp, #12]
 800b17e:	1b5b      	subs	r3, r3, r5
 800b180:	6123      	str	r3, [r4, #16]
 800b182:	9b07      	ldr	r3, [sp, #28]
 800b184:	0021      	movs	r1, r4
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	9805      	ldr	r0, [sp, #20]
 800b18a:	9b06      	ldr	r3, [sp, #24]
 800b18c:	aa09      	add	r2, sp, #36	@ 0x24
 800b18e:	f7ff fef5 	bl	800af7c <_printf_common>
 800b192:	3001      	adds	r0, #1
 800b194:	d148      	bne.n	800b228 <_printf_i+0x1cc>
 800b196:	2001      	movs	r0, #1
 800b198:	4240      	negs	r0, r0
 800b19a:	b00b      	add	sp, #44	@ 0x2c
 800b19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b19e:	2220      	movs	r2, #32
 800b1a0:	6809      	ldr	r1, [r1, #0]
 800b1a2:	430a      	orrs	r2, r1
 800b1a4:	6022      	str	r2, [r4, #0]
 800b1a6:	2278      	movs	r2, #120	@ 0x78
 800b1a8:	4932      	ldr	r1, [pc, #200]	@ (800b274 <_printf_i+0x218>)
 800b1aa:	9104      	str	r1, [sp, #16]
 800b1ac:	0021      	movs	r1, r4
 800b1ae:	3145      	adds	r1, #69	@ 0x45
 800b1b0:	700a      	strb	r2, [r1, #0]
 800b1b2:	6819      	ldr	r1, [r3, #0]
 800b1b4:	6822      	ldr	r2, [r4, #0]
 800b1b6:	c940      	ldmia	r1!, {r6}
 800b1b8:	0610      	lsls	r0, r2, #24
 800b1ba:	d402      	bmi.n	800b1c2 <_printf_i+0x166>
 800b1bc:	0650      	lsls	r0, r2, #25
 800b1be:	d500      	bpl.n	800b1c2 <_printf_i+0x166>
 800b1c0:	b2b6      	uxth	r6, r6
 800b1c2:	6019      	str	r1, [r3, #0]
 800b1c4:	07d3      	lsls	r3, r2, #31
 800b1c6:	d502      	bpl.n	800b1ce <_printf_i+0x172>
 800b1c8:	2320      	movs	r3, #32
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	2e00      	cmp	r6, #0
 800b1d0:	d001      	beq.n	800b1d6 <_printf_i+0x17a>
 800b1d2:	2710      	movs	r7, #16
 800b1d4:	e7a8      	b.n	800b128 <_printf_i+0xcc>
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	4393      	bics	r3, r2
 800b1dc:	6023      	str	r3, [r4, #0]
 800b1de:	e7f8      	b.n	800b1d2 <_printf_i+0x176>
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	680d      	ldr	r5, [r1, #0]
 800b1e4:	1d10      	adds	r0, r2, #4
 800b1e6:	6949      	ldr	r1, [r1, #20]
 800b1e8:	6018      	str	r0, [r3, #0]
 800b1ea:	6813      	ldr	r3, [r2, #0]
 800b1ec:	062e      	lsls	r6, r5, #24
 800b1ee:	d501      	bpl.n	800b1f4 <_printf_i+0x198>
 800b1f0:	6019      	str	r1, [r3, #0]
 800b1f2:	e002      	b.n	800b1fa <_printf_i+0x19e>
 800b1f4:	066d      	lsls	r5, r5, #25
 800b1f6:	d5fb      	bpl.n	800b1f0 <_printf_i+0x194>
 800b1f8:	8019      	strh	r1, [r3, #0]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	9d03      	ldr	r5, [sp, #12]
 800b1fe:	6123      	str	r3, [r4, #16]
 800b200:	e7bf      	b.n	800b182 <_printf_i+0x126>
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	1d11      	adds	r1, r2, #4
 800b206:	6019      	str	r1, [r3, #0]
 800b208:	6815      	ldr	r5, [r2, #0]
 800b20a:	2100      	movs	r1, #0
 800b20c:	0028      	movs	r0, r5
 800b20e:	6862      	ldr	r2, [r4, #4]
 800b210:	f000 fa37 	bl	800b682 <memchr>
 800b214:	2800      	cmp	r0, #0
 800b216:	d001      	beq.n	800b21c <_printf_i+0x1c0>
 800b218:	1b40      	subs	r0, r0, r5
 800b21a:	6060      	str	r0, [r4, #4]
 800b21c:	6863      	ldr	r3, [r4, #4]
 800b21e:	6123      	str	r3, [r4, #16]
 800b220:	2300      	movs	r3, #0
 800b222:	9a03      	ldr	r2, [sp, #12]
 800b224:	7013      	strb	r3, [r2, #0]
 800b226:	e7ac      	b.n	800b182 <_printf_i+0x126>
 800b228:	002a      	movs	r2, r5
 800b22a:	6923      	ldr	r3, [r4, #16]
 800b22c:	9906      	ldr	r1, [sp, #24]
 800b22e:	9805      	ldr	r0, [sp, #20]
 800b230:	9d07      	ldr	r5, [sp, #28]
 800b232:	47a8      	blx	r5
 800b234:	3001      	adds	r0, #1
 800b236:	d0ae      	beq.n	800b196 <_printf_i+0x13a>
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	079b      	lsls	r3, r3, #30
 800b23c:	d415      	bmi.n	800b26a <_printf_i+0x20e>
 800b23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b240:	68e0      	ldr	r0, [r4, #12]
 800b242:	4298      	cmp	r0, r3
 800b244:	daa9      	bge.n	800b19a <_printf_i+0x13e>
 800b246:	0018      	movs	r0, r3
 800b248:	e7a7      	b.n	800b19a <_printf_i+0x13e>
 800b24a:	0022      	movs	r2, r4
 800b24c:	2301      	movs	r3, #1
 800b24e:	9906      	ldr	r1, [sp, #24]
 800b250:	9805      	ldr	r0, [sp, #20]
 800b252:	9e07      	ldr	r6, [sp, #28]
 800b254:	3219      	adds	r2, #25
 800b256:	47b0      	blx	r6
 800b258:	3001      	adds	r0, #1
 800b25a:	d09c      	beq.n	800b196 <_printf_i+0x13a>
 800b25c:	3501      	adds	r5, #1
 800b25e:	68e3      	ldr	r3, [r4, #12]
 800b260:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b262:	1a9b      	subs	r3, r3, r2
 800b264:	42ab      	cmp	r3, r5
 800b266:	dcf0      	bgt.n	800b24a <_printf_i+0x1ee>
 800b268:	e7e9      	b.n	800b23e <_printf_i+0x1e2>
 800b26a:	2500      	movs	r5, #0
 800b26c:	e7f7      	b.n	800b25e <_printf_i+0x202>
 800b26e:	46c0      	nop			@ (mov r8, r8)
 800b270:	0800d922 	.word	0x0800d922
 800b274:	0800d933 	.word	0x0800d933

0800b278 <std>:
 800b278:	2300      	movs	r3, #0
 800b27a:	b510      	push	{r4, lr}
 800b27c:	0004      	movs	r4, r0
 800b27e:	6003      	str	r3, [r0, #0]
 800b280:	6043      	str	r3, [r0, #4]
 800b282:	6083      	str	r3, [r0, #8]
 800b284:	8181      	strh	r1, [r0, #12]
 800b286:	6643      	str	r3, [r0, #100]	@ 0x64
 800b288:	81c2      	strh	r2, [r0, #14]
 800b28a:	6103      	str	r3, [r0, #16]
 800b28c:	6143      	str	r3, [r0, #20]
 800b28e:	6183      	str	r3, [r0, #24]
 800b290:	0019      	movs	r1, r3
 800b292:	2208      	movs	r2, #8
 800b294:	305c      	adds	r0, #92	@ 0x5c
 800b296:	f000 f953 	bl	800b540 <memset>
 800b29a:	4b0b      	ldr	r3, [pc, #44]	@ (800b2c8 <std+0x50>)
 800b29c:	6224      	str	r4, [r4, #32]
 800b29e:	6263      	str	r3, [r4, #36]	@ 0x24
 800b2a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b2cc <std+0x54>)
 800b2a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b2d0 <std+0x58>)
 800b2a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b2d4 <std+0x5c>)
 800b2aa:	6323      	str	r3, [r4, #48]	@ 0x30
 800b2ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b2d8 <std+0x60>)
 800b2ae:	429c      	cmp	r4, r3
 800b2b0:	d005      	beq.n	800b2be <std+0x46>
 800b2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b2dc <std+0x64>)
 800b2b4:	429c      	cmp	r4, r3
 800b2b6:	d002      	beq.n	800b2be <std+0x46>
 800b2b8:	4b09      	ldr	r3, [pc, #36]	@ (800b2e0 <std+0x68>)
 800b2ba:	429c      	cmp	r4, r3
 800b2bc:	d103      	bne.n	800b2c6 <std+0x4e>
 800b2be:	0020      	movs	r0, r4
 800b2c0:	3058      	adds	r0, #88	@ 0x58
 800b2c2:	f000 f9d3 	bl	800b66c <__retarget_lock_init_recursive>
 800b2c6:	bd10      	pop	{r4, pc}
 800b2c8:	0800b4a9 	.word	0x0800b4a9
 800b2cc:	0800b4d1 	.word	0x0800b4d1
 800b2d0:	0800b509 	.word	0x0800b509
 800b2d4:	0800b535 	.word	0x0800b535
 800b2d8:	20000788 	.word	0x20000788
 800b2dc:	200007f0 	.word	0x200007f0
 800b2e0:	20000858 	.word	0x20000858

0800b2e4 <stdio_exit_handler>:
 800b2e4:	b510      	push	{r4, lr}
 800b2e6:	4a03      	ldr	r2, [pc, #12]	@ (800b2f4 <stdio_exit_handler+0x10>)
 800b2e8:	4903      	ldr	r1, [pc, #12]	@ (800b2f8 <stdio_exit_handler+0x14>)
 800b2ea:	4804      	ldr	r0, [pc, #16]	@ (800b2fc <stdio_exit_handler+0x18>)
 800b2ec:	f000 f86c 	bl	800b3c8 <_fwalk_sglue>
 800b2f0:	bd10      	pop	{r4, pc}
 800b2f2:	46c0      	nop			@ (mov r8, r8)
 800b2f4:	20000020 	.word	0x20000020
 800b2f8:	0800cf41 	.word	0x0800cf41
 800b2fc:	20000030 	.word	0x20000030

0800b300 <cleanup_stdio>:
 800b300:	6841      	ldr	r1, [r0, #4]
 800b302:	4b0b      	ldr	r3, [pc, #44]	@ (800b330 <cleanup_stdio+0x30>)
 800b304:	b510      	push	{r4, lr}
 800b306:	0004      	movs	r4, r0
 800b308:	4299      	cmp	r1, r3
 800b30a:	d001      	beq.n	800b310 <cleanup_stdio+0x10>
 800b30c:	f001 fe18 	bl	800cf40 <_fflush_r>
 800b310:	68a1      	ldr	r1, [r4, #8]
 800b312:	4b08      	ldr	r3, [pc, #32]	@ (800b334 <cleanup_stdio+0x34>)
 800b314:	4299      	cmp	r1, r3
 800b316:	d002      	beq.n	800b31e <cleanup_stdio+0x1e>
 800b318:	0020      	movs	r0, r4
 800b31a:	f001 fe11 	bl	800cf40 <_fflush_r>
 800b31e:	68e1      	ldr	r1, [r4, #12]
 800b320:	4b05      	ldr	r3, [pc, #20]	@ (800b338 <cleanup_stdio+0x38>)
 800b322:	4299      	cmp	r1, r3
 800b324:	d002      	beq.n	800b32c <cleanup_stdio+0x2c>
 800b326:	0020      	movs	r0, r4
 800b328:	f001 fe0a 	bl	800cf40 <_fflush_r>
 800b32c:	bd10      	pop	{r4, pc}
 800b32e:	46c0      	nop			@ (mov r8, r8)
 800b330:	20000788 	.word	0x20000788
 800b334:	200007f0 	.word	0x200007f0
 800b338:	20000858 	.word	0x20000858

0800b33c <global_stdio_init.part.0>:
 800b33c:	b510      	push	{r4, lr}
 800b33e:	4b09      	ldr	r3, [pc, #36]	@ (800b364 <global_stdio_init.part.0+0x28>)
 800b340:	4a09      	ldr	r2, [pc, #36]	@ (800b368 <global_stdio_init.part.0+0x2c>)
 800b342:	2104      	movs	r1, #4
 800b344:	601a      	str	r2, [r3, #0]
 800b346:	4809      	ldr	r0, [pc, #36]	@ (800b36c <global_stdio_init.part.0+0x30>)
 800b348:	2200      	movs	r2, #0
 800b34a:	f7ff ff95 	bl	800b278 <std>
 800b34e:	2201      	movs	r2, #1
 800b350:	2109      	movs	r1, #9
 800b352:	4807      	ldr	r0, [pc, #28]	@ (800b370 <global_stdio_init.part.0+0x34>)
 800b354:	f7ff ff90 	bl	800b278 <std>
 800b358:	2202      	movs	r2, #2
 800b35a:	2112      	movs	r1, #18
 800b35c:	4805      	ldr	r0, [pc, #20]	@ (800b374 <global_stdio_init.part.0+0x38>)
 800b35e:	f7ff ff8b 	bl	800b278 <std>
 800b362:	bd10      	pop	{r4, pc}
 800b364:	200008c0 	.word	0x200008c0
 800b368:	0800b2e5 	.word	0x0800b2e5
 800b36c:	20000788 	.word	0x20000788
 800b370:	200007f0 	.word	0x200007f0
 800b374:	20000858 	.word	0x20000858

0800b378 <__sfp_lock_acquire>:
 800b378:	b510      	push	{r4, lr}
 800b37a:	4802      	ldr	r0, [pc, #8]	@ (800b384 <__sfp_lock_acquire+0xc>)
 800b37c:	f000 f977 	bl	800b66e <__retarget_lock_acquire_recursive>
 800b380:	bd10      	pop	{r4, pc}
 800b382:	46c0      	nop			@ (mov r8, r8)
 800b384:	200008c9 	.word	0x200008c9

0800b388 <__sfp_lock_release>:
 800b388:	b510      	push	{r4, lr}
 800b38a:	4802      	ldr	r0, [pc, #8]	@ (800b394 <__sfp_lock_release+0xc>)
 800b38c:	f000 f970 	bl	800b670 <__retarget_lock_release_recursive>
 800b390:	bd10      	pop	{r4, pc}
 800b392:	46c0      	nop			@ (mov r8, r8)
 800b394:	200008c9 	.word	0x200008c9

0800b398 <__sinit>:
 800b398:	b510      	push	{r4, lr}
 800b39a:	0004      	movs	r4, r0
 800b39c:	f7ff ffec 	bl	800b378 <__sfp_lock_acquire>
 800b3a0:	6a23      	ldr	r3, [r4, #32]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d002      	beq.n	800b3ac <__sinit+0x14>
 800b3a6:	f7ff ffef 	bl	800b388 <__sfp_lock_release>
 800b3aa:	bd10      	pop	{r4, pc}
 800b3ac:	4b04      	ldr	r3, [pc, #16]	@ (800b3c0 <__sinit+0x28>)
 800b3ae:	6223      	str	r3, [r4, #32]
 800b3b0:	4b04      	ldr	r3, [pc, #16]	@ (800b3c4 <__sinit+0x2c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1f6      	bne.n	800b3a6 <__sinit+0xe>
 800b3b8:	f7ff ffc0 	bl	800b33c <global_stdio_init.part.0>
 800b3bc:	e7f3      	b.n	800b3a6 <__sinit+0xe>
 800b3be:	46c0      	nop			@ (mov r8, r8)
 800b3c0:	0800b301 	.word	0x0800b301
 800b3c4:	200008c0 	.word	0x200008c0

0800b3c8 <_fwalk_sglue>:
 800b3c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3ca:	0014      	movs	r4, r2
 800b3cc:	2600      	movs	r6, #0
 800b3ce:	9000      	str	r0, [sp, #0]
 800b3d0:	9101      	str	r1, [sp, #4]
 800b3d2:	68a5      	ldr	r5, [r4, #8]
 800b3d4:	6867      	ldr	r7, [r4, #4]
 800b3d6:	3f01      	subs	r7, #1
 800b3d8:	d504      	bpl.n	800b3e4 <_fwalk_sglue+0x1c>
 800b3da:	6824      	ldr	r4, [r4, #0]
 800b3dc:	2c00      	cmp	r4, #0
 800b3de:	d1f8      	bne.n	800b3d2 <_fwalk_sglue+0xa>
 800b3e0:	0030      	movs	r0, r6
 800b3e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b3e4:	89ab      	ldrh	r3, [r5, #12]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d908      	bls.n	800b3fc <_fwalk_sglue+0x34>
 800b3ea:	220e      	movs	r2, #14
 800b3ec:	5eab      	ldrsh	r3, [r5, r2]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	d004      	beq.n	800b3fc <_fwalk_sglue+0x34>
 800b3f2:	0029      	movs	r1, r5
 800b3f4:	9800      	ldr	r0, [sp, #0]
 800b3f6:	9b01      	ldr	r3, [sp, #4]
 800b3f8:	4798      	blx	r3
 800b3fa:	4306      	orrs	r6, r0
 800b3fc:	3568      	adds	r5, #104	@ 0x68
 800b3fe:	e7ea      	b.n	800b3d6 <_fwalk_sglue+0xe>

0800b400 <sniprintf>:
 800b400:	b40c      	push	{r2, r3}
 800b402:	b530      	push	{r4, r5, lr}
 800b404:	4b17      	ldr	r3, [pc, #92]	@ (800b464 <sniprintf+0x64>)
 800b406:	000c      	movs	r4, r1
 800b408:	681d      	ldr	r5, [r3, #0]
 800b40a:	b09d      	sub	sp, #116	@ 0x74
 800b40c:	2900      	cmp	r1, #0
 800b40e:	da08      	bge.n	800b422 <sniprintf+0x22>
 800b410:	238b      	movs	r3, #139	@ 0x8b
 800b412:	2001      	movs	r0, #1
 800b414:	602b      	str	r3, [r5, #0]
 800b416:	4240      	negs	r0, r0
 800b418:	b01d      	add	sp, #116	@ 0x74
 800b41a:	bc30      	pop	{r4, r5}
 800b41c:	bc08      	pop	{r3}
 800b41e:	b002      	add	sp, #8
 800b420:	4718      	bx	r3
 800b422:	2382      	movs	r3, #130	@ 0x82
 800b424:	466a      	mov	r2, sp
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	8293      	strh	r3, [r2, #20]
 800b42a:	2300      	movs	r3, #0
 800b42c:	9002      	str	r0, [sp, #8]
 800b42e:	9006      	str	r0, [sp, #24]
 800b430:	4299      	cmp	r1, r3
 800b432:	d000      	beq.n	800b436 <sniprintf+0x36>
 800b434:	1e4b      	subs	r3, r1, #1
 800b436:	9304      	str	r3, [sp, #16]
 800b438:	9307      	str	r3, [sp, #28]
 800b43a:	2301      	movs	r3, #1
 800b43c:	466a      	mov	r2, sp
 800b43e:	425b      	negs	r3, r3
 800b440:	82d3      	strh	r3, [r2, #22]
 800b442:	0028      	movs	r0, r5
 800b444:	ab21      	add	r3, sp, #132	@ 0x84
 800b446:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b448:	a902      	add	r1, sp, #8
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	f001 fbf4 	bl	800cc38 <_svfiprintf_r>
 800b450:	1c43      	adds	r3, r0, #1
 800b452:	da01      	bge.n	800b458 <sniprintf+0x58>
 800b454:	238b      	movs	r3, #139	@ 0x8b
 800b456:	602b      	str	r3, [r5, #0]
 800b458:	2c00      	cmp	r4, #0
 800b45a:	d0dd      	beq.n	800b418 <sniprintf+0x18>
 800b45c:	2200      	movs	r2, #0
 800b45e:	9b02      	ldr	r3, [sp, #8]
 800b460:	701a      	strb	r2, [r3, #0]
 800b462:	e7d9      	b.n	800b418 <sniprintf+0x18>
 800b464:	2000002c 	.word	0x2000002c

0800b468 <siprintf>:
 800b468:	b40e      	push	{r1, r2, r3}
 800b46a:	b500      	push	{lr}
 800b46c:	490b      	ldr	r1, [pc, #44]	@ (800b49c <siprintf+0x34>)
 800b46e:	b09c      	sub	sp, #112	@ 0x70
 800b470:	ab1d      	add	r3, sp, #116	@ 0x74
 800b472:	9002      	str	r0, [sp, #8]
 800b474:	9006      	str	r0, [sp, #24]
 800b476:	9107      	str	r1, [sp, #28]
 800b478:	9104      	str	r1, [sp, #16]
 800b47a:	4809      	ldr	r0, [pc, #36]	@ (800b4a0 <siprintf+0x38>)
 800b47c:	4909      	ldr	r1, [pc, #36]	@ (800b4a4 <siprintf+0x3c>)
 800b47e:	cb04      	ldmia	r3!, {r2}
 800b480:	9105      	str	r1, [sp, #20]
 800b482:	6800      	ldr	r0, [r0, #0]
 800b484:	a902      	add	r1, sp, #8
 800b486:	9301      	str	r3, [sp, #4]
 800b488:	f001 fbd6 	bl	800cc38 <_svfiprintf_r>
 800b48c:	2200      	movs	r2, #0
 800b48e:	9b02      	ldr	r3, [sp, #8]
 800b490:	701a      	strb	r2, [r3, #0]
 800b492:	b01c      	add	sp, #112	@ 0x70
 800b494:	bc08      	pop	{r3}
 800b496:	b003      	add	sp, #12
 800b498:	4718      	bx	r3
 800b49a:	46c0      	nop			@ (mov r8, r8)
 800b49c:	7fffffff 	.word	0x7fffffff
 800b4a0:	2000002c 	.word	0x2000002c
 800b4a4:	ffff0208 	.word	0xffff0208

0800b4a8 <__sread>:
 800b4a8:	b570      	push	{r4, r5, r6, lr}
 800b4aa:	000c      	movs	r4, r1
 800b4ac:	250e      	movs	r5, #14
 800b4ae:	5f49      	ldrsh	r1, [r1, r5]
 800b4b0:	f000 f878 	bl	800b5a4 <_read_r>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	db03      	blt.n	800b4c0 <__sread+0x18>
 800b4b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b4ba:	181b      	adds	r3, r3, r0
 800b4bc:	6563      	str	r3, [r4, #84]	@ 0x54
 800b4be:	bd70      	pop	{r4, r5, r6, pc}
 800b4c0:	89a3      	ldrh	r3, [r4, #12]
 800b4c2:	4a02      	ldr	r2, [pc, #8]	@ (800b4cc <__sread+0x24>)
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	81a3      	strh	r3, [r4, #12]
 800b4c8:	e7f9      	b.n	800b4be <__sread+0x16>
 800b4ca:	46c0      	nop			@ (mov r8, r8)
 800b4cc:	ffffefff 	.word	0xffffefff

0800b4d0 <__swrite>:
 800b4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d2:	001f      	movs	r7, r3
 800b4d4:	898b      	ldrh	r3, [r1, #12]
 800b4d6:	0005      	movs	r5, r0
 800b4d8:	000c      	movs	r4, r1
 800b4da:	0016      	movs	r6, r2
 800b4dc:	05db      	lsls	r3, r3, #23
 800b4de:	d505      	bpl.n	800b4ec <__swrite+0x1c>
 800b4e0:	230e      	movs	r3, #14
 800b4e2:	5ec9      	ldrsh	r1, [r1, r3]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	f000 f848 	bl	800b57c <_lseek_r>
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	4a05      	ldr	r2, [pc, #20]	@ (800b504 <__swrite+0x34>)
 800b4f0:	0028      	movs	r0, r5
 800b4f2:	4013      	ands	r3, r2
 800b4f4:	81a3      	strh	r3, [r4, #12]
 800b4f6:	0032      	movs	r2, r6
 800b4f8:	230e      	movs	r3, #14
 800b4fa:	5ee1      	ldrsh	r1, [r4, r3]
 800b4fc:	003b      	movs	r3, r7
 800b4fe:	f000 f877 	bl	800b5f0 <_write_r>
 800b502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b504:	ffffefff 	.word	0xffffefff

0800b508 <__sseek>:
 800b508:	b570      	push	{r4, r5, r6, lr}
 800b50a:	000c      	movs	r4, r1
 800b50c:	250e      	movs	r5, #14
 800b50e:	5f49      	ldrsh	r1, [r1, r5]
 800b510:	f000 f834 	bl	800b57c <_lseek_r>
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	1c42      	adds	r2, r0, #1
 800b518:	d103      	bne.n	800b522 <__sseek+0x1a>
 800b51a:	4a05      	ldr	r2, [pc, #20]	@ (800b530 <__sseek+0x28>)
 800b51c:	4013      	ands	r3, r2
 800b51e:	81a3      	strh	r3, [r4, #12]
 800b520:	bd70      	pop	{r4, r5, r6, pc}
 800b522:	2280      	movs	r2, #128	@ 0x80
 800b524:	0152      	lsls	r2, r2, #5
 800b526:	4313      	orrs	r3, r2
 800b528:	81a3      	strh	r3, [r4, #12]
 800b52a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b52c:	e7f8      	b.n	800b520 <__sseek+0x18>
 800b52e:	46c0      	nop			@ (mov r8, r8)
 800b530:	ffffefff 	.word	0xffffefff

0800b534 <__sclose>:
 800b534:	b510      	push	{r4, lr}
 800b536:	230e      	movs	r3, #14
 800b538:	5ec9      	ldrsh	r1, [r1, r3]
 800b53a:	f000 f80d 	bl	800b558 <_close_r>
 800b53e:	bd10      	pop	{r4, pc}

0800b540 <memset>:
 800b540:	0003      	movs	r3, r0
 800b542:	1882      	adds	r2, r0, r2
 800b544:	4293      	cmp	r3, r2
 800b546:	d100      	bne.n	800b54a <memset+0xa>
 800b548:	4770      	bx	lr
 800b54a:	7019      	strb	r1, [r3, #0]
 800b54c:	3301      	adds	r3, #1
 800b54e:	e7f9      	b.n	800b544 <memset+0x4>

0800b550 <_localeconv_r>:
 800b550:	4800      	ldr	r0, [pc, #0]	@ (800b554 <_localeconv_r+0x4>)
 800b552:	4770      	bx	lr
 800b554:	2000016c 	.word	0x2000016c

0800b558 <_close_r>:
 800b558:	2300      	movs	r3, #0
 800b55a:	b570      	push	{r4, r5, r6, lr}
 800b55c:	4d06      	ldr	r5, [pc, #24]	@ (800b578 <_close_r+0x20>)
 800b55e:	0004      	movs	r4, r0
 800b560:	0008      	movs	r0, r1
 800b562:	602b      	str	r3, [r5, #0]
 800b564:	f7f8 ff38 	bl	80043d8 <_close>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	d103      	bne.n	800b574 <_close_r+0x1c>
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d000      	beq.n	800b574 <_close_r+0x1c>
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	bd70      	pop	{r4, r5, r6, pc}
 800b576:	46c0      	nop			@ (mov r8, r8)
 800b578:	200008c4 	.word	0x200008c4

0800b57c <_lseek_r>:
 800b57c:	b570      	push	{r4, r5, r6, lr}
 800b57e:	0004      	movs	r4, r0
 800b580:	0008      	movs	r0, r1
 800b582:	0011      	movs	r1, r2
 800b584:	001a      	movs	r2, r3
 800b586:	2300      	movs	r3, #0
 800b588:	4d05      	ldr	r5, [pc, #20]	@ (800b5a0 <_lseek_r+0x24>)
 800b58a:	602b      	str	r3, [r5, #0]
 800b58c:	f7f8 ff45 	bl	800441a <_lseek>
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	d103      	bne.n	800b59c <_lseek_r+0x20>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d000      	beq.n	800b59c <_lseek_r+0x20>
 800b59a:	6023      	str	r3, [r4, #0]
 800b59c:	bd70      	pop	{r4, r5, r6, pc}
 800b59e:	46c0      	nop			@ (mov r8, r8)
 800b5a0:	200008c4 	.word	0x200008c4

0800b5a4 <_read_r>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	0004      	movs	r4, r0
 800b5a8:	0008      	movs	r0, r1
 800b5aa:	0011      	movs	r1, r2
 800b5ac:	001a      	movs	r2, r3
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	4d05      	ldr	r5, [pc, #20]	@ (800b5c8 <_read_r+0x24>)
 800b5b2:	602b      	str	r3, [r5, #0]
 800b5b4:	f7f8 fed7 	bl	8004366 <_read>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d103      	bne.n	800b5c4 <_read_r+0x20>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d000      	beq.n	800b5c4 <_read_r+0x20>
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	bd70      	pop	{r4, r5, r6, pc}
 800b5c6:	46c0      	nop			@ (mov r8, r8)
 800b5c8:	200008c4 	.word	0x200008c4

0800b5cc <_sbrk_r>:
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	b570      	push	{r4, r5, r6, lr}
 800b5d0:	4d06      	ldr	r5, [pc, #24]	@ (800b5ec <_sbrk_r+0x20>)
 800b5d2:	0004      	movs	r4, r0
 800b5d4:	0008      	movs	r0, r1
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	f7f8 ff2a 	bl	8004430 <_sbrk>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d103      	bne.n	800b5e8 <_sbrk_r+0x1c>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d000      	beq.n	800b5e8 <_sbrk_r+0x1c>
 800b5e6:	6023      	str	r3, [r4, #0]
 800b5e8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ea:	46c0      	nop			@ (mov r8, r8)
 800b5ec:	200008c4 	.word	0x200008c4

0800b5f0 <_write_r>:
 800b5f0:	b570      	push	{r4, r5, r6, lr}
 800b5f2:	0004      	movs	r4, r0
 800b5f4:	0008      	movs	r0, r1
 800b5f6:	0011      	movs	r1, r2
 800b5f8:	001a      	movs	r2, r3
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	4d05      	ldr	r5, [pc, #20]	@ (800b614 <_write_r+0x24>)
 800b5fe:	602b      	str	r3, [r5, #0]
 800b600:	f7f8 fece 	bl	80043a0 <_write>
 800b604:	1c43      	adds	r3, r0, #1
 800b606:	d103      	bne.n	800b610 <_write_r+0x20>
 800b608:	682b      	ldr	r3, [r5, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d000      	beq.n	800b610 <_write_r+0x20>
 800b60e:	6023      	str	r3, [r4, #0]
 800b610:	bd70      	pop	{r4, r5, r6, pc}
 800b612:	46c0      	nop			@ (mov r8, r8)
 800b614:	200008c4 	.word	0x200008c4

0800b618 <__errno>:
 800b618:	4b01      	ldr	r3, [pc, #4]	@ (800b620 <__errno+0x8>)
 800b61a:	6818      	ldr	r0, [r3, #0]
 800b61c:	4770      	bx	lr
 800b61e:	46c0      	nop			@ (mov r8, r8)
 800b620:	2000002c 	.word	0x2000002c

0800b624 <__libc_init_array>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	2600      	movs	r6, #0
 800b628:	4c0c      	ldr	r4, [pc, #48]	@ (800b65c <__libc_init_array+0x38>)
 800b62a:	4d0d      	ldr	r5, [pc, #52]	@ (800b660 <__libc_init_array+0x3c>)
 800b62c:	1b64      	subs	r4, r4, r5
 800b62e:	10a4      	asrs	r4, r4, #2
 800b630:	42a6      	cmp	r6, r4
 800b632:	d109      	bne.n	800b648 <__libc_init_array+0x24>
 800b634:	2600      	movs	r6, #0
 800b636:	f002 f841 	bl	800d6bc <_init>
 800b63a:	4c0a      	ldr	r4, [pc, #40]	@ (800b664 <__libc_init_array+0x40>)
 800b63c:	4d0a      	ldr	r5, [pc, #40]	@ (800b668 <__libc_init_array+0x44>)
 800b63e:	1b64      	subs	r4, r4, r5
 800b640:	10a4      	asrs	r4, r4, #2
 800b642:	42a6      	cmp	r6, r4
 800b644:	d105      	bne.n	800b652 <__libc_init_array+0x2e>
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	00b3      	lsls	r3, r6, #2
 800b64a:	58eb      	ldr	r3, [r5, r3]
 800b64c:	4798      	blx	r3
 800b64e:	3601      	adds	r6, #1
 800b650:	e7ee      	b.n	800b630 <__libc_init_array+0xc>
 800b652:	00b3      	lsls	r3, r6, #2
 800b654:	58eb      	ldr	r3, [r5, r3]
 800b656:	4798      	blx	r3
 800b658:	3601      	adds	r6, #1
 800b65a:	e7f2      	b.n	800b642 <__libc_init_array+0x1e>
 800b65c:	0800dc88 	.word	0x0800dc88
 800b660:	0800dc88 	.word	0x0800dc88
 800b664:	0800dc8c 	.word	0x0800dc8c
 800b668:	0800dc88 	.word	0x0800dc88

0800b66c <__retarget_lock_init_recursive>:
 800b66c:	4770      	bx	lr

0800b66e <__retarget_lock_acquire_recursive>:
 800b66e:	4770      	bx	lr

0800b670 <__retarget_lock_release_recursive>:
 800b670:	4770      	bx	lr

0800b672 <strcpy>:
 800b672:	0003      	movs	r3, r0
 800b674:	780a      	ldrb	r2, [r1, #0]
 800b676:	3101      	adds	r1, #1
 800b678:	701a      	strb	r2, [r3, #0]
 800b67a:	3301      	adds	r3, #1
 800b67c:	2a00      	cmp	r2, #0
 800b67e:	d1f9      	bne.n	800b674 <strcpy+0x2>
 800b680:	4770      	bx	lr

0800b682 <memchr>:
 800b682:	b2c9      	uxtb	r1, r1
 800b684:	1882      	adds	r2, r0, r2
 800b686:	4290      	cmp	r0, r2
 800b688:	d101      	bne.n	800b68e <memchr+0xc>
 800b68a:	2000      	movs	r0, #0
 800b68c:	4770      	bx	lr
 800b68e:	7803      	ldrb	r3, [r0, #0]
 800b690:	428b      	cmp	r3, r1
 800b692:	d0fb      	beq.n	800b68c <memchr+0xa>
 800b694:	3001      	adds	r0, #1
 800b696:	e7f6      	b.n	800b686 <memchr+0x4>

0800b698 <quorem>:
 800b698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b69a:	6902      	ldr	r2, [r0, #16]
 800b69c:	690f      	ldr	r7, [r1, #16]
 800b69e:	b087      	sub	sp, #28
 800b6a0:	0006      	movs	r6, r0
 800b6a2:	000b      	movs	r3, r1
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	9102      	str	r1, [sp, #8]
 800b6a8:	42ba      	cmp	r2, r7
 800b6aa:	db6d      	blt.n	800b788 <quorem+0xf0>
 800b6ac:	3f01      	subs	r7, #1
 800b6ae:	00bc      	lsls	r4, r7, #2
 800b6b0:	3314      	adds	r3, #20
 800b6b2:	9305      	str	r3, [sp, #20]
 800b6b4:	191b      	adds	r3, r3, r4
 800b6b6:	9303      	str	r3, [sp, #12]
 800b6b8:	0033      	movs	r3, r6
 800b6ba:	3314      	adds	r3, #20
 800b6bc:	191c      	adds	r4, r3, r4
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	6823      	ldr	r3, [r4, #0]
 800b6c2:	9304      	str	r3, [sp, #16]
 800b6c4:	9b03      	ldr	r3, [sp, #12]
 800b6c6:	9804      	ldr	r0, [sp, #16]
 800b6c8:	681d      	ldr	r5, [r3, #0]
 800b6ca:	3501      	adds	r5, #1
 800b6cc:	0029      	movs	r1, r5
 800b6ce:	f7f4 fd35 	bl	800013c <__udivsi3>
 800b6d2:	9b04      	ldr	r3, [sp, #16]
 800b6d4:	9000      	str	r0, [sp, #0]
 800b6d6:	42ab      	cmp	r3, r5
 800b6d8:	d32b      	bcc.n	800b732 <quorem+0x9a>
 800b6da:	9b05      	ldr	r3, [sp, #20]
 800b6dc:	9d01      	ldr	r5, [sp, #4]
 800b6de:	469c      	mov	ip, r3
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9305      	str	r3, [sp, #20]
 800b6e4:	9304      	str	r3, [sp, #16]
 800b6e6:	4662      	mov	r2, ip
 800b6e8:	ca08      	ldmia	r2!, {r3}
 800b6ea:	6828      	ldr	r0, [r5, #0]
 800b6ec:	4694      	mov	ip, r2
 800b6ee:	9a00      	ldr	r2, [sp, #0]
 800b6f0:	b299      	uxth	r1, r3
 800b6f2:	4351      	muls	r1, r2
 800b6f4:	9a05      	ldr	r2, [sp, #20]
 800b6f6:	0c1b      	lsrs	r3, r3, #16
 800b6f8:	1889      	adds	r1, r1, r2
 800b6fa:	9a00      	ldr	r2, [sp, #0]
 800b6fc:	4353      	muls	r3, r2
 800b6fe:	0c0a      	lsrs	r2, r1, #16
 800b700:	189b      	adds	r3, r3, r2
 800b702:	0c1a      	lsrs	r2, r3, #16
 800b704:	b289      	uxth	r1, r1
 800b706:	9205      	str	r2, [sp, #20]
 800b708:	b282      	uxth	r2, r0
 800b70a:	1a52      	subs	r2, r2, r1
 800b70c:	9904      	ldr	r1, [sp, #16]
 800b70e:	0c00      	lsrs	r0, r0, #16
 800b710:	1852      	adds	r2, r2, r1
 800b712:	b29b      	uxth	r3, r3
 800b714:	1411      	asrs	r1, r2, #16
 800b716:	1ac3      	subs	r3, r0, r3
 800b718:	185b      	adds	r3, r3, r1
 800b71a:	1419      	asrs	r1, r3, #16
 800b71c:	b292      	uxth	r2, r2
 800b71e:	041b      	lsls	r3, r3, #16
 800b720:	431a      	orrs	r2, r3
 800b722:	9b03      	ldr	r3, [sp, #12]
 800b724:	9104      	str	r1, [sp, #16]
 800b726:	c504      	stmia	r5!, {r2}
 800b728:	4563      	cmp	r3, ip
 800b72a:	d2dc      	bcs.n	800b6e6 <quorem+0x4e>
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d030      	beq.n	800b794 <quorem+0xfc>
 800b732:	0030      	movs	r0, r6
 800b734:	9902      	ldr	r1, [sp, #8]
 800b736:	f001 f909 	bl	800c94c <__mcmp>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	db23      	blt.n	800b786 <quorem+0xee>
 800b73e:	0034      	movs	r4, r6
 800b740:	2500      	movs	r5, #0
 800b742:	9902      	ldr	r1, [sp, #8]
 800b744:	3414      	adds	r4, #20
 800b746:	3114      	adds	r1, #20
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	c901      	ldmia	r1!, {r0}
 800b74c:	9302      	str	r3, [sp, #8]
 800b74e:	466b      	mov	r3, sp
 800b750:	891b      	ldrh	r3, [r3, #8]
 800b752:	b282      	uxth	r2, r0
 800b754:	1a9a      	subs	r2, r3, r2
 800b756:	9b02      	ldr	r3, [sp, #8]
 800b758:	1952      	adds	r2, r2, r5
 800b75a:	0c00      	lsrs	r0, r0, #16
 800b75c:	0c1b      	lsrs	r3, r3, #16
 800b75e:	1a1b      	subs	r3, r3, r0
 800b760:	1410      	asrs	r0, r2, #16
 800b762:	181b      	adds	r3, r3, r0
 800b764:	141d      	asrs	r5, r3, #16
 800b766:	b292      	uxth	r2, r2
 800b768:	041b      	lsls	r3, r3, #16
 800b76a:	431a      	orrs	r2, r3
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	c404      	stmia	r4!, {r2}
 800b770:	428b      	cmp	r3, r1
 800b772:	d2e9      	bcs.n	800b748 <quorem+0xb0>
 800b774:	9a01      	ldr	r2, [sp, #4]
 800b776:	00bb      	lsls	r3, r7, #2
 800b778:	18d3      	adds	r3, r2, r3
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	2a00      	cmp	r2, #0
 800b77e:	d013      	beq.n	800b7a8 <quorem+0x110>
 800b780:	9b00      	ldr	r3, [sp, #0]
 800b782:	3301      	adds	r3, #1
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	9800      	ldr	r0, [sp, #0]
 800b788:	b007      	add	sp, #28
 800b78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b78c:	6823      	ldr	r3, [r4, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d104      	bne.n	800b79c <quorem+0x104>
 800b792:	3f01      	subs	r7, #1
 800b794:	9b01      	ldr	r3, [sp, #4]
 800b796:	3c04      	subs	r4, #4
 800b798:	42a3      	cmp	r3, r4
 800b79a:	d3f7      	bcc.n	800b78c <quorem+0xf4>
 800b79c:	6137      	str	r7, [r6, #16]
 800b79e:	e7c8      	b.n	800b732 <quorem+0x9a>
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	2a00      	cmp	r2, #0
 800b7a4:	d104      	bne.n	800b7b0 <quorem+0x118>
 800b7a6:	3f01      	subs	r7, #1
 800b7a8:	9a01      	ldr	r2, [sp, #4]
 800b7aa:	3b04      	subs	r3, #4
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d3f7      	bcc.n	800b7a0 <quorem+0x108>
 800b7b0:	6137      	str	r7, [r6, #16]
 800b7b2:	e7e5      	b.n	800b780 <quorem+0xe8>

0800b7b4 <_dtoa_r>:
 800b7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7b6:	0014      	movs	r4, r2
 800b7b8:	001d      	movs	r5, r3
 800b7ba:	69c6      	ldr	r6, [r0, #28]
 800b7bc:	b09d      	sub	sp, #116	@ 0x74
 800b7be:	940a      	str	r4, [sp, #40]	@ 0x28
 800b7c0:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b7c2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800b7c4:	9003      	str	r0, [sp, #12]
 800b7c6:	2e00      	cmp	r6, #0
 800b7c8:	d10f      	bne.n	800b7ea <_dtoa_r+0x36>
 800b7ca:	2010      	movs	r0, #16
 800b7cc:	f7ff f836 	bl	800a83c <malloc>
 800b7d0:	9b03      	ldr	r3, [sp, #12]
 800b7d2:	1e02      	subs	r2, r0, #0
 800b7d4:	61d8      	str	r0, [r3, #28]
 800b7d6:	d104      	bne.n	800b7e2 <_dtoa_r+0x2e>
 800b7d8:	21ef      	movs	r1, #239	@ 0xef
 800b7da:	4bc7      	ldr	r3, [pc, #796]	@ (800baf8 <_dtoa_r+0x344>)
 800b7dc:	48c7      	ldr	r0, [pc, #796]	@ (800bafc <_dtoa_r+0x348>)
 800b7de:	f001 fbf7 	bl	800cfd0 <__assert_func>
 800b7e2:	6046      	str	r6, [r0, #4]
 800b7e4:	6086      	str	r6, [r0, #8]
 800b7e6:	6006      	str	r6, [r0, #0]
 800b7e8:	60c6      	str	r6, [r0, #12]
 800b7ea:	9b03      	ldr	r3, [sp, #12]
 800b7ec:	69db      	ldr	r3, [r3, #28]
 800b7ee:	6819      	ldr	r1, [r3, #0]
 800b7f0:	2900      	cmp	r1, #0
 800b7f2:	d00b      	beq.n	800b80c <_dtoa_r+0x58>
 800b7f4:	685a      	ldr	r2, [r3, #4]
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	4093      	lsls	r3, r2
 800b7fa:	604a      	str	r2, [r1, #4]
 800b7fc:	608b      	str	r3, [r1, #8]
 800b7fe:	9803      	ldr	r0, [sp, #12]
 800b800:	f000 fe5a 	bl	800c4b8 <_Bfree>
 800b804:	2200      	movs	r2, #0
 800b806:	9b03      	ldr	r3, [sp, #12]
 800b808:	69db      	ldr	r3, [r3, #28]
 800b80a:	601a      	str	r2, [r3, #0]
 800b80c:	2d00      	cmp	r5, #0
 800b80e:	da1e      	bge.n	800b84e <_dtoa_r+0x9a>
 800b810:	2301      	movs	r3, #1
 800b812:	603b      	str	r3, [r7, #0]
 800b814:	006b      	lsls	r3, r5, #1
 800b816:	085b      	lsrs	r3, r3, #1
 800b818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b81a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b81c:	4bb8      	ldr	r3, [pc, #736]	@ (800bb00 <_dtoa_r+0x34c>)
 800b81e:	4ab8      	ldr	r2, [pc, #736]	@ (800bb00 <_dtoa_r+0x34c>)
 800b820:	403b      	ands	r3, r7
 800b822:	4293      	cmp	r3, r2
 800b824:	d116      	bne.n	800b854 <_dtoa_r+0xa0>
 800b826:	4bb7      	ldr	r3, [pc, #732]	@ (800bb04 <_dtoa_r+0x350>)
 800b828:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b82a:	6013      	str	r3, [r2, #0]
 800b82c:	033b      	lsls	r3, r7, #12
 800b82e:	0b1b      	lsrs	r3, r3, #12
 800b830:	4323      	orrs	r3, r4
 800b832:	d101      	bne.n	800b838 <_dtoa_r+0x84>
 800b834:	f000 fd83 	bl	800c33e <_dtoa_r+0xb8a>
 800b838:	4bb3      	ldr	r3, [pc, #716]	@ (800bb08 <_dtoa_r+0x354>)
 800b83a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b83c:	9308      	str	r3, [sp, #32]
 800b83e:	2a00      	cmp	r2, #0
 800b840:	d002      	beq.n	800b848 <_dtoa_r+0x94>
 800b842:	4bb2      	ldr	r3, [pc, #712]	@ (800bb0c <_dtoa_r+0x358>)
 800b844:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	9808      	ldr	r0, [sp, #32]
 800b84a:	b01d      	add	sp, #116	@ 0x74
 800b84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b84e:	2300      	movs	r3, #0
 800b850:	603b      	str	r3, [r7, #0]
 800b852:	e7e2      	b.n	800b81a <_dtoa_r+0x66>
 800b854:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b858:	9212      	str	r2, [sp, #72]	@ 0x48
 800b85a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b85c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b85e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b860:	2200      	movs	r2, #0
 800b862:	2300      	movs	r3, #0
 800b864:	f7f4 fdf0 	bl	8000448 <__aeabi_dcmpeq>
 800b868:	1e06      	subs	r6, r0, #0
 800b86a:	d00b      	beq.n	800b884 <_dtoa_r+0xd0>
 800b86c:	2301      	movs	r3, #1
 800b86e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b870:	6013      	str	r3, [r2, #0]
 800b872:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b874:	2b00      	cmp	r3, #0
 800b876:	d002      	beq.n	800b87e <_dtoa_r+0xca>
 800b878:	4ba5      	ldr	r3, [pc, #660]	@ (800bb10 <_dtoa_r+0x35c>)
 800b87a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b87c:	6013      	str	r3, [r2, #0]
 800b87e:	4ba5      	ldr	r3, [pc, #660]	@ (800bb14 <_dtoa_r+0x360>)
 800b880:	9308      	str	r3, [sp, #32]
 800b882:	e7e1      	b.n	800b848 <_dtoa_r+0x94>
 800b884:	ab1a      	add	r3, sp, #104	@ 0x68
 800b886:	9301      	str	r3, [sp, #4]
 800b888:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	9803      	ldr	r0, [sp, #12]
 800b88e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b890:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b892:	f001 f911 	bl	800cab8 <__d2b>
 800b896:	007a      	lsls	r2, r7, #1
 800b898:	9005      	str	r0, [sp, #20]
 800b89a:	0d52      	lsrs	r2, r2, #21
 800b89c:	d100      	bne.n	800b8a0 <_dtoa_r+0xec>
 800b89e:	e07b      	b.n	800b998 <_dtoa_r+0x1e4>
 800b8a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b8a2:	9618      	str	r6, [sp, #96]	@ 0x60
 800b8a4:	0319      	lsls	r1, r3, #12
 800b8a6:	4b9c      	ldr	r3, [pc, #624]	@ (800bb18 <_dtoa_r+0x364>)
 800b8a8:	0b09      	lsrs	r1, r1, #12
 800b8aa:	430b      	orrs	r3, r1
 800b8ac:	499b      	ldr	r1, [pc, #620]	@ (800bb1c <_dtoa_r+0x368>)
 800b8ae:	1857      	adds	r7, r2, r1
 800b8b0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b8b2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b8b4:	0019      	movs	r1, r3
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	4b99      	ldr	r3, [pc, #612]	@ (800bb20 <_dtoa_r+0x36c>)
 800b8ba:	f7f6 fe93 	bl	80025e4 <__aeabi_dsub>
 800b8be:	4a99      	ldr	r2, [pc, #612]	@ (800bb24 <_dtoa_r+0x370>)
 800b8c0:	4b99      	ldr	r3, [pc, #612]	@ (800bb28 <_dtoa_r+0x374>)
 800b8c2:	f7f6 fbc7 	bl	8002054 <__aeabi_dmul>
 800b8c6:	4a99      	ldr	r2, [pc, #612]	@ (800bb2c <_dtoa_r+0x378>)
 800b8c8:	4b99      	ldr	r3, [pc, #612]	@ (800bb30 <_dtoa_r+0x37c>)
 800b8ca:	f7f5 fc1b 	bl	8001104 <__aeabi_dadd>
 800b8ce:	0004      	movs	r4, r0
 800b8d0:	0038      	movs	r0, r7
 800b8d2:	000d      	movs	r5, r1
 800b8d4:	f7f7 fa80 	bl	8002dd8 <__aeabi_i2d>
 800b8d8:	4a96      	ldr	r2, [pc, #600]	@ (800bb34 <_dtoa_r+0x380>)
 800b8da:	4b97      	ldr	r3, [pc, #604]	@ (800bb38 <_dtoa_r+0x384>)
 800b8dc:	f7f6 fbba 	bl	8002054 <__aeabi_dmul>
 800b8e0:	0002      	movs	r2, r0
 800b8e2:	000b      	movs	r3, r1
 800b8e4:	0020      	movs	r0, r4
 800b8e6:	0029      	movs	r1, r5
 800b8e8:	f7f5 fc0c 	bl	8001104 <__aeabi_dadd>
 800b8ec:	0004      	movs	r4, r0
 800b8ee:	000d      	movs	r5, r1
 800b8f0:	f7f7 fa36 	bl	8002d60 <__aeabi_d2iz>
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	9004      	str	r0, [sp, #16]
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	0020      	movs	r0, r4
 800b8fc:	0029      	movs	r1, r5
 800b8fe:	f7f4 fda9 	bl	8000454 <__aeabi_dcmplt>
 800b902:	2800      	cmp	r0, #0
 800b904:	d00b      	beq.n	800b91e <_dtoa_r+0x16a>
 800b906:	9804      	ldr	r0, [sp, #16]
 800b908:	f7f7 fa66 	bl	8002dd8 <__aeabi_i2d>
 800b90c:	002b      	movs	r3, r5
 800b90e:	0022      	movs	r2, r4
 800b910:	f7f4 fd9a 	bl	8000448 <__aeabi_dcmpeq>
 800b914:	4243      	negs	r3, r0
 800b916:	4158      	adcs	r0, r3
 800b918:	9b04      	ldr	r3, [sp, #16]
 800b91a:	1a1b      	subs	r3, r3, r0
 800b91c:	9304      	str	r3, [sp, #16]
 800b91e:	2301      	movs	r3, #1
 800b920:	9315      	str	r3, [sp, #84]	@ 0x54
 800b922:	9b04      	ldr	r3, [sp, #16]
 800b924:	2b16      	cmp	r3, #22
 800b926:	d810      	bhi.n	800b94a <_dtoa_r+0x196>
 800b928:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b92a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b92c:	9a04      	ldr	r2, [sp, #16]
 800b92e:	4b83      	ldr	r3, [pc, #524]	@ (800bb3c <_dtoa_r+0x388>)
 800b930:	00d2      	lsls	r2, r2, #3
 800b932:	189b      	adds	r3, r3, r2
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	f7f4 fd8c 	bl	8000454 <__aeabi_dcmplt>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d047      	beq.n	800b9d0 <_dtoa_r+0x21c>
 800b940:	9b04      	ldr	r3, [sp, #16]
 800b942:	3b01      	subs	r3, #1
 800b944:	9304      	str	r3, [sp, #16]
 800b946:	2300      	movs	r3, #0
 800b948:	9315      	str	r3, [sp, #84]	@ 0x54
 800b94a:	2200      	movs	r2, #0
 800b94c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b94e:	9206      	str	r2, [sp, #24]
 800b950:	1bdb      	subs	r3, r3, r7
 800b952:	1e5a      	subs	r2, r3, #1
 800b954:	d53e      	bpl.n	800b9d4 <_dtoa_r+0x220>
 800b956:	2201      	movs	r2, #1
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	9306      	str	r3, [sp, #24]
 800b95c:	2300      	movs	r3, #0
 800b95e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b960:	9b04      	ldr	r3, [sp, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	db38      	blt.n	800b9d8 <_dtoa_r+0x224>
 800b966:	9a04      	ldr	r2, [sp, #16]
 800b968:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b96a:	4694      	mov	ip, r2
 800b96c:	4463      	add	r3, ip
 800b96e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b970:	2300      	movs	r3, #0
 800b972:	9214      	str	r2, [sp, #80]	@ 0x50
 800b974:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b976:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b978:	2401      	movs	r4, #1
 800b97a:	2b09      	cmp	r3, #9
 800b97c:	d867      	bhi.n	800ba4e <_dtoa_r+0x29a>
 800b97e:	2b05      	cmp	r3, #5
 800b980:	dd02      	ble.n	800b988 <_dtoa_r+0x1d4>
 800b982:	2400      	movs	r4, #0
 800b984:	3b04      	subs	r3, #4
 800b986:	9322      	str	r3, [sp, #136]	@ 0x88
 800b988:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b98a:	1e98      	subs	r0, r3, #2
 800b98c:	2803      	cmp	r0, #3
 800b98e:	d867      	bhi.n	800ba60 <_dtoa_r+0x2ac>
 800b990:	f7f4 fbc0 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b994:	5b383a2b 	.word	0x5b383a2b
 800b998:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b99a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800b99c:	18f6      	adds	r6, r6, r3
 800b99e:	4b68      	ldr	r3, [pc, #416]	@ (800bb40 <_dtoa_r+0x38c>)
 800b9a0:	18f2      	adds	r2, r6, r3
 800b9a2:	2a20      	cmp	r2, #32
 800b9a4:	dd0f      	ble.n	800b9c6 <_dtoa_r+0x212>
 800b9a6:	2340      	movs	r3, #64	@ 0x40
 800b9a8:	1a9b      	subs	r3, r3, r2
 800b9aa:	409f      	lsls	r7, r3
 800b9ac:	4b65      	ldr	r3, [pc, #404]	@ (800bb44 <_dtoa_r+0x390>)
 800b9ae:	0038      	movs	r0, r7
 800b9b0:	18f3      	adds	r3, r6, r3
 800b9b2:	40dc      	lsrs	r4, r3
 800b9b4:	4320      	orrs	r0, r4
 800b9b6:	f7f7 fa3d 	bl	8002e34 <__aeabi_ui2d>
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	4b62      	ldr	r3, [pc, #392]	@ (800bb48 <_dtoa_r+0x394>)
 800b9be:	1e77      	subs	r7, r6, #1
 800b9c0:	18cb      	adds	r3, r1, r3
 800b9c2:	9218      	str	r2, [sp, #96]	@ 0x60
 800b9c4:	e776      	b.n	800b8b4 <_dtoa_r+0x100>
 800b9c6:	2320      	movs	r3, #32
 800b9c8:	0020      	movs	r0, r4
 800b9ca:	1a9b      	subs	r3, r3, r2
 800b9cc:	4098      	lsls	r0, r3
 800b9ce:	e7f2      	b.n	800b9b6 <_dtoa_r+0x202>
 800b9d0:	9015      	str	r0, [sp, #84]	@ 0x54
 800b9d2:	e7ba      	b.n	800b94a <_dtoa_r+0x196>
 800b9d4:	920d      	str	r2, [sp, #52]	@ 0x34
 800b9d6:	e7c3      	b.n	800b960 <_dtoa_r+0x1ac>
 800b9d8:	9b06      	ldr	r3, [sp, #24]
 800b9da:	9a04      	ldr	r2, [sp, #16]
 800b9dc:	1a9b      	subs	r3, r3, r2
 800b9de:	9306      	str	r3, [sp, #24]
 800b9e0:	4253      	negs	r3, r2
 800b9e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	9314      	str	r3, [sp, #80]	@ 0x50
 800b9e8:	e7c5      	b.n	800b976 <_dtoa_r+0x1c2>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9ee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b9f0:	930e      	str	r3, [sp, #56]	@ 0x38
 800b9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	dc13      	bgt.n	800ba20 <_dtoa_r+0x26c>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	001a      	movs	r2, r3
 800b9fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800b9fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba00:	9223      	str	r2, [sp, #140]	@ 0x8c
 800ba02:	e00d      	b.n	800ba20 <_dtoa_r+0x26c>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e7f1      	b.n	800b9ec <_dtoa_r+0x238>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba0c:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba0e:	4694      	mov	ip, r2
 800ba10:	9b04      	ldr	r3, [sp, #16]
 800ba12:	4463      	add	r3, ip
 800ba14:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba16:	3301      	adds	r3, #1
 800ba18:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	dc00      	bgt.n	800ba20 <_dtoa_r+0x26c>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	9a03      	ldr	r2, [sp, #12]
 800ba22:	2100      	movs	r1, #0
 800ba24:	69d0      	ldr	r0, [r2, #28]
 800ba26:	2204      	movs	r2, #4
 800ba28:	0015      	movs	r5, r2
 800ba2a:	3514      	adds	r5, #20
 800ba2c:	429d      	cmp	r5, r3
 800ba2e:	d91b      	bls.n	800ba68 <_dtoa_r+0x2b4>
 800ba30:	6041      	str	r1, [r0, #4]
 800ba32:	9803      	ldr	r0, [sp, #12]
 800ba34:	f000 fcfc 	bl	800c430 <_Balloc>
 800ba38:	9008      	str	r0, [sp, #32]
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d117      	bne.n	800ba6e <_dtoa_r+0x2ba>
 800ba3e:	21b0      	movs	r1, #176	@ 0xb0
 800ba40:	4b42      	ldr	r3, [pc, #264]	@ (800bb4c <_dtoa_r+0x398>)
 800ba42:	482e      	ldr	r0, [pc, #184]	@ (800bafc <_dtoa_r+0x348>)
 800ba44:	9a08      	ldr	r2, [sp, #32]
 800ba46:	31ff      	adds	r1, #255	@ 0xff
 800ba48:	e6c9      	b.n	800b7de <_dtoa_r+0x2a>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e7dd      	b.n	800ba0a <_dtoa_r+0x256>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	9410      	str	r4, [sp, #64]	@ 0x40
 800ba52:	9322      	str	r3, [sp, #136]	@ 0x88
 800ba54:	3b01      	subs	r3, #1
 800ba56:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba58:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	3313      	adds	r3, #19
 800ba5e:	e7cf      	b.n	800ba00 <_dtoa_r+0x24c>
 800ba60:	2301      	movs	r3, #1
 800ba62:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba64:	3b02      	subs	r3, #2
 800ba66:	e7f6      	b.n	800ba56 <_dtoa_r+0x2a2>
 800ba68:	3101      	adds	r1, #1
 800ba6a:	0052      	lsls	r2, r2, #1
 800ba6c:	e7dc      	b.n	800ba28 <_dtoa_r+0x274>
 800ba6e:	9b03      	ldr	r3, [sp, #12]
 800ba70:	9a08      	ldr	r2, [sp, #32]
 800ba72:	69db      	ldr	r3, [r3, #28]
 800ba74:	601a      	str	r2, [r3, #0]
 800ba76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba78:	2b0e      	cmp	r3, #14
 800ba7a:	d900      	bls.n	800ba7e <_dtoa_r+0x2ca>
 800ba7c:	e0d9      	b.n	800bc32 <_dtoa_r+0x47e>
 800ba7e:	2c00      	cmp	r4, #0
 800ba80:	d100      	bne.n	800ba84 <_dtoa_r+0x2d0>
 800ba82:	e0d6      	b.n	800bc32 <_dtoa_r+0x47e>
 800ba84:	9b04      	ldr	r3, [sp, #16]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	dd64      	ble.n	800bb54 <_dtoa_r+0x3a0>
 800ba8a:	210f      	movs	r1, #15
 800ba8c:	9a04      	ldr	r2, [sp, #16]
 800ba8e:	4b2b      	ldr	r3, [pc, #172]	@ (800bb3c <_dtoa_r+0x388>)
 800ba90:	400a      	ands	r2, r1
 800ba92:	00d2      	lsls	r2, r2, #3
 800ba94:	189b      	adds	r3, r3, r2
 800ba96:	681e      	ldr	r6, [r3, #0]
 800ba98:	685f      	ldr	r7, [r3, #4]
 800ba9a:	9b04      	ldr	r3, [sp, #16]
 800ba9c:	2402      	movs	r4, #2
 800ba9e:	111d      	asrs	r5, r3, #4
 800baa0:	05db      	lsls	r3, r3, #23
 800baa2:	d50a      	bpl.n	800baba <_dtoa_r+0x306>
 800baa4:	4b2a      	ldr	r3, [pc, #168]	@ (800bb50 <_dtoa_r+0x39c>)
 800baa6:	400d      	ands	r5, r1
 800baa8:	6a1a      	ldr	r2, [r3, #32]
 800baaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800baae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bab0:	f7f5 fe8c 	bl	80017cc <__aeabi_ddiv>
 800bab4:	900a      	str	r0, [sp, #40]	@ 0x28
 800bab6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bab8:	3401      	adds	r4, #1
 800baba:	4b25      	ldr	r3, [pc, #148]	@ (800bb50 <_dtoa_r+0x39c>)
 800babc:	930c      	str	r3, [sp, #48]	@ 0x30
 800babe:	2d00      	cmp	r5, #0
 800bac0:	d108      	bne.n	800bad4 <_dtoa_r+0x320>
 800bac2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bac4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bac6:	0032      	movs	r2, r6
 800bac8:	003b      	movs	r3, r7
 800baca:	f7f5 fe7f 	bl	80017cc <__aeabi_ddiv>
 800bace:	900a      	str	r0, [sp, #40]	@ 0x28
 800bad0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bad2:	e05a      	b.n	800bb8a <_dtoa_r+0x3d6>
 800bad4:	2301      	movs	r3, #1
 800bad6:	421d      	tst	r5, r3
 800bad8:	d009      	beq.n	800baee <_dtoa_r+0x33a>
 800bada:	18e4      	adds	r4, r4, r3
 800badc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bade:	0030      	movs	r0, r6
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	0039      	movs	r1, r7
 800bae6:	f7f6 fab5 	bl	8002054 <__aeabi_dmul>
 800baea:	0006      	movs	r6, r0
 800baec:	000f      	movs	r7, r1
 800baee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800baf0:	106d      	asrs	r5, r5, #1
 800baf2:	3308      	adds	r3, #8
 800baf4:	e7e2      	b.n	800babc <_dtoa_r+0x308>
 800baf6:	46c0      	nop			@ (mov r8, r8)
 800baf8:	0800d951 	.word	0x0800d951
 800bafc:	0800d968 	.word	0x0800d968
 800bb00:	7ff00000 	.word	0x7ff00000
 800bb04:	0000270f 	.word	0x0000270f
 800bb08:	0800d94d 	.word	0x0800d94d
 800bb0c:	0800d950 	.word	0x0800d950
 800bb10:	0800d921 	.word	0x0800d921
 800bb14:	0800d920 	.word	0x0800d920
 800bb18:	3ff00000 	.word	0x3ff00000
 800bb1c:	fffffc01 	.word	0xfffffc01
 800bb20:	3ff80000 	.word	0x3ff80000
 800bb24:	636f4361 	.word	0x636f4361
 800bb28:	3fd287a7 	.word	0x3fd287a7
 800bb2c:	8b60c8b3 	.word	0x8b60c8b3
 800bb30:	3fc68a28 	.word	0x3fc68a28
 800bb34:	509f79fb 	.word	0x509f79fb
 800bb38:	3fd34413 	.word	0x3fd34413
 800bb3c:	0800da60 	.word	0x0800da60
 800bb40:	00000432 	.word	0x00000432
 800bb44:	00000412 	.word	0x00000412
 800bb48:	fe100000 	.word	0xfe100000
 800bb4c:	0800d9c0 	.word	0x0800d9c0
 800bb50:	0800da38 	.word	0x0800da38
 800bb54:	9b04      	ldr	r3, [sp, #16]
 800bb56:	2402      	movs	r4, #2
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d016      	beq.n	800bb8a <_dtoa_r+0x3d6>
 800bb5c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bb5e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bb60:	220f      	movs	r2, #15
 800bb62:	425d      	negs	r5, r3
 800bb64:	402a      	ands	r2, r5
 800bb66:	4bd7      	ldr	r3, [pc, #860]	@ (800bec4 <_dtoa_r+0x710>)
 800bb68:	00d2      	lsls	r2, r2, #3
 800bb6a:	189b      	adds	r3, r3, r2
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	f7f6 fa70 	bl	8002054 <__aeabi_dmul>
 800bb74:	2701      	movs	r7, #1
 800bb76:	2300      	movs	r3, #0
 800bb78:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bb7c:	4ed2      	ldr	r6, [pc, #840]	@ (800bec8 <_dtoa_r+0x714>)
 800bb7e:	112d      	asrs	r5, r5, #4
 800bb80:	2d00      	cmp	r5, #0
 800bb82:	d000      	beq.n	800bb86 <_dtoa_r+0x3d2>
 800bb84:	e0ba      	b.n	800bcfc <_dtoa_r+0x548>
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1a1      	bne.n	800bace <_dtoa_r+0x31a>
 800bb8a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bb8c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bb8e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d100      	bne.n	800bb96 <_dtoa_r+0x3e2>
 800bb94:	e0bd      	b.n	800bd12 <_dtoa_r+0x55e>
 800bb96:	2200      	movs	r2, #0
 800bb98:	0030      	movs	r0, r6
 800bb9a:	0039      	movs	r1, r7
 800bb9c:	4bcb      	ldr	r3, [pc, #812]	@ (800becc <_dtoa_r+0x718>)
 800bb9e:	f7f4 fc59 	bl	8000454 <__aeabi_dcmplt>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d100      	bne.n	800bba8 <_dtoa_r+0x3f4>
 800bba6:	e0b4      	b.n	800bd12 <_dtoa_r+0x55e>
 800bba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d100      	bne.n	800bbb0 <_dtoa_r+0x3fc>
 800bbae:	e0b0      	b.n	800bd12 <_dtoa_r+0x55e>
 800bbb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	dd39      	ble.n	800bc2a <_dtoa_r+0x476>
 800bbb6:	9b04      	ldr	r3, [sp, #16]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	930c      	str	r3, [sp, #48]	@ 0x30
 800bbbe:	0030      	movs	r0, r6
 800bbc0:	4bc3      	ldr	r3, [pc, #780]	@ (800bed0 <_dtoa_r+0x71c>)
 800bbc2:	0039      	movs	r1, r7
 800bbc4:	f7f6 fa46 	bl	8002054 <__aeabi_dmul>
 800bbc8:	900a      	str	r0, [sp, #40]	@ 0x28
 800bbca:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bbcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbce:	3401      	adds	r4, #1
 800bbd0:	0020      	movs	r0, r4
 800bbd2:	9311      	str	r3, [sp, #68]	@ 0x44
 800bbd4:	f7f7 f900 	bl	8002dd8 <__aeabi_i2d>
 800bbd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbdc:	f7f6 fa3a 	bl	8002054 <__aeabi_dmul>
 800bbe0:	4bbc      	ldr	r3, [pc, #752]	@ (800bed4 <_dtoa_r+0x720>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f7f5 fa8e 	bl	8001104 <__aeabi_dadd>
 800bbe8:	4bbb      	ldr	r3, [pc, #748]	@ (800bed8 <_dtoa_r+0x724>)
 800bbea:	0006      	movs	r6, r0
 800bbec:	18cf      	adds	r7, r1, r3
 800bbee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d000      	beq.n	800bbf6 <_dtoa_r+0x442>
 800bbf4:	e091      	b.n	800bd1a <_dtoa_r+0x566>
 800bbf6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bbf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	4bb7      	ldr	r3, [pc, #732]	@ (800bedc <_dtoa_r+0x728>)
 800bbfe:	f7f6 fcf1 	bl	80025e4 <__aeabi_dsub>
 800bc02:	0032      	movs	r2, r6
 800bc04:	003b      	movs	r3, r7
 800bc06:	0004      	movs	r4, r0
 800bc08:	000d      	movs	r5, r1
 800bc0a:	f7f4 fc37 	bl	800047c <__aeabi_dcmpgt>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d000      	beq.n	800bc14 <_dtoa_r+0x460>
 800bc12:	e29d      	b.n	800c150 <_dtoa_r+0x99c>
 800bc14:	2180      	movs	r1, #128	@ 0x80
 800bc16:	0609      	lsls	r1, r1, #24
 800bc18:	187b      	adds	r3, r7, r1
 800bc1a:	0032      	movs	r2, r6
 800bc1c:	0020      	movs	r0, r4
 800bc1e:	0029      	movs	r1, r5
 800bc20:	f7f4 fc18 	bl	8000454 <__aeabi_dcmplt>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d000      	beq.n	800bc2a <_dtoa_r+0x476>
 800bc28:	e130      	b.n	800be8c <_dtoa_r+0x6d8>
 800bc2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc2c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800bc2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc30:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bc32:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	da00      	bge.n	800bc3a <_dtoa_r+0x486>
 800bc38:	e177      	b.n	800bf2a <_dtoa_r+0x776>
 800bc3a:	9a04      	ldr	r2, [sp, #16]
 800bc3c:	2a0e      	cmp	r2, #14
 800bc3e:	dd00      	ble.n	800bc42 <_dtoa_r+0x48e>
 800bc40:	e173      	b.n	800bf2a <_dtoa_r+0x776>
 800bc42:	4ba0      	ldr	r3, [pc, #640]	@ (800bec4 <_dtoa_r+0x710>)
 800bc44:	00d2      	lsls	r2, r2, #3
 800bc46:	189b      	adds	r3, r3, r2
 800bc48:	685c      	ldr	r4, [r3, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	9306      	str	r3, [sp, #24]
 800bc4e:	9407      	str	r4, [sp, #28]
 800bc50:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	da03      	bge.n	800bc5e <_dtoa_r+0x4aa>
 800bc56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	dc00      	bgt.n	800bc5e <_dtoa_r+0x4aa>
 800bc5c:	e106      	b.n	800be6c <_dtoa_r+0x6b8>
 800bc5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bc60:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc64:	9d08      	ldr	r5, [sp, #32]
 800bc66:	3b01      	subs	r3, #1
 800bc68:	195b      	adds	r3, r3, r5
 800bc6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc6c:	9a06      	ldr	r2, [sp, #24]
 800bc6e:	9b07      	ldr	r3, [sp, #28]
 800bc70:	0030      	movs	r0, r6
 800bc72:	0039      	movs	r1, r7
 800bc74:	f7f5 fdaa 	bl	80017cc <__aeabi_ddiv>
 800bc78:	f7f7 f872 	bl	8002d60 <__aeabi_d2iz>
 800bc7c:	9009      	str	r0, [sp, #36]	@ 0x24
 800bc7e:	f7f7 f8ab 	bl	8002dd8 <__aeabi_i2d>
 800bc82:	9a06      	ldr	r2, [sp, #24]
 800bc84:	9b07      	ldr	r3, [sp, #28]
 800bc86:	f7f6 f9e5 	bl	8002054 <__aeabi_dmul>
 800bc8a:	0002      	movs	r2, r0
 800bc8c:	000b      	movs	r3, r1
 800bc8e:	0030      	movs	r0, r6
 800bc90:	0039      	movs	r1, r7
 800bc92:	f7f6 fca7 	bl	80025e4 <__aeabi_dsub>
 800bc96:	002b      	movs	r3, r5
 800bc98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc9a:	3501      	adds	r5, #1
 800bc9c:	3230      	adds	r2, #48	@ 0x30
 800bc9e:	701a      	strb	r2, [r3, #0]
 800bca0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bca2:	002c      	movs	r4, r5
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d000      	beq.n	800bcaa <_dtoa_r+0x4f6>
 800bca8:	e131      	b.n	800bf0e <_dtoa_r+0x75a>
 800bcaa:	0002      	movs	r2, r0
 800bcac:	000b      	movs	r3, r1
 800bcae:	f7f5 fa29 	bl	8001104 <__aeabi_dadd>
 800bcb2:	9a06      	ldr	r2, [sp, #24]
 800bcb4:	9b07      	ldr	r3, [sp, #28]
 800bcb6:	0006      	movs	r6, r0
 800bcb8:	000f      	movs	r7, r1
 800bcba:	f7f4 fbdf 	bl	800047c <__aeabi_dcmpgt>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d000      	beq.n	800bcc4 <_dtoa_r+0x510>
 800bcc2:	e10f      	b.n	800bee4 <_dtoa_r+0x730>
 800bcc4:	9a06      	ldr	r2, [sp, #24]
 800bcc6:	9b07      	ldr	r3, [sp, #28]
 800bcc8:	0030      	movs	r0, r6
 800bcca:	0039      	movs	r1, r7
 800bccc:	f7f4 fbbc 	bl	8000448 <__aeabi_dcmpeq>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d003      	beq.n	800bcdc <_dtoa_r+0x528>
 800bcd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcd6:	07dd      	lsls	r5, r3, #31
 800bcd8:	d500      	bpl.n	800bcdc <_dtoa_r+0x528>
 800bcda:	e103      	b.n	800bee4 <_dtoa_r+0x730>
 800bcdc:	9905      	ldr	r1, [sp, #20]
 800bcde:	9803      	ldr	r0, [sp, #12]
 800bce0:	f000 fbea 	bl	800c4b8 <_Bfree>
 800bce4:	2300      	movs	r3, #0
 800bce6:	7023      	strb	r3, [r4, #0]
 800bce8:	9b04      	ldr	r3, [sp, #16]
 800bcea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bcec:	3301      	adds	r3, #1
 800bcee:	6013      	str	r3, [r2, #0]
 800bcf0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d100      	bne.n	800bcf8 <_dtoa_r+0x544>
 800bcf6:	e5a7      	b.n	800b848 <_dtoa_r+0x94>
 800bcf8:	601c      	str	r4, [r3, #0]
 800bcfa:	e5a5      	b.n	800b848 <_dtoa_r+0x94>
 800bcfc:	423d      	tst	r5, r7
 800bcfe:	d005      	beq.n	800bd0c <_dtoa_r+0x558>
 800bd00:	6832      	ldr	r2, [r6, #0]
 800bd02:	6873      	ldr	r3, [r6, #4]
 800bd04:	f7f6 f9a6 	bl	8002054 <__aeabi_dmul>
 800bd08:	003b      	movs	r3, r7
 800bd0a:	3401      	adds	r4, #1
 800bd0c:	106d      	asrs	r5, r5, #1
 800bd0e:	3608      	adds	r6, #8
 800bd10:	e736      	b.n	800bb80 <_dtoa_r+0x3cc>
 800bd12:	9b04      	ldr	r3, [sp, #16]
 800bd14:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd18:	e75a      	b.n	800bbd0 <_dtoa_r+0x41c>
 800bd1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bd1c:	4b69      	ldr	r3, [pc, #420]	@ (800bec4 <_dtoa_r+0x710>)
 800bd1e:	3a01      	subs	r2, #1
 800bd20:	00d2      	lsls	r2, r2, #3
 800bd22:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800bd24:	189b      	adds	r3, r3, r2
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	2900      	cmp	r1, #0
 800bd2c:	d04c      	beq.n	800bdc8 <_dtoa_r+0x614>
 800bd2e:	2000      	movs	r0, #0
 800bd30:	496b      	ldr	r1, [pc, #428]	@ (800bee0 <_dtoa_r+0x72c>)
 800bd32:	f7f5 fd4b 	bl	80017cc <__aeabi_ddiv>
 800bd36:	0032      	movs	r2, r6
 800bd38:	003b      	movs	r3, r7
 800bd3a:	f7f6 fc53 	bl	80025e4 <__aeabi_dsub>
 800bd3e:	9a08      	ldr	r2, [sp, #32]
 800bd40:	0006      	movs	r6, r0
 800bd42:	4694      	mov	ip, r2
 800bd44:	000f      	movs	r7, r1
 800bd46:	9b08      	ldr	r3, [sp, #32]
 800bd48:	9316      	str	r3, [sp, #88]	@ 0x58
 800bd4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bd4c:	4463      	add	r3, ip
 800bd4e:	9311      	str	r3, [sp, #68]	@ 0x44
 800bd50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bd52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd54:	f7f7 f804 	bl	8002d60 <__aeabi_d2iz>
 800bd58:	0005      	movs	r5, r0
 800bd5a:	f7f7 f83d 	bl	8002dd8 <__aeabi_i2d>
 800bd5e:	0002      	movs	r2, r0
 800bd60:	000b      	movs	r3, r1
 800bd62:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bd64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd66:	f7f6 fc3d 	bl	80025e4 <__aeabi_dsub>
 800bd6a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bd6c:	3530      	adds	r5, #48	@ 0x30
 800bd6e:	1c5c      	adds	r4, r3, #1
 800bd70:	701d      	strb	r5, [r3, #0]
 800bd72:	0032      	movs	r2, r6
 800bd74:	003b      	movs	r3, r7
 800bd76:	900a      	str	r0, [sp, #40]	@ 0x28
 800bd78:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bd7a:	f7f4 fb6b 	bl	8000454 <__aeabi_dcmplt>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d16a      	bne.n	800be58 <_dtoa_r+0x6a4>
 800bd82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd86:	2000      	movs	r0, #0
 800bd88:	4950      	ldr	r1, [pc, #320]	@ (800becc <_dtoa_r+0x718>)
 800bd8a:	f7f6 fc2b 	bl	80025e4 <__aeabi_dsub>
 800bd8e:	0032      	movs	r2, r6
 800bd90:	003b      	movs	r3, r7
 800bd92:	f7f4 fb5f 	bl	8000454 <__aeabi_dcmplt>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d000      	beq.n	800bd9c <_dtoa_r+0x5e8>
 800bd9a:	e0a5      	b.n	800bee8 <_dtoa_r+0x734>
 800bd9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bd9e:	42a3      	cmp	r3, r4
 800bda0:	d100      	bne.n	800bda4 <_dtoa_r+0x5f0>
 800bda2:	e742      	b.n	800bc2a <_dtoa_r+0x476>
 800bda4:	2200      	movs	r2, #0
 800bda6:	0030      	movs	r0, r6
 800bda8:	0039      	movs	r1, r7
 800bdaa:	4b49      	ldr	r3, [pc, #292]	@ (800bed0 <_dtoa_r+0x71c>)
 800bdac:	f7f6 f952 	bl	8002054 <__aeabi_dmul>
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	0006      	movs	r6, r0
 800bdb4:	000f      	movs	r7, r1
 800bdb6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bdb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bdba:	4b45      	ldr	r3, [pc, #276]	@ (800bed0 <_dtoa_r+0x71c>)
 800bdbc:	f7f6 f94a 	bl	8002054 <__aeabi_dmul>
 800bdc0:	9416      	str	r4, [sp, #88]	@ 0x58
 800bdc2:	900a      	str	r0, [sp, #40]	@ 0x28
 800bdc4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bdc6:	e7c3      	b.n	800bd50 <_dtoa_r+0x59c>
 800bdc8:	0030      	movs	r0, r6
 800bdca:	0039      	movs	r1, r7
 800bdcc:	f7f6 f942 	bl	8002054 <__aeabi_dmul>
 800bdd0:	9d08      	ldr	r5, [sp, #32]
 800bdd2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bdd4:	002b      	movs	r3, r5
 800bdd6:	4694      	mov	ip, r2
 800bdd8:	9016      	str	r0, [sp, #88]	@ 0x58
 800bdda:	9117      	str	r1, [sp, #92]	@ 0x5c
 800bddc:	4463      	add	r3, ip
 800bdde:	9319      	str	r3, [sp, #100]	@ 0x64
 800bde0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bde2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bde4:	f7f6 ffbc 	bl	8002d60 <__aeabi_d2iz>
 800bde8:	0004      	movs	r4, r0
 800bdea:	f7f6 fff5 	bl	8002dd8 <__aeabi_i2d>
 800bdee:	000b      	movs	r3, r1
 800bdf0:	0002      	movs	r2, r0
 800bdf2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bdf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bdf6:	f7f6 fbf5 	bl	80025e4 <__aeabi_dsub>
 800bdfa:	3430      	adds	r4, #48	@ 0x30
 800bdfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bdfe:	702c      	strb	r4, [r5, #0]
 800be00:	3501      	adds	r5, #1
 800be02:	0006      	movs	r6, r0
 800be04:	000f      	movs	r7, r1
 800be06:	42ab      	cmp	r3, r5
 800be08:	d129      	bne.n	800be5e <_dtoa_r+0x6aa>
 800be0a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800be0c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800be0e:	9b08      	ldr	r3, [sp, #32]
 800be10:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800be12:	469c      	mov	ip, r3
 800be14:	2200      	movs	r2, #0
 800be16:	4b32      	ldr	r3, [pc, #200]	@ (800bee0 <_dtoa_r+0x72c>)
 800be18:	4464      	add	r4, ip
 800be1a:	f7f5 f973 	bl	8001104 <__aeabi_dadd>
 800be1e:	0002      	movs	r2, r0
 800be20:	000b      	movs	r3, r1
 800be22:	0030      	movs	r0, r6
 800be24:	0039      	movs	r1, r7
 800be26:	f7f4 fb29 	bl	800047c <__aeabi_dcmpgt>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d15c      	bne.n	800bee8 <_dtoa_r+0x734>
 800be2e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800be30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800be32:	2000      	movs	r0, #0
 800be34:	492a      	ldr	r1, [pc, #168]	@ (800bee0 <_dtoa_r+0x72c>)
 800be36:	f7f6 fbd5 	bl	80025e4 <__aeabi_dsub>
 800be3a:	0002      	movs	r2, r0
 800be3c:	000b      	movs	r3, r1
 800be3e:	0030      	movs	r0, r6
 800be40:	0039      	movs	r1, r7
 800be42:	f7f4 fb07 	bl	8000454 <__aeabi_dcmplt>
 800be46:	2800      	cmp	r0, #0
 800be48:	d100      	bne.n	800be4c <_dtoa_r+0x698>
 800be4a:	e6ee      	b.n	800bc2a <_dtoa_r+0x476>
 800be4c:	0023      	movs	r3, r4
 800be4e:	3c01      	subs	r4, #1
 800be50:	7822      	ldrb	r2, [r4, #0]
 800be52:	2a30      	cmp	r2, #48	@ 0x30
 800be54:	d0fa      	beq.n	800be4c <_dtoa_r+0x698>
 800be56:	001c      	movs	r4, r3
 800be58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be5a:	9304      	str	r3, [sp, #16]
 800be5c:	e73e      	b.n	800bcdc <_dtoa_r+0x528>
 800be5e:	2200      	movs	r2, #0
 800be60:	4b1b      	ldr	r3, [pc, #108]	@ (800bed0 <_dtoa_r+0x71c>)
 800be62:	f7f6 f8f7 	bl	8002054 <__aeabi_dmul>
 800be66:	900a      	str	r0, [sp, #40]	@ 0x28
 800be68:	910b      	str	r1, [sp, #44]	@ 0x2c
 800be6a:	e7b9      	b.n	800bde0 <_dtoa_r+0x62c>
 800be6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10c      	bne.n	800be8c <_dtoa_r+0x6d8>
 800be72:	9806      	ldr	r0, [sp, #24]
 800be74:	9907      	ldr	r1, [sp, #28]
 800be76:	2200      	movs	r2, #0
 800be78:	4b18      	ldr	r3, [pc, #96]	@ (800bedc <_dtoa_r+0x728>)
 800be7a:	f7f6 f8eb 	bl	8002054 <__aeabi_dmul>
 800be7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be82:	f7f4 fb05 	bl	8000490 <__aeabi_dcmpge>
 800be86:	2800      	cmp	r0, #0
 800be88:	d100      	bne.n	800be8c <_dtoa_r+0x6d8>
 800be8a:	e164      	b.n	800c156 <_dtoa_r+0x9a2>
 800be8c:	2600      	movs	r6, #0
 800be8e:	0037      	movs	r7, r6
 800be90:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be92:	9c08      	ldr	r4, [sp, #32]
 800be94:	43db      	mvns	r3, r3
 800be96:	930c      	str	r3, [sp, #48]	@ 0x30
 800be98:	2300      	movs	r3, #0
 800be9a:	9304      	str	r3, [sp, #16]
 800be9c:	0031      	movs	r1, r6
 800be9e:	9803      	ldr	r0, [sp, #12]
 800bea0:	f000 fb0a 	bl	800c4b8 <_Bfree>
 800bea4:	2f00      	cmp	r7, #0
 800bea6:	d0d7      	beq.n	800be58 <_dtoa_r+0x6a4>
 800bea8:	9b04      	ldr	r3, [sp, #16]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d005      	beq.n	800beba <_dtoa_r+0x706>
 800beae:	42bb      	cmp	r3, r7
 800beb0:	d003      	beq.n	800beba <_dtoa_r+0x706>
 800beb2:	0019      	movs	r1, r3
 800beb4:	9803      	ldr	r0, [sp, #12]
 800beb6:	f000 faff 	bl	800c4b8 <_Bfree>
 800beba:	0039      	movs	r1, r7
 800bebc:	9803      	ldr	r0, [sp, #12]
 800bebe:	f000 fafb 	bl	800c4b8 <_Bfree>
 800bec2:	e7c9      	b.n	800be58 <_dtoa_r+0x6a4>
 800bec4:	0800da60 	.word	0x0800da60
 800bec8:	0800da38 	.word	0x0800da38
 800becc:	3ff00000 	.word	0x3ff00000
 800bed0:	40240000 	.word	0x40240000
 800bed4:	401c0000 	.word	0x401c0000
 800bed8:	fcc00000 	.word	0xfcc00000
 800bedc:	40140000 	.word	0x40140000
 800bee0:	3fe00000 	.word	0x3fe00000
 800bee4:	9b04      	ldr	r3, [sp, #16]
 800bee6:	930c      	str	r3, [sp, #48]	@ 0x30
 800bee8:	0023      	movs	r3, r4
 800beea:	001c      	movs	r4, r3
 800beec:	3b01      	subs	r3, #1
 800beee:	781a      	ldrb	r2, [r3, #0]
 800bef0:	2a39      	cmp	r2, #57	@ 0x39
 800bef2:	d108      	bne.n	800bf06 <_dtoa_r+0x752>
 800bef4:	9a08      	ldr	r2, [sp, #32]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d1f7      	bne.n	800beea <_dtoa_r+0x736>
 800befa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800befc:	9908      	ldr	r1, [sp, #32]
 800befe:	3201      	adds	r2, #1
 800bf00:	920c      	str	r2, [sp, #48]	@ 0x30
 800bf02:	2230      	movs	r2, #48	@ 0x30
 800bf04:	700a      	strb	r2, [r1, #0]
 800bf06:	781a      	ldrb	r2, [r3, #0]
 800bf08:	3201      	adds	r2, #1
 800bf0a:	701a      	strb	r2, [r3, #0]
 800bf0c:	e7a4      	b.n	800be58 <_dtoa_r+0x6a4>
 800bf0e:	2200      	movs	r2, #0
 800bf10:	4bc6      	ldr	r3, [pc, #792]	@ (800c22c <_dtoa_r+0xa78>)
 800bf12:	f7f6 f89f 	bl	8002054 <__aeabi_dmul>
 800bf16:	2200      	movs	r2, #0
 800bf18:	2300      	movs	r3, #0
 800bf1a:	0006      	movs	r6, r0
 800bf1c:	000f      	movs	r7, r1
 800bf1e:	f7f4 fa93 	bl	8000448 <__aeabi_dcmpeq>
 800bf22:	2800      	cmp	r0, #0
 800bf24:	d100      	bne.n	800bf28 <_dtoa_r+0x774>
 800bf26:	e6a1      	b.n	800bc6c <_dtoa_r+0x4b8>
 800bf28:	e6d8      	b.n	800bcdc <_dtoa_r+0x528>
 800bf2a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800bf2c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800bf2e:	9c06      	ldr	r4, [sp, #24]
 800bf30:	2f00      	cmp	r7, #0
 800bf32:	d014      	beq.n	800bf5e <_dtoa_r+0x7aa>
 800bf34:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bf36:	2a01      	cmp	r2, #1
 800bf38:	dd00      	ble.n	800bf3c <_dtoa_r+0x788>
 800bf3a:	e0c8      	b.n	800c0ce <_dtoa_r+0x91a>
 800bf3c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800bf3e:	2a00      	cmp	r2, #0
 800bf40:	d100      	bne.n	800bf44 <_dtoa_r+0x790>
 800bf42:	e0be      	b.n	800c0c2 <_dtoa_r+0x90e>
 800bf44:	4aba      	ldr	r2, [pc, #744]	@ (800c230 <_dtoa_r+0xa7c>)
 800bf46:	189b      	adds	r3, r3, r2
 800bf48:	9a06      	ldr	r2, [sp, #24]
 800bf4a:	2101      	movs	r1, #1
 800bf4c:	18d2      	adds	r2, r2, r3
 800bf4e:	9206      	str	r2, [sp, #24]
 800bf50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf52:	9803      	ldr	r0, [sp, #12]
 800bf54:	18d3      	adds	r3, r2, r3
 800bf56:	930d      	str	r3, [sp, #52]	@ 0x34
 800bf58:	f000 fb66 	bl	800c628 <__i2b>
 800bf5c:	0007      	movs	r7, r0
 800bf5e:	2c00      	cmp	r4, #0
 800bf60:	d00e      	beq.n	800bf80 <_dtoa_r+0x7cc>
 800bf62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dd0b      	ble.n	800bf80 <_dtoa_r+0x7cc>
 800bf68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf6a:	0023      	movs	r3, r4
 800bf6c:	4294      	cmp	r4, r2
 800bf6e:	dd00      	ble.n	800bf72 <_dtoa_r+0x7be>
 800bf70:	0013      	movs	r3, r2
 800bf72:	9a06      	ldr	r2, [sp, #24]
 800bf74:	1ae4      	subs	r4, r4, r3
 800bf76:	1ad2      	subs	r2, r2, r3
 800bf78:	9206      	str	r2, [sp, #24]
 800bf7a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	930d      	str	r3, [sp, #52]	@ 0x34
 800bf80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d01f      	beq.n	800bfc6 <_dtoa_r+0x812>
 800bf86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d100      	bne.n	800bf8e <_dtoa_r+0x7da>
 800bf8c:	e0b5      	b.n	800c0fa <_dtoa_r+0x946>
 800bf8e:	2d00      	cmp	r5, #0
 800bf90:	d010      	beq.n	800bfb4 <_dtoa_r+0x800>
 800bf92:	0039      	movs	r1, r7
 800bf94:	002a      	movs	r2, r5
 800bf96:	9803      	ldr	r0, [sp, #12]
 800bf98:	f000 fc10 	bl	800c7bc <__pow5mult>
 800bf9c:	9a05      	ldr	r2, [sp, #20]
 800bf9e:	0001      	movs	r1, r0
 800bfa0:	0007      	movs	r7, r0
 800bfa2:	9803      	ldr	r0, [sp, #12]
 800bfa4:	f000 fb58 	bl	800c658 <__multiply>
 800bfa8:	0006      	movs	r6, r0
 800bfaa:	9905      	ldr	r1, [sp, #20]
 800bfac:	9803      	ldr	r0, [sp, #12]
 800bfae:	f000 fa83 	bl	800c4b8 <_Bfree>
 800bfb2:	9605      	str	r6, [sp, #20]
 800bfb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfb6:	1b5a      	subs	r2, r3, r5
 800bfb8:	42ab      	cmp	r3, r5
 800bfba:	d004      	beq.n	800bfc6 <_dtoa_r+0x812>
 800bfbc:	9905      	ldr	r1, [sp, #20]
 800bfbe:	9803      	ldr	r0, [sp, #12]
 800bfc0:	f000 fbfc 	bl	800c7bc <__pow5mult>
 800bfc4:	9005      	str	r0, [sp, #20]
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	9803      	ldr	r0, [sp, #12]
 800bfca:	f000 fb2d 	bl	800c628 <__i2b>
 800bfce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bfd0:	0006      	movs	r6, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d100      	bne.n	800bfd8 <_dtoa_r+0x824>
 800bfd6:	e1bc      	b.n	800c352 <_dtoa_r+0xb9e>
 800bfd8:	001a      	movs	r2, r3
 800bfda:	0001      	movs	r1, r0
 800bfdc:	9803      	ldr	r0, [sp, #12]
 800bfde:	f000 fbed 	bl	800c7bc <__pow5mult>
 800bfe2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bfe4:	0006      	movs	r6, r0
 800bfe6:	2500      	movs	r5, #0
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	dc16      	bgt.n	800c01a <_dtoa_r+0x866>
 800bfec:	2500      	movs	r5, #0
 800bfee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bff0:	42ab      	cmp	r3, r5
 800bff2:	d10e      	bne.n	800c012 <_dtoa_r+0x85e>
 800bff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bff6:	031b      	lsls	r3, r3, #12
 800bff8:	42ab      	cmp	r3, r5
 800bffa:	d10a      	bne.n	800c012 <_dtoa_r+0x85e>
 800bffc:	4b8d      	ldr	r3, [pc, #564]	@ (800c234 <_dtoa_r+0xa80>)
 800bffe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c000:	4213      	tst	r3, r2
 800c002:	d006      	beq.n	800c012 <_dtoa_r+0x85e>
 800c004:	9b06      	ldr	r3, [sp, #24]
 800c006:	3501      	adds	r5, #1
 800c008:	3301      	adds	r3, #1
 800c00a:	9306      	str	r3, [sp, #24]
 800c00c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c00e:	3301      	adds	r3, #1
 800c010:	930d      	str	r3, [sp, #52]	@ 0x34
 800c012:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c014:	2001      	movs	r0, #1
 800c016:	2b00      	cmp	r3, #0
 800c018:	d008      	beq.n	800c02c <_dtoa_r+0x878>
 800c01a:	6933      	ldr	r3, [r6, #16]
 800c01c:	3303      	adds	r3, #3
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	18f3      	adds	r3, r6, r3
 800c022:	6858      	ldr	r0, [r3, #4]
 800c024:	f000 fab0 	bl	800c588 <__hi0bits>
 800c028:	2320      	movs	r3, #32
 800c02a:	1a18      	subs	r0, r3, r0
 800c02c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c02e:	1818      	adds	r0, r3, r0
 800c030:	0002      	movs	r2, r0
 800c032:	231f      	movs	r3, #31
 800c034:	401a      	ands	r2, r3
 800c036:	4218      	tst	r0, r3
 800c038:	d065      	beq.n	800c106 <_dtoa_r+0x952>
 800c03a:	3301      	adds	r3, #1
 800c03c:	1a9b      	subs	r3, r3, r2
 800c03e:	2b04      	cmp	r3, #4
 800c040:	dd5d      	ble.n	800c0fe <_dtoa_r+0x94a>
 800c042:	231c      	movs	r3, #28
 800c044:	1a9b      	subs	r3, r3, r2
 800c046:	9a06      	ldr	r2, [sp, #24]
 800c048:	18e4      	adds	r4, r4, r3
 800c04a:	18d2      	adds	r2, r2, r3
 800c04c:	9206      	str	r2, [sp, #24]
 800c04e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c050:	18d3      	adds	r3, r2, r3
 800c052:	930d      	str	r3, [sp, #52]	@ 0x34
 800c054:	9b06      	ldr	r3, [sp, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	dd05      	ble.n	800c066 <_dtoa_r+0x8b2>
 800c05a:	001a      	movs	r2, r3
 800c05c:	9905      	ldr	r1, [sp, #20]
 800c05e:	9803      	ldr	r0, [sp, #12]
 800c060:	f000 fc08 	bl	800c874 <__lshift>
 800c064:	9005      	str	r0, [sp, #20]
 800c066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c068:	2b00      	cmp	r3, #0
 800c06a:	dd05      	ble.n	800c078 <_dtoa_r+0x8c4>
 800c06c:	0031      	movs	r1, r6
 800c06e:	001a      	movs	r2, r3
 800c070:	9803      	ldr	r0, [sp, #12]
 800c072:	f000 fbff 	bl	800c874 <__lshift>
 800c076:	0006      	movs	r6, r0
 800c078:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d045      	beq.n	800c10a <_dtoa_r+0x956>
 800c07e:	0031      	movs	r1, r6
 800c080:	9805      	ldr	r0, [sp, #20]
 800c082:	f000 fc63 	bl	800c94c <__mcmp>
 800c086:	2800      	cmp	r0, #0
 800c088:	da3f      	bge.n	800c10a <_dtoa_r+0x956>
 800c08a:	9b04      	ldr	r3, [sp, #16]
 800c08c:	220a      	movs	r2, #10
 800c08e:	3b01      	subs	r3, #1
 800c090:	930c      	str	r3, [sp, #48]	@ 0x30
 800c092:	9905      	ldr	r1, [sp, #20]
 800c094:	2300      	movs	r3, #0
 800c096:	9803      	ldr	r0, [sp, #12]
 800c098:	f000 fa32 	bl	800c500 <__multadd>
 800c09c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c09e:	9005      	str	r0, [sp, #20]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d100      	bne.n	800c0a6 <_dtoa_r+0x8f2>
 800c0a4:	e15c      	b.n	800c360 <_dtoa_r+0xbac>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	0039      	movs	r1, r7
 800c0aa:	220a      	movs	r2, #10
 800c0ac:	9803      	ldr	r0, [sp, #12]
 800c0ae:	f000 fa27 	bl	800c500 <__multadd>
 800c0b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0b4:	0007      	movs	r7, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	dc55      	bgt.n	800c166 <_dtoa_r+0x9b2>
 800c0ba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	dc2d      	bgt.n	800c11c <_dtoa_r+0x968>
 800c0c0:	e051      	b.n	800c166 <_dtoa_r+0x9b2>
 800c0c2:	2336      	movs	r3, #54	@ 0x36
 800c0c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c0c6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c0c8:	9c06      	ldr	r4, [sp, #24]
 800c0ca:	1a9b      	subs	r3, r3, r2
 800c0cc:	e73c      	b.n	800bf48 <_dtoa_r+0x794>
 800c0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d0:	1e5d      	subs	r5, r3, #1
 800c0d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0d4:	42ab      	cmp	r3, r5
 800c0d6:	db08      	blt.n	800c0ea <_dtoa_r+0x936>
 800c0d8:	1b5d      	subs	r5, r3, r5
 800c0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0dc:	9c06      	ldr	r4, [sp, #24]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	db00      	blt.n	800c0e4 <_dtoa_r+0x930>
 800c0e2:	e731      	b.n	800bf48 <_dtoa_r+0x794>
 800c0e4:	1ae4      	subs	r4, r4, r3
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e72e      	b.n	800bf48 <_dtoa_r+0x794>
 800c0ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c0ee:	1aeb      	subs	r3, r5, r3
 800c0f0:	18d3      	adds	r3, r2, r3
 800c0f2:	950f      	str	r5, [sp, #60]	@ 0x3c
 800c0f4:	9314      	str	r3, [sp, #80]	@ 0x50
 800c0f6:	2500      	movs	r5, #0
 800c0f8:	e7ef      	b.n	800c0da <_dtoa_r+0x926>
 800c0fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c0fc:	e75e      	b.n	800bfbc <_dtoa_r+0x808>
 800c0fe:	2b04      	cmp	r3, #4
 800c100:	d0a8      	beq.n	800c054 <_dtoa_r+0x8a0>
 800c102:	331c      	adds	r3, #28
 800c104:	e79f      	b.n	800c046 <_dtoa_r+0x892>
 800c106:	0013      	movs	r3, r2
 800c108:	e7fb      	b.n	800c102 <_dtoa_r+0x94e>
 800c10a:	9b04      	ldr	r3, [sp, #16]
 800c10c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c110:	930e      	str	r3, [sp, #56]	@ 0x38
 800c112:	2b00      	cmp	r3, #0
 800c114:	dc23      	bgt.n	800c15e <_dtoa_r+0x9aa>
 800c116:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c118:	2b02      	cmp	r3, #2
 800c11a:	dd20      	ble.n	800c15e <_dtoa_r+0x9aa>
 800c11c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d000      	beq.n	800c124 <_dtoa_r+0x970>
 800c122:	e6b5      	b.n	800be90 <_dtoa_r+0x6dc>
 800c124:	0031      	movs	r1, r6
 800c126:	2205      	movs	r2, #5
 800c128:	9803      	ldr	r0, [sp, #12]
 800c12a:	f000 f9e9 	bl	800c500 <__multadd>
 800c12e:	0006      	movs	r6, r0
 800c130:	0001      	movs	r1, r0
 800c132:	9805      	ldr	r0, [sp, #20]
 800c134:	f000 fc0a 	bl	800c94c <__mcmp>
 800c138:	2800      	cmp	r0, #0
 800c13a:	dc00      	bgt.n	800c13e <_dtoa_r+0x98a>
 800c13c:	e6a8      	b.n	800be90 <_dtoa_r+0x6dc>
 800c13e:	9b08      	ldr	r3, [sp, #32]
 800c140:	9a08      	ldr	r2, [sp, #32]
 800c142:	1c5c      	adds	r4, r3, #1
 800c144:	2331      	movs	r3, #49	@ 0x31
 800c146:	7013      	strb	r3, [r2, #0]
 800c148:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c14a:	3301      	adds	r3, #1
 800c14c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c14e:	e6a3      	b.n	800be98 <_dtoa_r+0x6e4>
 800c150:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800c152:	0037      	movs	r7, r6
 800c154:	e7f3      	b.n	800c13e <_dtoa_r+0x98a>
 800c156:	9b04      	ldr	r3, [sp, #16]
 800c158:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800c15a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c15c:	e7f9      	b.n	800c152 <_dtoa_r+0x99e>
 800c15e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c160:	2b00      	cmp	r3, #0
 800c162:	d100      	bne.n	800c166 <_dtoa_r+0x9b2>
 800c164:	e100      	b.n	800c368 <_dtoa_r+0xbb4>
 800c166:	2c00      	cmp	r4, #0
 800c168:	dd05      	ble.n	800c176 <_dtoa_r+0x9c2>
 800c16a:	0039      	movs	r1, r7
 800c16c:	0022      	movs	r2, r4
 800c16e:	9803      	ldr	r0, [sp, #12]
 800c170:	f000 fb80 	bl	800c874 <__lshift>
 800c174:	0007      	movs	r7, r0
 800c176:	0038      	movs	r0, r7
 800c178:	2d00      	cmp	r5, #0
 800c17a:	d018      	beq.n	800c1ae <_dtoa_r+0x9fa>
 800c17c:	6879      	ldr	r1, [r7, #4]
 800c17e:	9803      	ldr	r0, [sp, #12]
 800c180:	f000 f956 	bl	800c430 <_Balloc>
 800c184:	1e04      	subs	r4, r0, #0
 800c186:	d105      	bne.n	800c194 <_dtoa_r+0x9e0>
 800c188:	0022      	movs	r2, r4
 800c18a:	4b2b      	ldr	r3, [pc, #172]	@ (800c238 <_dtoa_r+0xa84>)
 800c18c:	482b      	ldr	r0, [pc, #172]	@ (800c23c <_dtoa_r+0xa88>)
 800c18e:	492c      	ldr	r1, [pc, #176]	@ (800c240 <_dtoa_r+0xa8c>)
 800c190:	f7ff fb25 	bl	800b7de <_dtoa_r+0x2a>
 800c194:	0039      	movs	r1, r7
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	310c      	adds	r1, #12
 800c19a:	3202      	adds	r2, #2
 800c19c:	0092      	lsls	r2, r2, #2
 800c19e:	300c      	adds	r0, #12
 800c1a0:	f000 ff0c 	bl	800cfbc <memcpy>
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	0021      	movs	r1, r4
 800c1a8:	9803      	ldr	r0, [sp, #12]
 800c1aa:	f000 fb63 	bl	800c874 <__lshift>
 800c1ae:	9b08      	ldr	r3, [sp, #32]
 800c1b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1b2:	9306      	str	r3, [sp, #24]
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	189b      	adds	r3, r3, r2
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	9704      	str	r7, [sp, #16]
 800c1bc:	0007      	movs	r7, r0
 800c1be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c1c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	930e      	str	r3, [sp, #56]	@ 0x38
 800c1c6:	0031      	movs	r1, r6
 800c1c8:	9805      	ldr	r0, [sp, #20]
 800c1ca:	f7ff fa65 	bl	800b698 <quorem>
 800c1ce:	9904      	ldr	r1, [sp, #16]
 800c1d0:	0005      	movs	r5, r0
 800c1d2:	900a      	str	r0, [sp, #40]	@ 0x28
 800c1d4:	9805      	ldr	r0, [sp, #20]
 800c1d6:	f000 fbb9 	bl	800c94c <__mcmp>
 800c1da:	003a      	movs	r2, r7
 800c1dc:	900d      	str	r0, [sp, #52]	@ 0x34
 800c1de:	0031      	movs	r1, r6
 800c1e0:	9803      	ldr	r0, [sp, #12]
 800c1e2:	f000 fbcf 	bl	800c984 <__mdiff>
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	68c3      	ldr	r3, [r0, #12]
 800c1ea:	0004      	movs	r4, r0
 800c1ec:	3530      	adds	r5, #48	@ 0x30
 800c1ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d104      	bne.n	800c1fe <_dtoa_r+0xa4a>
 800c1f4:	0001      	movs	r1, r0
 800c1f6:	9805      	ldr	r0, [sp, #20]
 800c1f8:	f000 fba8 	bl	800c94c <__mcmp>
 800c1fc:	9009      	str	r0, [sp, #36]	@ 0x24
 800c1fe:	0021      	movs	r1, r4
 800c200:	9803      	ldr	r0, [sp, #12]
 800c202:	f000 f959 	bl	800c4b8 <_Bfree>
 800c206:	9b06      	ldr	r3, [sp, #24]
 800c208:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c20a:	1c5c      	adds	r4, r3, #1
 800c20c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c20e:	4313      	orrs	r3, r2
 800c210:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c212:	4313      	orrs	r3, r2
 800c214:	d116      	bne.n	800c244 <_dtoa_r+0xa90>
 800c216:	2d39      	cmp	r5, #57	@ 0x39
 800c218:	d02f      	beq.n	800c27a <_dtoa_r+0xac6>
 800c21a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	dd01      	ble.n	800c224 <_dtoa_r+0xa70>
 800c220:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c222:	3531      	adds	r5, #49	@ 0x31
 800c224:	9b06      	ldr	r3, [sp, #24]
 800c226:	701d      	strb	r5, [r3, #0]
 800c228:	e638      	b.n	800be9c <_dtoa_r+0x6e8>
 800c22a:	46c0      	nop			@ (mov r8, r8)
 800c22c:	40240000 	.word	0x40240000
 800c230:	00000433 	.word	0x00000433
 800c234:	7ff00000 	.word	0x7ff00000
 800c238:	0800d9c0 	.word	0x0800d9c0
 800c23c:	0800d968 	.word	0x0800d968
 800c240:	000002ef 	.word	0x000002ef
 800c244:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c246:	2b00      	cmp	r3, #0
 800c248:	db04      	blt.n	800c254 <_dtoa_r+0xaa0>
 800c24a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c24c:	4313      	orrs	r3, r2
 800c24e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c250:	4313      	orrs	r3, r2
 800c252:	d11e      	bne.n	800c292 <_dtoa_r+0xade>
 800c254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c256:	2b00      	cmp	r3, #0
 800c258:	dde4      	ble.n	800c224 <_dtoa_r+0xa70>
 800c25a:	9905      	ldr	r1, [sp, #20]
 800c25c:	2201      	movs	r2, #1
 800c25e:	9803      	ldr	r0, [sp, #12]
 800c260:	f000 fb08 	bl	800c874 <__lshift>
 800c264:	0031      	movs	r1, r6
 800c266:	9005      	str	r0, [sp, #20]
 800c268:	f000 fb70 	bl	800c94c <__mcmp>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	dc02      	bgt.n	800c276 <_dtoa_r+0xac2>
 800c270:	d1d8      	bne.n	800c224 <_dtoa_r+0xa70>
 800c272:	07eb      	lsls	r3, r5, #31
 800c274:	d5d6      	bpl.n	800c224 <_dtoa_r+0xa70>
 800c276:	2d39      	cmp	r5, #57	@ 0x39
 800c278:	d1d2      	bne.n	800c220 <_dtoa_r+0xa6c>
 800c27a:	2339      	movs	r3, #57	@ 0x39
 800c27c:	9a06      	ldr	r2, [sp, #24]
 800c27e:	7013      	strb	r3, [r2, #0]
 800c280:	0023      	movs	r3, r4
 800c282:	001c      	movs	r4, r3
 800c284:	3b01      	subs	r3, #1
 800c286:	781a      	ldrb	r2, [r3, #0]
 800c288:	2a39      	cmp	r2, #57	@ 0x39
 800c28a:	d04f      	beq.n	800c32c <_dtoa_r+0xb78>
 800c28c:	3201      	adds	r2, #1
 800c28e:	701a      	strb	r2, [r3, #0]
 800c290:	e604      	b.n	800be9c <_dtoa_r+0x6e8>
 800c292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c294:	2b00      	cmp	r3, #0
 800c296:	dd03      	ble.n	800c2a0 <_dtoa_r+0xaec>
 800c298:	2d39      	cmp	r5, #57	@ 0x39
 800c29a:	d0ee      	beq.n	800c27a <_dtoa_r+0xac6>
 800c29c:	3501      	adds	r5, #1
 800c29e:	e7c1      	b.n	800c224 <_dtoa_r+0xa70>
 800c2a0:	9b06      	ldr	r3, [sp, #24]
 800c2a2:	9a06      	ldr	r2, [sp, #24]
 800c2a4:	701d      	strb	r5, [r3, #0]
 800c2a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d02a      	beq.n	800c302 <_dtoa_r+0xb4e>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	220a      	movs	r2, #10
 800c2b0:	9905      	ldr	r1, [sp, #20]
 800c2b2:	9803      	ldr	r0, [sp, #12]
 800c2b4:	f000 f924 	bl	800c500 <__multadd>
 800c2b8:	9b04      	ldr	r3, [sp, #16]
 800c2ba:	9005      	str	r0, [sp, #20]
 800c2bc:	42bb      	cmp	r3, r7
 800c2be:	d109      	bne.n	800c2d4 <_dtoa_r+0xb20>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	220a      	movs	r2, #10
 800c2c4:	9904      	ldr	r1, [sp, #16]
 800c2c6:	9803      	ldr	r0, [sp, #12]
 800c2c8:	f000 f91a 	bl	800c500 <__multadd>
 800c2cc:	9004      	str	r0, [sp, #16]
 800c2ce:	0007      	movs	r7, r0
 800c2d0:	9406      	str	r4, [sp, #24]
 800c2d2:	e778      	b.n	800c1c6 <_dtoa_r+0xa12>
 800c2d4:	9904      	ldr	r1, [sp, #16]
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	220a      	movs	r2, #10
 800c2da:	9803      	ldr	r0, [sp, #12]
 800c2dc:	f000 f910 	bl	800c500 <__multadd>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	9004      	str	r0, [sp, #16]
 800c2e4:	220a      	movs	r2, #10
 800c2e6:	0039      	movs	r1, r7
 800c2e8:	9803      	ldr	r0, [sp, #12]
 800c2ea:	f000 f909 	bl	800c500 <__multadd>
 800c2ee:	e7ee      	b.n	800c2ce <_dtoa_r+0xb1a>
 800c2f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2f2:	2401      	movs	r4, #1
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	dd00      	ble.n	800c2fa <_dtoa_r+0xb46>
 800c2f8:	001c      	movs	r4, r3
 800c2fa:	9b08      	ldr	r3, [sp, #32]
 800c2fc:	191c      	adds	r4, r3, r4
 800c2fe:	2300      	movs	r3, #0
 800c300:	9304      	str	r3, [sp, #16]
 800c302:	9905      	ldr	r1, [sp, #20]
 800c304:	2201      	movs	r2, #1
 800c306:	9803      	ldr	r0, [sp, #12]
 800c308:	f000 fab4 	bl	800c874 <__lshift>
 800c30c:	0031      	movs	r1, r6
 800c30e:	9005      	str	r0, [sp, #20]
 800c310:	f000 fb1c 	bl	800c94c <__mcmp>
 800c314:	2800      	cmp	r0, #0
 800c316:	dcb3      	bgt.n	800c280 <_dtoa_r+0xacc>
 800c318:	d101      	bne.n	800c31e <_dtoa_r+0xb6a>
 800c31a:	07ed      	lsls	r5, r5, #31
 800c31c:	d4b0      	bmi.n	800c280 <_dtoa_r+0xacc>
 800c31e:	0023      	movs	r3, r4
 800c320:	001c      	movs	r4, r3
 800c322:	3b01      	subs	r3, #1
 800c324:	781a      	ldrb	r2, [r3, #0]
 800c326:	2a30      	cmp	r2, #48	@ 0x30
 800c328:	d0fa      	beq.n	800c320 <_dtoa_r+0xb6c>
 800c32a:	e5b7      	b.n	800be9c <_dtoa_r+0x6e8>
 800c32c:	9a08      	ldr	r2, [sp, #32]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d1a7      	bne.n	800c282 <_dtoa_r+0xace>
 800c332:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c334:	3301      	adds	r3, #1
 800c336:	930c      	str	r3, [sp, #48]	@ 0x30
 800c338:	2331      	movs	r3, #49	@ 0x31
 800c33a:	7013      	strb	r3, [r2, #0]
 800c33c:	e5ae      	b.n	800be9c <_dtoa_r+0x6e8>
 800c33e:	4b15      	ldr	r3, [pc, #84]	@ (800c394 <_dtoa_r+0xbe0>)
 800c340:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c342:	9308      	str	r3, [sp, #32]
 800c344:	4b14      	ldr	r3, [pc, #80]	@ (800c398 <_dtoa_r+0xbe4>)
 800c346:	2a00      	cmp	r2, #0
 800c348:	d001      	beq.n	800c34e <_dtoa_r+0xb9a>
 800c34a:	f7ff fa7b 	bl	800b844 <_dtoa_r+0x90>
 800c34e:	f7ff fa7b 	bl	800b848 <_dtoa_r+0x94>
 800c352:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c354:	2b01      	cmp	r3, #1
 800c356:	dc00      	bgt.n	800c35a <_dtoa_r+0xba6>
 800c358:	e648      	b.n	800bfec <_dtoa_r+0x838>
 800c35a:	2001      	movs	r0, #1
 800c35c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c35e:	e665      	b.n	800c02c <_dtoa_r+0x878>
 800c360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c362:	2b00      	cmp	r3, #0
 800c364:	dc00      	bgt.n	800c368 <_dtoa_r+0xbb4>
 800c366:	e6d6      	b.n	800c116 <_dtoa_r+0x962>
 800c368:	2400      	movs	r4, #0
 800c36a:	0031      	movs	r1, r6
 800c36c:	9805      	ldr	r0, [sp, #20]
 800c36e:	f7ff f993 	bl	800b698 <quorem>
 800c372:	9b08      	ldr	r3, [sp, #32]
 800c374:	3030      	adds	r0, #48	@ 0x30
 800c376:	5518      	strb	r0, [r3, r4]
 800c378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c37a:	3401      	adds	r4, #1
 800c37c:	0005      	movs	r5, r0
 800c37e:	429c      	cmp	r4, r3
 800c380:	dab6      	bge.n	800c2f0 <_dtoa_r+0xb3c>
 800c382:	2300      	movs	r3, #0
 800c384:	220a      	movs	r2, #10
 800c386:	9905      	ldr	r1, [sp, #20]
 800c388:	9803      	ldr	r0, [sp, #12]
 800c38a:	f000 f8b9 	bl	800c500 <__multadd>
 800c38e:	9005      	str	r0, [sp, #20]
 800c390:	e7eb      	b.n	800c36a <_dtoa_r+0xbb6>
 800c392:	46c0      	nop			@ (mov r8, r8)
 800c394:	0800d944 	.word	0x0800d944
 800c398:	0800d94c 	.word	0x0800d94c

0800c39c <_free_r>:
 800c39c:	b570      	push	{r4, r5, r6, lr}
 800c39e:	0005      	movs	r5, r0
 800c3a0:	1e0c      	subs	r4, r1, #0
 800c3a2:	d010      	beq.n	800c3c6 <_free_r+0x2a>
 800c3a4:	3c04      	subs	r4, #4
 800c3a6:	6823      	ldr	r3, [r4, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	da00      	bge.n	800c3ae <_free_r+0x12>
 800c3ac:	18e4      	adds	r4, r4, r3
 800c3ae:	0028      	movs	r0, r5
 800c3b0:	f7fe faf0 	bl	800a994 <__malloc_lock>
 800c3b4:	4a1d      	ldr	r2, [pc, #116]	@ (800c42c <_free_r+0x90>)
 800c3b6:	6813      	ldr	r3, [r2, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d105      	bne.n	800c3c8 <_free_r+0x2c>
 800c3bc:	6063      	str	r3, [r4, #4]
 800c3be:	6014      	str	r4, [r2, #0]
 800c3c0:	0028      	movs	r0, r5
 800c3c2:	f7fe faef 	bl	800a9a4 <__malloc_unlock>
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}
 800c3c8:	42a3      	cmp	r3, r4
 800c3ca:	d908      	bls.n	800c3de <_free_r+0x42>
 800c3cc:	6820      	ldr	r0, [r4, #0]
 800c3ce:	1821      	adds	r1, r4, r0
 800c3d0:	428b      	cmp	r3, r1
 800c3d2:	d1f3      	bne.n	800c3bc <_free_r+0x20>
 800c3d4:	6819      	ldr	r1, [r3, #0]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	1809      	adds	r1, r1, r0
 800c3da:	6021      	str	r1, [r4, #0]
 800c3dc:	e7ee      	b.n	800c3bc <_free_r+0x20>
 800c3de:	001a      	movs	r2, r3
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d001      	beq.n	800c3ea <_free_r+0x4e>
 800c3e6:	42a3      	cmp	r3, r4
 800c3e8:	d9f9      	bls.n	800c3de <_free_r+0x42>
 800c3ea:	6811      	ldr	r1, [r2, #0]
 800c3ec:	1850      	adds	r0, r2, r1
 800c3ee:	42a0      	cmp	r0, r4
 800c3f0:	d10b      	bne.n	800c40a <_free_r+0x6e>
 800c3f2:	6820      	ldr	r0, [r4, #0]
 800c3f4:	1809      	adds	r1, r1, r0
 800c3f6:	1850      	adds	r0, r2, r1
 800c3f8:	6011      	str	r1, [r2, #0]
 800c3fa:	4283      	cmp	r3, r0
 800c3fc:	d1e0      	bne.n	800c3c0 <_free_r+0x24>
 800c3fe:	6818      	ldr	r0, [r3, #0]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	1841      	adds	r1, r0, r1
 800c404:	6011      	str	r1, [r2, #0]
 800c406:	6053      	str	r3, [r2, #4]
 800c408:	e7da      	b.n	800c3c0 <_free_r+0x24>
 800c40a:	42a0      	cmp	r0, r4
 800c40c:	d902      	bls.n	800c414 <_free_r+0x78>
 800c40e:	230c      	movs	r3, #12
 800c410:	602b      	str	r3, [r5, #0]
 800c412:	e7d5      	b.n	800c3c0 <_free_r+0x24>
 800c414:	6820      	ldr	r0, [r4, #0]
 800c416:	1821      	adds	r1, r4, r0
 800c418:	428b      	cmp	r3, r1
 800c41a:	d103      	bne.n	800c424 <_free_r+0x88>
 800c41c:	6819      	ldr	r1, [r3, #0]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	1809      	adds	r1, r1, r0
 800c422:	6021      	str	r1, [r4, #0]
 800c424:	6063      	str	r3, [r4, #4]
 800c426:	6054      	str	r4, [r2, #4]
 800c428:	e7ca      	b.n	800c3c0 <_free_r+0x24>
 800c42a:	46c0      	nop			@ (mov r8, r8)
 800c42c:	20000784 	.word	0x20000784

0800c430 <_Balloc>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	69c5      	ldr	r5, [r0, #28]
 800c434:	0006      	movs	r6, r0
 800c436:	000c      	movs	r4, r1
 800c438:	2d00      	cmp	r5, #0
 800c43a:	d10e      	bne.n	800c45a <_Balloc+0x2a>
 800c43c:	2010      	movs	r0, #16
 800c43e:	f7fe f9fd 	bl	800a83c <malloc>
 800c442:	1e02      	subs	r2, r0, #0
 800c444:	61f0      	str	r0, [r6, #28]
 800c446:	d104      	bne.n	800c452 <_Balloc+0x22>
 800c448:	216b      	movs	r1, #107	@ 0x6b
 800c44a:	4b19      	ldr	r3, [pc, #100]	@ (800c4b0 <_Balloc+0x80>)
 800c44c:	4819      	ldr	r0, [pc, #100]	@ (800c4b4 <_Balloc+0x84>)
 800c44e:	f000 fdbf 	bl	800cfd0 <__assert_func>
 800c452:	6045      	str	r5, [r0, #4]
 800c454:	6085      	str	r5, [r0, #8]
 800c456:	6005      	str	r5, [r0, #0]
 800c458:	60c5      	str	r5, [r0, #12]
 800c45a:	69f5      	ldr	r5, [r6, #28]
 800c45c:	68eb      	ldr	r3, [r5, #12]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d013      	beq.n	800c48a <_Balloc+0x5a>
 800c462:	69f3      	ldr	r3, [r6, #28]
 800c464:	00a2      	lsls	r2, r4, #2
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	189b      	adds	r3, r3, r2
 800c46a:	6818      	ldr	r0, [r3, #0]
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d118      	bne.n	800c4a2 <_Balloc+0x72>
 800c470:	2101      	movs	r1, #1
 800c472:	000d      	movs	r5, r1
 800c474:	40a5      	lsls	r5, r4
 800c476:	1d6a      	adds	r2, r5, #5
 800c478:	0030      	movs	r0, r6
 800c47a:	0092      	lsls	r2, r2, #2
 800c47c:	f000 fdc6 	bl	800d00c <_calloc_r>
 800c480:	2800      	cmp	r0, #0
 800c482:	d00c      	beq.n	800c49e <_Balloc+0x6e>
 800c484:	6044      	str	r4, [r0, #4]
 800c486:	6085      	str	r5, [r0, #8]
 800c488:	e00d      	b.n	800c4a6 <_Balloc+0x76>
 800c48a:	2221      	movs	r2, #33	@ 0x21
 800c48c:	2104      	movs	r1, #4
 800c48e:	0030      	movs	r0, r6
 800c490:	f000 fdbc 	bl	800d00c <_calloc_r>
 800c494:	69f3      	ldr	r3, [r6, #28]
 800c496:	60e8      	str	r0, [r5, #12]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1e1      	bne.n	800c462 <_Balloc+0x32>
 800c49e:	2000      	movs	r0, #0
 800c4a0:	bd70      	pop	{r4, r5, r6, pc}
 800c4a2:	6802      	ldr	r2, [r0, #0]
 800c4a4:	601a      	str	r2, [r3, #0]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	6103      	str	r3, [r0, #16]
 800c4aa:	60c3      	str	r3, [r0, #12]
 800c4ac:	e7f8      	b.n	800c4a0 <_Balloc+0x70>
 800c4ae:	46c0      	nop			@ (mov r8, r8)
 800c4b0:	0800d951 	.word	0x0800d951
 800c4b4:	0800d9d1 	.word	0x0800d9d1

0800c4b8 <_Bfree>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	69c6      	ldr	r6, [r0, #28]
 800c4bc:	0005      	movs	r5, r0
 800c4be:	000c      	movs	r4, r1
 800c4c0:	2e00      	cmp	r6, #0
 800c4c2:	d10e      	bne.n	800c4e2 <_Bfree+0x2a>
 800c4c4:	2010      	movs	r0, #16
 800c4c6:	f7fe f9b9 	bl	800a83c <malloc>
 800c4ca:	1e02      	subs	r2, r0, #0
 800c4cc:	61e8      	str	r0, [r5, #28]
 800c4ce:	d104      	bne.n	800c4da <_Bfree+0x22>
 800c4d0:	218f      	movs	r1, #143	@ 0x8f
 800c4d2:	4b09      	ldr	r3, [pc, #36]	@ (800c4f8 <_Bfree+0x40>)
 800c4d4:	4809      	ldr	r0, [pc, #36]	@ (800c4fc <_Bfree+0x44>)
 800c4d6:	f000 fd7b 	bl	800cfd0 <__assert_func>
 800c4da:	6046      	str	r6, [r0, #4]
 800c4dc:	6086      	str	r6, [r0, #8]
 800c4de:	6006      	str	r6, [r0, #0]
 800c4e0:	60c6      	str	r6, [r0, #12]
 800c4e2:	2c00      	cmp	r4, #0
 800c4e4:	d007      	beq.n	800c4f6 <_Bfree+0x3e>
 800c4e6:	69eb      	ldr	r3, [r5, #28]
 800c4e8:	6862      	ldr	r2, [r4, #4]
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	0092      	lsls	r2, r2, #2
 800c4ee:	189b      	adds	r3, r3, r2
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	6022      	str	r2, [r4, #0]
 800c4f4:	601c      	str	r4, [r3, #0]
 800c4f6:	bd70      	pop	{r4, r5, r6, pc}
 800c4f8:	0800d951 	.word	0x0800d951
 800c4fc:	0800d9d1 	.word	0x0800d9d1

0800c500 <__multadd>:
 800c500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c502:	000f      	movs	r7, r1
 800c504:	9001      	str	r0, [sp, #4]
 800c506:	000c      	movs	r4, r1
 800c508:	001e      	movs	r6, r3
 800c50a:	2000      	movs	r0, #0
 800c50c:	690d      	ldr	r5, [r1, #16]
 800c50e:	3714      	adds	r7, #20
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	3001      	adds	r0, #1
 800c514:	b299      	uxth	r1, r3
 800c516:	4351      	muls	r1, r2
 800c518:	0c1b      	lsrs	r3, r3, #16
 800c51a:	4353      	muls	r3, r2
 800c51c:	1989      	adds	r1, r1, r6
 800c51e:	0c0e      	lsrs	r6, r1, #16
 800c520:	199b      	adds	r3, r3, r6
 800c522:	0c1e      	lsrs	r6, r3, #16
 800c524:	b289      	uxth	r1, r1
 800c526:	041b      	lsls	r3, r3, #16
 800c528:	185b      	adds	r3, r3, r1
 800c52a:	c708      	stmia	r7!, {r3}
 800c52c:	4285      	cmp	r5, r0
 800c52e:	dcef      	bgt.n	800c510 <__multadd+0x10>
 800c530:	2e00      	cmp	r6, #0
 800c532:	d022      	beq.n	800c57a <__multadd+0x7a>
 800c534:	68a3      	ldr	r3, [r4, #8]
 800c536:	42ab      	cmp	r3, r5
 800c538:	dc19      	bgt.n	800c56e <__multadd+0x6e>
 800c53a:	6861      	ldr	r1, [r4, #4]
 800c53c:	9801      	ldr	r0, [sp, #4]
 800c53e:	3101      	adds	r1, #1
 800c540:	f7ff ff76 	bl	800c430 <_Balloc>
 800c544:	1e07      	subs	r7, r0, #0
 800c546:	d105      	bne.n	800c554 <__multadd+0x54>
 800c548:	003a      	movs	r2, r7
 800c54a:	21ba      	movs	r1, #186	@ 0xba
 800c54c:	4b0c      	ldr	r3, [pc, #48]	@ (800c580 <__multadd+0x80>)
 800c54e:	480d      	ldr	r0, [pc, #52]	@ (800c584 <__multadd+0x84>)
 800c550:	f000 fd3e 	bl	800cfd0 <__assert_func>
 800c554:	0021      	movs	r1, r4
 800c556:	6922      	ldr	r2, [r4, #16]
 800c558:	310c      	adds	r1, #12
 800c55a:	3202      	adds	r2, #2
 800c55c:	0092      	lsls	r2, r2, #2
 800c55e:	300c      	adds	r0, #12
 800c560:	f000 fd2c 	bl	800cfbc <memcpy>
 800c564:	0021      	movs	r1, r4
 800c566:	9801      	ldr	r0, [sp, #4]
 800c568:	f7ff ffa6 	bl	800c4b8 <_Bfree>
 800c56c:	003c      	movs	r4, r7
 800c56e:	1d2b      	adds	r3, r5, #4
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	18e3      	adds	r3, r4, r3
 800c574:	3501      	adds	r5, #1
 800c576:	605e      	str	r6, [r3, #4]
 800c578:	6125      	str	r5, [r4, #16]
 800c57a:	0020      	movs	r0, r4
 800c57c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c57e:	46c0      	nop			@ (mov r8, r8)
 800c580:	0800d9c0 	.word	0x0800d9c0
 800c584:	0800d9d1 	.word	0x0800d9d1

0800c588 <__hi0bits>:
 800c588:	2280      	movs	r2, #128	@ 0x80
 800c58a:	0003      	movs	r3, r0
 800c58c:	0252      	lsls	r2, r2, #9
 800c58e:	2000      	movs	r0, #0
 800c590:	4293      	cmp	r3, r2
 800c592:	d201      	bcs.n	800c598 <__hi0bits+0x10>
 800c594:	041b      	lsls	r3, r3, #16
 800c596:	3010      	adds	r0, #16
 800c598:	2280      	movs	r2, #128	@ 0x80
 800c59a:	0452      	lsls	r2, r2, #17
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d201      	bcs.n	800c5a4 <__hi0bits+0x1c>
 800c5a0:	3008      	adds	r0, #8
 800c5a2:	021b      	lsls	r3, r3, #8
 800c5a4:	2280      	movs	r2, #128	@ 0x80
 800c5a6:	0552      	lsls	r2, r2, #21
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d201      	bcs.n	800c5b0 <__hi0bits+0x28>
 800c5ac:	3004      	adds	r0, #4
 800c5ae:	011b      	lsls	r3, r3, #4
 800c5b0:	2280      	movs	r2, #128	@ 0x80
 800c5b2:	05d2      	lsls	r2, r2, #23
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d201      	bcs.n	800c5bc <__hi0bits+0x34>
 800c5b8:	3002      	adds	r0, #2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	db03      	blt.n	800c5c8 <__hi0bits+0x40>
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	4213      	tst	r3, r2
 800c5c4:	d100      	bne.n	800c5c8 <__hi0bits+0x40>
 800c5c6:	2020      	movs	r0, #32
 800c5c8:	4770      	bx	lr

0800c5ca <__lo0bits>:
 800c5ca:	6803      	ldr	r3, [r0, #0]
 800c5cc:	0001      	movs	r1, r0
 800c5ce:	2207      	movs	r2, #7
 800c5d0:	0018      	movs	r0, r3
 800c5d2:	4010      	ands	r0, r2
 800c5d4:	4213      	tst	r3, r2
 800c5d6:	d00d      	beq.n	800c5f4 <__lo0bits+0x2a>
 800c5d8:	3a06      	subs	r2, #6
 800c5da:	2000      	movs	r0, #0
 800c5dc:	4213      	tst	r3, r2
 800c5de:	d105      	bne.n	800c5ec <__lo0bits+0x22>
 800c5e0:	3002      	adds	r0, #2
 800c5e2:	4203      	tst	r3, r0
 800c5e4:	d003      	beq.n	800c5ee <__lo0bits+0x24>
 800c5e6:	40d3      	lsrs	r3, r2
 800c5e8:	0010      	movs	r0, r2
 800c5ea:	600b      	str	r3, [r1, #0]
 800c5ec:	4770      	bx	lr
 800c5ee:	089b      	lsrs	r3, r3, #2
 800c5f0:	600b      	str	r3, [r1, #0]
 800c5f2:	e7fb      	b.n	800c5ec <__lo0bits+0x22>
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	2a00      	cmp	r2, #0
 800c5f8:	d101      	bne.n	800c5fe <__lo0bits+0x34>
 800c5fa:	2010      	movs	r0, #16
 800c5fc:	0c1b      	lsrs	r3, r3, #16
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	2a00      	cmp	r2, #0
 800c602:	d101      	bne.n	800c608 <__lo0bits+0x3e>
 800c604:	3008      	adds	r0, #8
 800c606:	0a1b      	lsrs	r3, r3, #8
 800c608:	071a      	lsls	r2, r3, #28
 800c60a:	d101      	bne.n	800c610 <__lo0bits+0x46>
 800c60c:	3004      	adds	r0, #4
 800c60e:	091b      	lsrs	r3, r3, #4
 800c610:	079a      	lsls	r2, r3, #30
 800c612:	d101      	bne.n	800c618 <__lo0bits+0x4e>
 800c614:	3002      	adds	r0, #2
 800c616:	089b      	lsrs	r3, r3, #2
 800c618:	07da      	lsls	r2, r3, #31
 800c61a:	d4e9      	bmi.n	800c5f0 <__lo0bits+0x26>
 800c61c:	3001      	adds	r0, #1
 800c61e:	085b      	lsrs	r3, r3, #1
 800c620:	d1e6      	bne.n	800c5f0 <__lo0bits+0x26>
 800c622:	2020      	movs	r0, #32
 800c624:	e7e2      	b.n	800c5ec <__lo0bits+0x22>
	...

0800c628 <__i2b>:
 800c628:	b510      	push	{r4, lr}
 800c62a:	000c      	movs	r4, r1
 800c62c:	2101      	movs	r1, #1
 800c62e:	f7ff feff 	bl	800c430 <_Balloc>
 800c632:	2800      	cmp	r0, #0
 800c634:	d107      	bne.n	800c646 <__i2b+0x1e>
 800c636:	2146      	movs	r1, #70	@ 0x46
 800c638:	4c05      	ldr	r4, [pc, #20]	@ (800c650 <__i2b+0x28>)
 800c63a:	0002      	movs	r2, r0
 800c63c:	4b05      	ldr	r3, [pc, #20]	@ (800c654 <__i2b+0x2c>)
 800c63e:	0020      	movs	r0, r4
 800c640:	31ff      	adds	r1, #255	@ 0xff
 800c642:	f000 fcc5 	bl	800cfd0 <__assert_func>
 800c646:	2301      	movs	r3, #1
 800c648:	6144      	str	r4, [r0, #20]
 800c64a:	6103      	str	r3, [r0, #16]
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	46c0      	nop			@ (mov r8, r8)
 800c650:	0800d9d1 	.word	0x0800d9d1
 800c654:	0800d9c0 	.word	0x0800d9c0

0800c658 <__multiply>:
 800c658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c65a:	0014      	movs	r4, r2
 800c65c:	690a      	ldr	r2, [r1, #16]
 800c65e:	6923      	ldr	r3, [r4, #16]
 800c660:	000d      	movs	r5, r1
 800c662:	b08b      	sub	sp, #44	@ 0x2c
 800c664:	429a      	cmp	r2, r3
 800c666:	db02      	blt.n	800c66e <__multiply+0x16>
 800c668:	0023      	movs	r3, r4
 800c66a:	000c      	movs	r4, r1
 800c66c:	001d      	movs	r5, r3
 800c66e:	6927      	ldr	r7, [r4, #16]
 800c670:	692e      	ldr	r6, [r5, #16]
 800c672:	6861      	ldr	r1, [r4, #4]
 800c674:	19bb      	adds	r3, r7, r6
 800c676:	9303      	str	r3, [sp, #12]
 800c678:	68a3      	ldr	r3, [r4, #8]
 800c67a:	19ba      	adds	r2, r7, r6
 800c67c:	4293      	cmp	r3, r2
 800c67e:	da00      	bge.n	800c682 <__multiply+0x2a>
 800c680:	3101      	adds	r1, #1
 800c682:	f7ff fed5 	bl	800c430 <_Balloc>
 800c686:	9002      	str	r0, [sp, #8]
 800c688:	2800      	cmp	r0, #0
 800c68a:	d106      	bne.n	800c69a <__multiply+0x42>
 800c68c:	21b1      	movs	r1, #177	@ 0xb1
 800c68e:	4b49      	ldr	r3, [pc, #292]	@ (800c7b4 <__multiply+0x15c>)
 800c690:	4849      	ldr	r0, [pc, #292]	@ (800c7b8 <__multiply+0x160>)
 800c692:	9a02      	ldr	r2, [sp, #8]
 800c694:	0049      	lsls	r1, r1, #1
 800c696:	f000 fc9b 	bl	800cfd0 <__assert_func>
 800c69a:	9b02      	ldr	r3, [sp, #8]
 800c69c:	2200      	movs	r2, #0
 800c69e:	3314      	adds	r3, #20
 800c6a0:	469c      	mov	ip, r3
 800c6a2:	19bb      	adds	r3, r7, r6
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4463      	add	r3, ip
 800c6a8:	9304      	str	r3, [sp, #16]
 800c6aa:	4663      	mov	r3, ip
 800c6ac:	9904      	ldr	r1, [sp, #16]
 800c6ae:	428b      	cmp	r3, r1
 800c6b0:	d32a      	bcc.n	800c708 <__multiply+0xb0>
 800c6b2:	0023      	movs	r3, r4
 800c6b4:	00bf      	lsls	r7, r7, #2
 800c6b6:	3314      	adds	r3, #20
 800c6b8:	3514      	adds	r5, #20
 800c6ba:	9308      	str	r3, [sp, #32]
 800c6bc:	00b6      	lsls	r6, r6, #2
 800c6be:	19db      	adds	r3, r3, r7
 800c6c0:	9305      	str	r3, [sp, #20]
 800c6c2:	19ab      	adds	r3, r5, r6
 800c6c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6c6:	2304      	movs	r3, #4
 800c6c8:	9306      	str	r3, [sp, #24]
 800c6ca:	0023      	movs	r3, r4
 800c6cc:	9a05      	ldr	r2, [sp, #20]
 800c6ce:	3315      	adds	r3, #21
 800c6d0:	9501      	str	r5, [sp, #4]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d305      	bcc.n	800c6e2 <__multiply+0x8a>
 800c6d6:	1b13      	subs	r3, r2, r4
 800c6d8:	3b15      	subs	r3, #21
 800c6da:	089b      	lsrs	r3, r3, #2
 800c6dc:	3301      	adds	r3, #1
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	9306      	str	r3, [sp, #24]
 800c6e2:	9b01      	ldr	r3, [sp, #4]
 800c6e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d310      	bcc.n	800c70c <__multiply+0xb4>
 800c6ea:	9b03      	ldr	r3, [sp, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	dd05      	ble.n	800c6fc <__multiply+0xa4>
 800c6f0:	9b04      	ldr	r3, [sp, #16]
 800c6f2:	3b04      	subs	r3, #4
 800c6f4:	9304      	str	r3, [sp, #16]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d056      	beq.n	800c7aa <__multiply+0x152>
 800c6fc:	9b02      	ldr	r3, [sp, #8]
 800c6fe:	9a03      	ldr	r2, [sp, #12]
 800c700:	0018      	movs	r0, r3
 800c702:	611a      	str	r2, [r3, #16]
 800c704:	b00b      	add	sp, #44	@ 0x2c
 800c706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c708:	c304      	stmia	r3!, {r2}
 800c70a:	e7cf      	b.n	800c6ac <__multiply+0x54>
 800c70c:	9b01      	ldr	r3, [sp, #4]
 800c70e:	6818      	ldr	r0, [r3, #0]
 800c710:	b280      	uxth	r0, r0
 800c712:	2800      	cmp	r0, #0
 800c714:	d01e      	beq.n	800c754 <__multiply+0xfc>
 800c716:	4667      	mov	r7, ip
 800c718:	2500      	movs	r5, #0
 800c71a:	9e08      	ldr	r6, [sp, #32]
 800c71c:	ce02      	ldmia	r6!, {r1}
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	9307      	str	r3, [sp, #28]
 800c722:	b28b      	uxth	r3, r1
 800c724:	4343      	muls	r3, r0
 800c726:	001a      	movs	r2, r3
 800c728:	466b      	mov	r3, sp
 800c72a:	0c09      	lsrs	r1, r1, #16
 800c72c:	8b9b      	ldrh	r3, [r3, #28]
 800c72e:	4341      	muls	r1, r0
 800c730:	18d3      	adds	r3, r2, r3
 800c732:	9a07      	ldr	r2, [sp, #28]
 800c734:	195b      	adds	r3, r3, r5
 800c736:	0c12      	lsrs	r2, r2, #16
 800c738:	1889      	adds	r1, r1, r2
 800c73a:	0c1a      	lsrs	r2, r3, #16
 800c73c:	188a      	adds	r2, r1, r2
 800c73e:	b29b      	uxth	r3, r3
 800c740:	0c15      	lsrs	r5, r2, #16
 800c742:	0412      	lsls	r2, r2, #16
 800c744:	431a      	orrs	r2, r3
 800c746:	9b05      	ldr	r3, [sp, #20]
 800c748:	c704      	stmia	r7!, {r2}
 800c74a:	42b3      	cmp	r3, r6
 800c74c:	d8e6      	bhi.n	800c71c <__multiply+0xc4>
 800c74e:	4663      	mov	r3, ip
 800c750:	9a06      	ldr	r2, [sp, #24]
 800c752:	509d      	str	r5, [r3, r2]
 800c754:	9b01      	ldr	r3, [sp, #4]
 800c756:	6818      	ldr	r0, [r3, #0]
 800c758:	0c00      	lsrs	r0, r0, #16
 800c75a:	d020      	beq.n	800c79e <__multiply+0x146>
 800c75c:	4663      	mov	r3, ip
 800c75e:	0025      	movs	r5, r4
 800c760:	4661      	mov	r1, ip
 800c762:	2700      	movs	r7, #0
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	3514      	adds	r5, #20
 800c768:	682a      	ldr	r2, [r5, #0]
 800c76a:	680e      	ldr	r6, [r1, #0]
 800c76c:	b292      	uxth	r2, r2
 800c76e:	4342      	muls	r2, r0
 800c770:	0c36      	lsrs	r6, r6, #16
 800c772:	1992      	adds	r2, r2, r6
 800c774:	19d2      	adds	r2, r2, r7
 800c776:	0416      	lsls	r6, r2, #16
 800c778:	b29b      	uxth	r3, r3
 800c77a:	431e      	orrs	r6, r3
 800c77c:	600e      	str	r6, [r1, #0]
 800c77e:	cd40      	ldmia	r5!, {r6}
 800c780:	684b      	ldr	r3, [r1, #4]
 800c782:	0c36      	lsrs	r6, r6, #16
 800c784:	4346      	muls	r6, r0
 800c786:	b29b      	uxth	r3, r3
 800c788:	0c12      	lsrs	r2, r2, #16
 800c78a:	18f3      	adds	r3, r6, r3
 800c78c:	189b      	adds	r3, r3, r2
 800c78e:	9a05      	ldr	r2, [sp, #20]
 800c790:	0c1f      	lsrs	r7, r3, #16
 800c792:	3104      	adds	r1, #4
 800c794:	42aa      	cmp	r2, r5
 800c796:	d8e7      	bhi.n	800c768 <__multiply+0x110>
 800c798:	4662      	mov	r2, ip
 800c79a:	9906      	ldr	r1, [sp, #24]
 800c79c:	5053      	str	r3, [r2, r1]
 800c79e:	9b01      	ldr	r3, [sp, #4]
 800c7a0:	3304      	adds	r3, #4
 800c7a2:	9301      	str	r3, [sp, #4]
 800c7a4:	2304      	movs	r3, #4
 800c7a6:	449c      	add	ip, r3
 800c7a8:	e79b      	b.n	800c6e2 <__multiply+0x8a>
 800c7aa:	9b03      	ldr	r3, [sp, #12]
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	9303      	str	r3, [sp, #12]
 800c7b0:	e79b      	b.n	800c6ea <__multiply+0x92>
 800c7b2:	46c0      	nop			@ (mov r8, r8)
 800c7b4:	0800d9c0 	.word	0x0800d9c0
 800c7b8:	0800d9d1 	.word	0x0800d9d1

0800c7bc <__pow5mult>:
 800c7bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7be:	2303      	movs	r3, #3
 800c7c0:	0015      	movs	r5, r2
 800c7c2:	0007      	movs	r7, r0
 800c7c4:	000e      	movs	r6, r1
 800c7c6:	401a      	ands	r2, r3
 800c7c8:	421d      	tst	r5, r3
 800c7ca:	d008      	beq.n	800c7de <__pow5mult+0x22>
 800c7cc:	4925      	ldr	r1, [pc, #148]	@ (800c864 <__pow5mult+0xa8>)
 800c7ce:	3a01      	subs	r2, #1
 800c7d0:	0092      	lsls	r2, r2, #2
 800c7d2:	5852      	ldr	r2, [r2, r1]
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	0031      	movs	r1, r6
 800c7d8:	f7ff fe92 	bl	800c500 <__multadd>
 800c7dc:	0006      	movs	r6, r0
 800c7de:	10ad      	asrs	r5, r5, #2
 800c7e0:	d03d      	beq.n	800c85e <__pow5mult+0xa2>
 800c7e2:	69fc      	ldr	r4, [r7, #28]
 800c7e4:	2c00      	cmp	r4, #0
 800c7e6:	d10f      	bne.n	800c808 <__pow5mult+0x4c>
 800c7e8:	2010      	movs	r0, #16
 800c7ea:	f7fe f827 	bl	800a83c <malloc>
 800c7ee:	1e02      	subs	r2, r0, #0
 800c7f0:	61f8      	str	r0, [r7, #28]
 800c7f2:	d105      	bne.n	800c800 <__pow5mult+0x44>
 800c7f4:	21b4      	movs	r1, #180	@ 0xb4
 800c7f6:	4b1c      	ldr	r3, [pc, #112]	@ (800c868 <__pow5mult+0xac>)
 800c7f8:	481c      	ldr	r0, [pc, #112]	@ (800c86c <__pow5mult+0xb0>)
 800c7fa:	31ff      	adds	r1, #255	@ 0xff
 800c7fc:	f000 fbe8 	bl	800cfd0 <__assert_func>
 800c800:	6044      	str	r4, [r0, #4]
 800c802:	6084      	str	r4, [r0, #8]
 800c804:	6004      	str	r4, [r0, #0]
 800c806:	60c4      	str	r4, [r0, #12]
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	689c      	ldr	r4, [r3, #8]
 800c80c:	9301      	str	r3, [sp, #4]
 800c80e:	2c00      	cmp	r4, #0
 800c810:	d108      	bne.n	800c824 <__pow5mult+0x68>
 800c812:	0038      	movs	r0, r7
 800c814:	4916      	ldr	r1, [pc, #88]	@ (800c870 <__pow5mult+0xb4>)
 800c816:	f7ff ff07 	bl	800c628 <__i2b>
 800c81a:	9b01      	ldr	r3, [sp, #4]
 800c81c:	0004      	movs	r4, r0
 800c81e:	6098      	str	r0, [r3, #8]
 800c820:	2300      	movs	r3, #0
 800c822:	6003      	str	r3, [r0, #0]
 800c824:	2301      	movs	r3, #1
 800c826:	421d      	tst	r5, r3
 800c828:	d00a      	beq.n	800c840 <__pow5mult+0x84>
 800c82a:	0031      	movs	r1, r6
 800c82c:	0022      	movs	r2, r4
 800c82e:	0038      	movs	r0, r7
 800c830:	f7ff ff12 	bl	800c658 <__multiply>
 800c834:	0031      	movs	r1, r6
 800c836:	9001      	str	r0, [sp, #4]
 800c838:	0038      	movs	r0, r7
 800c83a:	f7ff fe3d 	bl	800c4b8 <_Bfree>
 800c83e:	9e01      	ldr	r6, [sp, #4]
 800c840:	106d      	asrs	r5, r5, #1
 800c842:	d00c      	beq.n	800c85e <__pow5mult+0xa2>
 800c844:	6820      	ldr	r0, [r4, #0]
 800c846:	2800      	cmp	r0, #0
 800c848:	d107      	bne.n	800c85a <__pow5mult+0x9e>
 800c84a:	0022      	movs	r2, r4
 800c84c:	0021      	movs	r1, r4
 800c84e:	0038      	movs	r0, r7
 800c850:	f7ff ff02 	bl	800c658 <__multiply>
 800c854:	2300      	movs	r3, #0
 800c856:	6020      	str	r0, [r4, #0]
 800c858:	6003      	str	r3, [r0, #0]
 800c85a:	0004      	movs	r4, r0
 800c85c:	e7e2      	b.n	800c824 <__pow5mult+0x68>
 800c85e:	0030      	movs	r0, r6
 800c860:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c862:	46c0      	nop			@ (mov r8, r8)
 800c864:	0800da2c 	.word	0x0800da2c
 800c868:	0800d951 	.word	0x0800d951
 800c86c:	0800d9d1 	.word	0x0800d9d1
 800c870:	00000271 	.word	0x00000271

0800c874 <__lshift>:
 800c874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c876:	000c      	movs	r4, r1
 800c878:	0016      	movs	r6, r2
 800c87a:	6923      	ldr	r3, [r4, #16]
 800c87c:	1157      	asrs	r7, r2, #5
 800c87e:	b085      	sub	sp, #20
 800c880:	18fb      	adds	r3, r7, r3
 800c882:	9301      	str	r3, [sp, #4]
 800c884:	3301      	adds	r3, #1
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	6849      	ldr	r1, [r1, #4]
 800c88a:	68a3      	ldr	r3, [r4, #8]
 800c88c:	9002      	str	r0, [sp, #8]
 800c88e:	9a00      	ldr	r2, [sp, #0]
 800c890:	4293      	cmp	r3, r2
 800c892:	db10      	blt.n	800c8b6 <__lshift+0x42>
 800c894:	9802      	ldr	r0, [sp, #8]
 800c896:	f7ff fdcb 	bl	800c430 <_Balloc>
 800c89a:	2300      	movs	r3, #0
 800c89c:	0001      	movs	r1, r0
 800c89e:	0005      	movs	r5, r0
 800c8a0:	001a      	movs	r2, r3
 800c8a2:	3114      	adds	r1, #20
 800c8a4:	4298      	cmp	r0, r3
 800c8a6:	d10c      	bne.n	800c8c2 <__lshift+0x4e>
 800c8a8:	21ef      	movs	r1, #239	@ 0xef
 800c8aa:	002a      	movs	r2, r5
 800c8ac:	4b25      	ldr	r3, [pc, #148]	@ (800c944 <__lshift+0xd0>)
 800c8ae:	4826      	ldr	r0, [pc, #152]	@ (800c948 <__lshift+0xd4>)
 800c8b0:	0049      	lsls	r1, r1, #1
 800c8b2:	f000 fb8d 	bl	800cfd0 <__assert_func>
 800c8b6:	3101      	adds	r1, #1
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	e7e8      	b.n	800c88e <__lshift+0x1a>
 800c8bc:	0098      	lsls	r0, r3, #2
 800c8be:	500a      	str	r2, [r1, r0]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	42bb      	cmp	r3, r7
 800c8c4:	dbfa      	blt.n	800c8bc <__lshift+0x48>
 800c8c6:	43fb      	mvns	r3, r7
 800c8c8:	17db      	asrs	r3, r3, #31
 800c8ca:	401f      	ands	r7, r3
 800c8cc:	00bf      	lsls	r7, r7, #2
 800c8ce:	0023      	movs	r3, r4
 800c8d0:	201f      	movs	r0, #31
 800c8d2:	19c9      	adds	r1, r1, r7
 800c8d4:	0037      	movs	r7, r6
 800c8d6:	6922      	ldr	r2, [r4, #16]
 800c8d8:	3314      	adds	r3, #20
 800c8da:	0092      	lsls	r2, r2, #2
 800c8dc:	189a      	adds	r2, r3, r2
 800c8de:	4007      	ands	r7, r0
 800c8e0:	4206      	tst	r6, r0
 800c8e2:	d029      	beq.n	800c938 <__lshift+0xc4>
 800c8e4:	3001      	adds	r0, #1
 800c8e6:	1bc0      	subs	r0, r0, r7
 800c8e8:	9003      	str	r0, [sp, #12]
 800c8ea:	468c      	mov	ip, r1
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	681e      	ldr	r6, [r3, #0]
 800c8f0:	40be      	lsls	r6, r7
 800c8f2:	4306      	orrs	r6, r0
 800c8f4:	4660      	mov	r0, ip
 800c8f6:	c040      	stmia	r0!, {r6}
 800c8f8:	4684      	mov	ip, r0
 800c8fa:	9e03      	ldr	r6, [sp, #12]
 800c8fc:	cb01      	ldmia	r3!, {r0}
 800c8fe:	40f0      	lsrs	r0, r6
 800c900:	429a      	cmp	r2, r3
 800c902:	d8f4      	bhi.n	800c8ee <__lshift+0x7a>
 800c904:	0026      	movs	r6, r4
 800c906:	3615      	adds	r6, #21
 800c908:	2304      	movs	r3, #4
 800c90a:	42b2      	cmp	r2, r6
 800c90c:	d304      	bcc.n	800c918 <__lshift+0xa4>
 800c90e:	1b13      	subs	r3, r2, r4
 800c910:	3b15      	subs	r3, #21
 800c912:	089b      	lsrs	r3, r3, #2
 800c914:	3301      	adds	r3, #1
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	50c8      	str	r0, [r1, r3]
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d002      	beq.n	800c924 <__lshift+0xb0>
 800c91e:	9b01      	ldr	r3, [sp, #4]
 800c920:	3302      	adds	r3, #2
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	9b00      	ldr	r3, [sp, #0]
 800c926:	9802      	ldr	r0, [sp, #8]
 800c928:	3b01      	subs	r3, #1
 800c92a:	0021      	movs	r1, r4
 800c92c:	612b      	str	r3, [r5, #16]
 800c92e:	f7ff fdc3 	bl	800c4b8 <_Bfree>
 800c932:	0028      	movs	r0, r5
 800c934:	b005      	add	sp, #20
 800c936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c938:	cb01      	ldmia	r3!, {r0}
 800c93a:	c101      	stmia	r1!, {r0}
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d8fb      	bhi.n	800c938 <__lshift+0xc4>
 800c940:	e7f0      	b.n	800c924 <__lshift+0xb0>
 800c942:	46c0      	nop			@ (mov r8, r8)
 800c944:	0800d9c0 	.word	0x0800d9c0
 800c948:	0800d9d1 	.word	0x0800d9d1

0800c94c <__mcmp>:
 800c94c:	b530      	push	{r4, r5, lr}
 800c94e:	690b      	ldr	r3, [r1, #16]
 800c950:	6904      	ldr	r4, [r0, #16]
 800c952:	0002      	movs	r2, r0
 800c954:	1ae0      	subs	r0, r4, r3
 800c956:	429c      	cmp	r4, r3
 800c958:	d10f      	bne.n	800c97a <__mcmp+0x2e>
 800c95a:	3214      	adds	r2, #20
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	3114      	adds	r1, #20
 800c960:	0014      	movs	r4, r2
 800c962:	18c9      	adds	r1, r1, r3
 800c964:	18d2      	adds	r2, r2, r3
 800c966:	3a04      	subs	r2, #4
 800c968:	3904      	subs	r1, #4
 800c96a:	6815      	ldr	r5, [r2, #0]
 800c96c:	680b      	ldr	r3, [r1, #0]
 800c96e:	429d      	cmp	r5, r3
 800c970:	d004      	beq.n	800c97c <__mcmp+0x30>
 800c972:	2001      	movs	r0, #1
 800c974:	429d      	cmp	r5, r3
 800c976:	d200      	bcs.n	800c97a <__mcmp+0x2e>
 800c978:	3802      	subs	r0, #2
 800c97a:	bd30      	pop	{r4, r5, pc}
 800c97c:	4294      	cmp	r4, r2
 800c97e:	d3f2      	bcc.n	800c966 <__mcmp+0x1a>
 800c980:	e7fb      	b.n	800c97a <__mcmp+0x2e>
	...

0800c984 <__mdiff>:
 800c984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c986:	000c      	movs	r4, r1
 800c988:	b087      	sub	sp, #28
 800c98a:	9000      	str	r0, [sp, #0]
 800c98c:	0011      	movs	r1, r2
 800c98e:	0020      	movs	r0, r4
 800c990:	0017      	movs	r7, r2
 800c992:	f7ff ffdb 	bl	800c94c <__mcmp>
 800c996:	1e05      	subs	r5, r0, #0
 800c998:	d110      	bne.n	800c9bc <__mdiff+0x38>
 800c99a:	0001      	movs	r1, r0
 800c99c:	9800      	ldr	r0, [sp, #0]
 800c99e:	f7ff fd47 	bl	800c430 <_Balloc>
 800c9a2:	1e02      	subs	r2, r0, #0
 800c9a4:	d104      	bne.n	800c9b0 <__mdiff+0x2c>
 800c9a6:	4b40      	ldr	r3, [pc, #256]	@ (800caa8 <__mdiff+0x124>)
 800c9a8:	4840      	ldr	r0, [pc, #256]	@ (800caac <__mdiff+0x128>)
 800c9aa:	4941      	ldr	r1, [pc, #260]	@ (800cab0 <__mdiff+0x12c>)
 800c9ac:	f000 fb10 	bl	800cfd0 <__assert_func>
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	6145      	str	r5, [r0, #20]
 800c9b4:	6103      	str	r3, [r0, #16]
 800c9b6:	0010      	movs	r0, r2
 800c9b8:	b007      	add	sp, #28
 800c9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9bc:	2600      	movs	r6, #0
 800c9be:	42b0      	cmp	r0, r6
 800c9c0:	da03      	bge.n	800c9ca <__mdiff+0x46>
 800c9c2:	0023      	movs	r3, r4
 800c9c4:	003c      	movs	r4, r7
 800c9c6:	001f      	movs	r7, r3
 800c9c8:	3601      	adds	r6, #1
 800c9ca:	6861      	ldr	r1, [r4, #4]
 800c9cc:	9800      	ldr	r0, [sp, #0]
 800c9ce:	f7ff fd2f 	bl	800c430 <_Balloc>
 800c9d2:	1e02      	subs	r2, r0, #0
 800c9d4:	d103      	bne.n	800c9de <__mdiff+0x5a>
 800c9d6:	4b34      	ldr	r3, [pc, #208]	@ (800caa8 <__mdiff+0x124>)
 800c9d8:	4834      	ldr	r0, [pc, #208]	@ (800caac <__mdiff+0x128>)
 800c9da:	4936      	ldr	r1, [pc, #216]	@ (800cab4 <__mdiff+0x130>)
 800c9dc:	e7e6      	b.n	800c9ac <__mdiff+0x28>
 800c9de:	6923      	ldr	r3, [r4, #16]
 800c9e0:	3414      	adds	r4, #20
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	18e3      	adds	r3, r4, r3
 800c9e8:	0021      	movs	r1, r4
 800c9ea:	9401      	str	r4, [sp, #4]
 800c9ec:	003c      	movs	r4, r7
 800c9ee:	9302      	str	r3, [sp, #8]
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	3414      	adds	r4, #20
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	18e3      	adds	r3, r4, r3
 800c9f8:	9303      	str	r3, [sp, #12]
 800c9fa:	0003      	movs	r3, r0
 800c9fc:	60c6      	str	r6, [r0, #12]
 800c9fe:	468c      	mov	ip, r1
 800ca00:	2000      	movs	r0, #0
 800ca02:	3314      	adds	r3, #20
 800ca04:	9304      	str	r3, [sp, #16]
 800ca06:	9305      	str	r3, [sp, #20]
 800ca08:	4663      	mov	r3, ip
 800ca0a:	cb20      	ldmia	r3!, {r5}
 800ca0c:	b2a9      	uxth	r1, r5
 800ca0e:	000e      	movs	r6, r1
 800ca10:	469c      	mov	ip, r3
 800ca12:	cc08      	ldmia	r4!, {r3}
 800ca14:	0c2d      	lsrs	r5, r5, #16
 800ca16:	b299      	uxth	r1, r3
 800ca18:	1a71      	subs	r1, r6, r1
 800ca1a:	1809      	adds	r1, r1, r0
 800ca1c:	0c1b      	lsrs	r3, r3, #16
 800ca1e:	1408      	asrs	r0, r1, #16
 800ca20:	1aeb      	subs	r3, r5, r3
 800ca22:	181b      	adds	r3, r3, r0
 800ca24:	1418      	asrs	r0, r3, #16
 800ca26:	b289      	uxth	r1, r1
 800ca28:	041b      	lsls	r3, r3, #16
 800ca2a:	4319      	orrs	r1, r3
 800ca2c:	9b05      	ldr	r3, [sp, #20]
 800ca2e:	c302      	stmia	r3!, {r1}
 800ca30:	9305      	str	r3, [sp, #20]
 800ca32:	9b03      	ldr	r3, [sp, #12]
 800ca34:	42a3      	cmp	r3, r4
 800ca36:	d8e7      	bhi.n	800ca08 <__mdiff+0x84>
 800ca38:	0039      	movs	r1, r7
 800ca3a:	9c03      	ldr	r4, [sp, #12]
 800ca3c:	3115      	adds	r1, #21
 800ca3e:	2304      	movs	r3, #4
 800ca40:	428c      	cmp	r4, r1
 800ca42:	d304      	bcc.n	800ca4e <__mdiff+0xca>
 800ca44:	1be3      	subs	r3, r4, r7
 800ca46:	3b15      	subs	r3, #21
 800ca48:	089b      	lsrs	r3, r3, #2
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	9901      	ldr	r1, [sp, #4]
 800ca50:	18cd      	adds	r5, r1, r3
 800ca52:	9904      	ldr	r1, [sp, #16]
 800ca54:	002e      	movs	r6, r5
 800ca56:	18cb      	adds	r3, r1, r3
 800ca58:	001f      	movs	r7, r3
 800ca5a:	9902      	ldr	r1, [sp, #8]
 800ca5c:	428e      	cmp	r6, r1
 800ca5e:	d311      	bcc.n	800ca84 <__mdiff+0x100>
 800ca60:	9c02      	ldr	r4, [sp, #8]
 800ca62:	1ee9      	subs	r1, r5, #3
 800ca64:	2000      	movs	r0, #0
 800ca66:	428c      	cmp	r4, r1
 800ca68:	d304      	bcc.n	800ca74 <__mdiff+0xf0>
 800ca6a:	0021      	movs	r1, r4
 800ca6c:	3103      	adds	r1, #3
 800ca6e:	1b49      	subs	r1, r1, r5
 800ca70:	0889      	lsrs	r1, r1, #2
 800ca72:	0088      	lsls	r0, r1, #2
 800ca74:	181b      	adds	r3, r3, r0
 800ca76:	3b04      	subs	r3, #4
 800ca78:	6819      	ldr	r1, [r3, #0]
 800ca7a:	2900      	cmp	r1, #0
 800ca7c:	d010      	beq.n	800caa0 <__mdiff+0x11c>
 800ca7e:	9b00      	ldr	r3, [sp, #0]
 800ca80:	6113      	str	r3, [r2, #16]
 800ca82:	e798      	b.n	800c9b6 <__mdiff+0x32>
 800ca84:	4684      	mov	ip, r0
 800ca86:	ce02      	ldmia	r6!, {r1}
 800ca88:	b288      	uxth	r0, r1
 800ca8a:	4460      	add	r0, ip
 800ca8c:	1400      	asrs	r0, r0, #16
 800ca8e:	0c0c      	lsrs	r4, r1, #16
 800ca90:	1904      	adds	r4, r0, r4
 800ca92:	4461      	add	r1, ip
 800ca94:	1420      	asrs	r0, r4, #16
 800ca96:	b289      	uxth	r1, r1
 800ca98:	0424      	lsls	r4, r4, #16
 800ca9a:	4321      	orrs	r1, r4
 800ca9c:	c702      	stmia	r7!, {r1}
 800ca9e:	e7dc      	b.n	800ca5a <__mdiff+0xd6>
 800caa0:	9900      	ldr	r1, [sp, #0]
 800caa2:	3901      	subs	r1, #1
 800caa4:	9100      	str	r1, [sp, #0]
 800caa6:	e7e6      	b.n	800ca76 <__mdiff+0xf2>
 800caa8:	0800d9c0 	.word	0x0800d9c0
 800caac:	0800d9d1 	.word	0x0800d9d1
 800cab0:	00000237 	.word	0x00000237
 800cab4:	00000245 	.word	0x00000245

0800cab8 <__d2b>:
 800cab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caba:	2101      	movs	r1, #1
 800cabc:	0016      	movs	r6, r2
 800cabe:	001f      	movs	r7, r3
 800cac0:	f7ff fcb6 	bl	800c430 <_Balloc>
 800cac4:	1e04      	subs	r4, r0, #0
 800cac6:	d105      	bne.n	800cad4 <__d2b+0x1c>
 800cac8:	0022      	movs	r2, r4
 800caca:	4b25      	ldr	r3, [pc, #148]	@ (800cb60 <__d2b+0xa8>)
 800cacc:	4825      	ldr	r0, [pc, #148]	@ (800cb64 <__d2b+0xac>)
 800cace:	4926      	ldr	r1, [pc, #152]	@ (800cb68 <__d2b+0xb0>)
 800cad0:	f000 fa7e 	bl	800cfd0 <__assert_func>
 800cad4:	033b      	lsls	r3, r7, #12
 800cad6:	007d      	lsls	r5, r7, #1
 800cad8:	0b1b      	lsrs	r3, r3, #12
 800cada:	0d6d      	lsrs	r5, r5, #21
 800cadc:	d002      	beq.n	800cae4 <__d2b+0x2c>
 800cade:	2280      	movs	r2, #128	@ 0x80
 800cae0:	0352      	lsls	r2, r2, #13
 800cae2:	4313      	orrs	r3, r2
 800cae4:	9301      	str	r3, [sp, #4]
 800cae6:	2e00      	cmp	r6, #0
 800cae8:	d025      	beq.n	800cb36 <__d2b+0x7e>
 800caea:	4668      	mov	r0, sp
 800caec:	9600      	str	r6, [sp, #0]
 800caee:	f7ff fd6c 	bl	800c5ca <__lo0bits>
 800caf2:	9b01      	ldr	r3, [sp, #4]
 800caf4:	9900      	ldr	r1, [sp, #0]
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d01b      	beq.n	800cb32 <__d2b+0x7a>
 800cafa:	2220      	movs	r2, #32
 800cafc:	001e      	movs	r6, r3
 800cafe:	1a12      	subs	r2, r2, r0
 800cb00:	4096      	lsls	r6, r2
 800cb02:	0032      	movs	r2, r6
 800cb04:	40c3      	lsrs	r3, r0
 800cb06:	430a      	orrs	r2, r1
 800cb08:	6162      	str	r2, [r4, #20]
 800cb0a:	9301      	str	r3, [sp, #4]
 800cb0c:	9e01      	ldr	r6, [sp, #4]
 800cb0e:	61a6      	str	r6, [r4, #24]
 800cb10:	1e73      	subs	r3, r6, #1
 800cb12:	419e      	sbcs	r6, r3
 800cb14:	3601      	adds	r6, #1
 800cb16:	6126      	str	r6, [r4, #16]
 800cb18:	2d00      	cmp	r5, #0
 800cb1a:	d014      	beq.n	800cb46 <__d2b+0x8e>
 800cb1c:	2635      	movs	r6, #53	@ 0x35
 800cb1e:	4b13      	ldr	r3, [pc, #76]	@ (800cb6c <__d2b+0xb4>)
 800cb20:	18ed      	adds	r5, r5, r3
 800cb22:	9b08      	ldr	r3, [sp, #32]
 800cb24:	182d      	adds	r5, r5, r0
 800cb26:	601d      	str	r5, [r3, #0]
 800cb28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb2a:	1a36      	subs	r6, r6, r0
 800cb2c:	601e      	str	r6, [r3, #0]
 800cb2e:	0020      	movs	r0, r4
 800cb30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb32:	6161      	str	r1, [r4, #20]
 800cb34:	e7ea      	b.n	800cb0c <__d2b+0x54>
 800cb36:	a801      	add	r0, sp, #4
 800cb38:	f7ff fd47 	bl	800c5ca <__lo0bits>
 800cb3c:	9b01      	ldr	r3, [sp, #4]
 800cb3e:	2601      	movs	r6, #1
 800cb40:	6163      	str	r3, [r4, #20]
 800cb42:	3020      	adds	r0, #32
 800cb44:	e7e7      	b.n	800cb16 <__d2b+0x5e>
 800cb46:	4b0a      	ldr	r3, [pc, #40]	@ (800cb70 <__d2b+0xb8>)
 800cb48:	18c0      	adds	r0, r0, r3
 800cb4a:	9b08      	ldr	r3, [sp, #32]
 800cb4c:	6018      	str	r0, [r3, #0]
 800cb4e:	4b09      	ldr	r3, [pc, #36]	@ (800cb74 <__d2b+0xbc>)
 800cb50:	18f3      	adds	r3, r6, r3
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	18e3      	adds	r3, r4, r3
 800cb56:	6958      	ldr	r0, [r3, #20]
 800cb58:	f7ff fd16 	bl	800c588 <__hi0bits>
 800cb5c:	0176      	lsls	r6, r6, #5
 800cb5e:	e7e3      	b.n	800cb28 <__d2b+0x70>
 800cb60:	0800d9c0 	.word	0x0800d9c0
 800cb64:	0800d9d1 	.word	0x0800d9d1
 800cb68:	0000030f 	.word	0x0000030f
 800cb6c:	fffffbcd 	.word	0xfffffbcd
 800cb70:	fffffbce 	.word	0xfffffbce
 800cb74:	3fffffff 	.word	0x3fffffff

0800cb78 <__ssputs_r>:
 800cb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb7a:	688e      	ldr	r6, [r1, #8]
 800cb7c:	b085      	sub	sp, #20
 800cb7e:	001f      	movs	r7, r3
 800cb80:	000c      	movs	r4, r1
 800cb82:	680b      	ldr	r3, [r1, #0]
 800cb84:	9002      	str	r0, [sp, #8]
 800cb86:	9203      	str	r2, [sp, #12]
 800cb88:	42be      	cmp	r6, r7
 800cb8a:	d830      	bhi.n	800cbee <__ssputs_r+0x76>
 800cb8c:	210c      	movs	r1, #12
 800cb8e:	5e62      	ldrsh	r2, [r4, r1]
 800cb90:	2190      	movs	r1, #144	@ 0x90
 800cb92:	00c9      	lsls	r1, r1, #3
 800cb94:	420a      	tst	r2, r1
 800cb96:	d028      	beq.n	800cbea <__ssputs_r+0x72>
 800cb98:	2003      	movs	r0, #3
 800cb9a:	6921      	ldr	r1, [r4, #16]
 800cb9c:	1a5b      	subs	r3, r3, r1
 800cb9e:	9301      	str	r3, [sp, #4]
 800cba0:	6963      	ldr	r3, [r4, #20]
 800cba2:	4343      	muls	r3, r0
 800cba4:	9801      	ldr	r0, [sp, #4]
 800cba6:	0fdd      	lsrs	r5, r3, #31
 800cba8:	18ed      	adds	r5, r5, r3
 800cbaa:	1c7b      	adds	r3, r7, #1
 800cbac:	181b      	adds	r3, r3, r0
 800cbae:	106d      	asrs	r5, r5, #1
 800cbb0:	42ab      	cmp	r3, r5
 800cbb2:	d900      	bls.n	800cbb6 <__ssputs_r+0x3e>
 800cbb4:	001d      	movs	r5, r3
 800cbb6:	0552      	lsls	r2, r2, #21
 800cbb8:	d528      	bpl.n	800cc0c <__ssputs_r+0x94>
 800cbba:	0029      	movs	r1, r5
 800cbbc:	9802      	ldr	r0, [sp, #8]
 800cbbe:	f7fd fe69 	bl	800a894 <_malloc_r>
 800cbc2:	1e06      	subs	r6, r0, #0
 800cbc4:	d02c      	beq.n	800cc20 <__ssputs_r+0xa8>
 800cbc6:	9a01      	ldr	r2, [sp, #4]
 800cbc8:	6921      	ldr	r1, [r4, #16]
 800cbca:	f000 f9f7 	bl	800cfbc <memcpy>
 800cbce:	89a2      	ldrh	r2, [r4, #12]
 800cbd0:	4b18      	ldr	r3, [pc, #96]	@ (800cc34 <__ssputs_r+0xbc>)
 800cbd2:	401a      	ands	r2, r3
 800cbd4:	2380      	movs	r3, #128	@ 0x80
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	81a3      	strh	r3, [r4, #12]
 800cbda:	9b01      	ldr	r3, [sp, #4]
 800cbdc:	6126      	str	r6, [r4, #16]
 800cbde:	18f6      	adds	r6, r6, r3
 800cbe0:	6026      	str	r6, [r4, #0]
 800cbe2:	003e      	movs	r6, r7
 800cbe4:	6165      	str	r5, [r4, #20]
 800cbe6:	1aed      	subs	r5, r5, r3
 800cbe8:	60a5      	str	r5, [r4, #8]
 800cbea:	42be      	cmp	r6, r7
 800cbec:	d900      	bls.n	800cbf0 <__ssputs_r+0x78>
 800cbee:	003e      	movs	r6, r7
 800cbf0:	0032      	movs	r2, r6
 800cbf2:	9903      	ldr	r1, [sp, #12]
 800cbf4:	6820      	ldr	r0, [r4, #0]
 800cbf6:	f000 f9ce 	bl	800cf96 <memmove>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	68a3      	ldr	r3, [r4, #8]
 800cbfe:	1b9b      	subs	r3, r3, r6
 800cc00:	60a3      	str	r3, [r4, #8]
 800cc02:	6823      	ldr	r3, [r4, #0]
 800cc04:	199b      	adds	r3, r3, r6
 800cc06:	6023      	str	r3, [r4, #0]
 800cc08:	b005      	add	sp, #20
 800cc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc0c:	002a      	movs	r2, r5
 800cc0e:	9802      	ldr	r0, [sp, #8]
 800cc10:	f000 fa3b 	bl	800d08a <_realloc_r>
 800cc14:	1e06      	subs	r6, r0, #0
 800cc16:	d1e0      	bne.n	800cbda <__ssputs_r+0x62>
 800cc18:	6921      	ldr	r1, [r4, #16]
 800cc1a:	9802      	ldr	r0, [sp, #8]
 800cc1c:	f7ff fbbe 	bl	800c39c <_free_r>
 800cc20:	230c      	movs	r3, #12
 800cc22:	2001      	movs	r0, #1
 800cc24:	9a02      	ldr	r2, [sp, #8]
 800cc26:	4240      	negs	r0, r0
 800cc28:	6013      	str	r3, [r2, #0]
 800cc2a:	89a2      	ldrh	r2, [r4, #12]
 800cc2c:	3334      	adds	r3, #52	@ 0x34
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	81a3      	strh	r3, [r4, #12]
 800cc32:	e7e9      	b.n	800cc08 <__ssputs_r+0x90>
 800cc34:	fffffb7f 	.word	0xfffffb7f

0800cc38 <_svfiprintf_r>:
 800cc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3a:	b0a1      	sub	sp, #132	@ 0x84
 800cc3c:	9003      	str	r0, [sp, #12]
 800cc3e:	001d      	movs	r5, r3
 800cc40:	898b      	ldrh	r3, [r1, #12]
 800cc42:	000f      	movs	r7, r1
 800cc44:	0016      	movs	r6, r2
 800cc46:	061b      	lsls	r3, r3, #24
 800cc48:	d511      	bpl.n	800cc6e <_svfiprintf_r+0x36>
 800cc4a:	690b      	ldr	r3, [r1, #16]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10e      	bne.n	800cc6e <_svfiprintf_r+0x36>
 800cc50:	2140      	movs	r1, #64	@ 0x40
 800cc52:	f7fd fe1f 	bl	800a894 <_malloc_r>
 800cc56:	6038      	str	r0, [r7, #0]
 800cc58:	6138      	str	r0, [r7, #16]
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d105      	bne.n	800cc6a <_svfiprintf_r+0x32>
 800cc5e:	230c      	movs	r3, #12
 800cc60:	9a03      	ldr	r2, [sp, #12]
 800cc62:	6013      	str	r3, [r2, #0]
 800cc64:	2001      	movs	r0, #1
 800cc66:	4240      	negs	r0, r0
 800cc68:	e0cf      	b.n	800ce0a <_svfiprintf_r+0x1d2>
 800cc6a:	2340      	movs	r3, #64	@ 0x40
 800cc6c:	617b      	str	r3, [r7, #20]
 800cc6e:	2300      	movs	r3, #0
 800cc70:	ac08      	add	r4, sp, #32
 800cc72:	6163      	str	r3, [r4, #20]
 800cc74:	3320      	adds	r3, #32
 800cc76:	7663      	strb	r3, [r4, #25]
 800cc78:	3310      	adds	r3, #16
 800cc7a:	76a3      	strb	r3, [r4, #26]
 800cc7c:	9507      	str	r5, [sp, #28]
 800cc7e:	0035      	movs	r5, r6
 800cc80:	782b      	ldrb	r3, [r5, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <_svfiprintf_r+0x52>
 800cc86:	2b25      	cmp	r3, #37	@ 0x25
 800cc88:	d148      	bne.n	800cd1c <_svfiprintf_r+0xe4>
 800cc8a:	1bab      	subs	r3, r5, r6
 800cc8c:	9305      	str	r3, [sp, #20]
 800cc8e:	42b5      	cmp	r5, r6
 800cc90:	d00b      	beq.n	800ccaa <_svfiprintf_r+0x72>
 800cc92:	0032      	movs	r2, r6
 800cc94:	0039      	movs	r1, r7
 800cc96:	9803      	ldr	r0, [sp, #12]
 800cc98:	f7ff ff6e 	bl	800cb78 <__ssputs_r>
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	d100      	bne.n	800cca2 <_svfiprintf_r+0x6a>
 800cca0:	e0ae      	b.n	800ce00 <_svfiprintf_r+0x1c8>
 800cca2:	6963      	ldr	r3, [r4, #20]
 800cca4:	9a05      	ldr	r2, [sp, #20]
 800cca6:	189b      	adds	r3, r3, r2
 800cca8:	6163      	str	r3, [r4, #20]
 800ccaa:	782b      	ldrb	r3, [r5, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d100      	bne.n	800ccb2 <_svfiprintf_r+0x7a>
 800ccb0:	e0a6      	b.n	800ce00 <_svfiprintf_r+0x1c8>
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	4252      	negs	r2, r2
 800ccb8:	6062      	str	r2, [r4, #4]
 800ccba:	a904      	add	r1, sp, #16
 800ccbc:	3254      	adds	r2, #84	@ 0x54
 800ccbe:	1852      	adds	r2, r2, r1
 800ccc0:	1c6e      	adds	r6, r5, #1
 800ccc2:	6023      	str	r3, [r4, #0]
 800ccc4:	60e3      	str	r3, [r4, #12]
 800ccc6:	60a3      	str	r3, [r4, #8]
 800ccc8:	7013      	strb	r3, [r2, #0]
 800ccca:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cccc:	4b54      	ldr	r3, [pc, #336]	@ (800ce20 <_svfiprintf_r+0x1e8>)
 800ccce:	2205      	movs	r2, #5
 800ccd0:	0018      	movs	r0, r3
 800ccd2:	7831      	ldrb	r1, [r6, #0]
 800ccd4:	9305      	str	r3, [sp, #20]
 800ccd6:	f7fe fcd4 	bl	800b682 <memchr>
 800ccda:	1c75      	adds	r5, r6, #1
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d11f      	bne.n	800cd20 <_svfiprintf_r+0xe8>
 800cce0:	6822      	ldr	r2, [r4, #0]
 800cce2:	06d3      	lsls	r3, r2, #27
 800cce4:	d504      	bpl.n	800ccf0 <_svfiprintf_r+0xb8>
 800cce6:	2353      	movs	r3, #83	@ 0x53
 800cce8:	a904      	add	r1, sp, #16
 800ccea:	185b      	adds	r3, r3, r1
 800ccec:	2120      	movs	r1, #32
 800ccee:	7019      	strb	r1, [r3, #0]
 800ccf0:	0713      	lsls	r3, r2, #28
 800ccf2:	d504      	bpl.n	800ccfe <_svfiprintf_r+0xc6>
 800ccf4:	2353      	movs	r3, #83	@ 0x53
 800ccf6:	a904      	add	r1, sp, #16
 800ccf8:	185b      	adds	r3, r3, r1
 800ccfa:	212b      	movs	r1, #43	@ 0x2b
 800ccfc:	7019      	strb	r1, [r3, #0]
 800ccfe:	7833      	ldrb	r3, [r6, #0]
 800cd00:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd02:	d016      	beq.n	800cd32 <_svfiprintf_r+0xfa>
 800cd04:	0035      	movs	r5, r6
 800cd06:	2100      	movs	r1, #0
 800cd08:	200a      	movs	r0, #10
 800cd0a:	68e3      	ldr	r3, [r4, #12]
 800cd0c:	782a      	ldrb	r2, [r5, #0]
 800cd0e:	1c6e      	adds	r6, r5, #1
 800cd10:	3a30      	subs	r2, #48	@ 0x30
 800cd12:	2a09      	cmp	r2, #9
 800cd14:	d950      	bls.n	800cdb8 <_svfiprintf_r+0x180>
 800cd16:	2900      	cmp	r1, #0
 800cd18:	d111      	bne.n	800cd3e <_svfiprintf_r+0x106>
 800cd1a:	e017      	b.n	800cd4c <_svfiprintf_r+0x114>
 800cd1c:	3501      	adds	r5, #1
 800cd1e:	e7af      	b.n	800cc80 <_svfiprintf_r+0x48>
 800cd20:	9b05      	ldr	r3, [sp, #20]
 800cd22:	6822      	ldr	r2, [r4, #0]
 800cd24:	1ac0      	subs	r0, r0, r3
 800cd26:	2301      	movs	r3, #1
 800cd28:	4083      	lsls	r3, r0
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	002e      	movs	r6, r5
 800cd2e:	6023      	str	r3, [r4, #0]
 800cd30:	e7cc      	b.n	800cccc <_svfiprintf_r+0x94>
 800cd32:	9b07      	ldr	r3, [sp, #28]
 800cd34:	1d19      	adds	r1, r3, #4
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	9107      	str	r1, [sp, #28]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	db01      	blt.n	800cd42 <_svfiprintf_r+0x10a>
 800cd3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd40:	e004      	b.n	800cd4c <_svfiprintf_r+0x114>
 800cd42:	425b      	negs	r3, r3
 800cd44:	60e3      	str	r3, [r4, #12]
 800cd46:	2302      	movs	r3, #2
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	6023      	str	r3, [r4, #0]
 800cd4c:	782b      	ldrb	r3, [r5, #0]
 800cd4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd50:	d10c      	bne.n	800cd6c <_svfiprintf_r+0x134>
 800cd52:	786b      	ldrb	r3, [r5, #1]
 800cd54:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd56:	d134      	bne.n	800cdc2 <_svfiprintf_r+0x18a>
 800cd58:	9b07      	ldr	r3, [sp, #28]
 800cd5a:	3502      	adds	r5, #2
 800cd5c:	1d1a      	adds	r2, r3, #4
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	9207      	str	r2, [sp, #28]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	da01      	bge.n	800cd6a <_svfiprintf_r+0x132>
 800cd66:	2301      	movs	r3, #1
 800cd68:	425b      	negs	r3, r3
 800cd6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd6c:	4e2d      	ldr	r6, [pc, #180]	@ (800ce24 <_svfiprintf_r+0x1ec>)
 800cd6e:	2203      	movs	r2, #3
 800cd70:	0030      	movs	r0, r6
 800cd72:	7829      	ldrb	r1, [r5, #0]
 800cd74:	f7fe fc85 	bl	800b682 <memchr>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d006      	beq.n	800cd8a <_svfiprintf_r+0x152>
 800cd7c:	2340      	movs	r3, #64	@ 0x40
 800cd7e:	1b80      	subs	r0, r0, r6
 800cd80:	4083      	lsls	r3, r0
 800cd82:	6822      	ldr	r2, [r4, #0]
 800cd84:	3501      	adds	r5, #1
 800cd86:	4313      	orrs	r3, r2
 800cd88:	6023      	str	r3, [r4, #0]
 800cd8a:	7829      	ldrb	r1, [r5, #0]
 800cd8c:	2206      	movs	r2, #6
 800cd8e:	4826      	ldr	r0, [pc, #152]	@ (800ce28 <_svfiprintf_r+0x1f0>)
 800cd90:	1c6e      	adds	r6, r5, #1
 800cd92:	7621      	strb	r1, [r4, #24]
 800cd94:	f7fe fc75 	bl	800b682 <memchr>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d038      	beq.n	800ce0e <_svfiprintf_r+0x1d6>
 800cd9c:	4b23      	ldr	r3, [pc, #140]	@ (800ce2c <_svfiprintf_r+0x1f4>)
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d122      	bne.n	800cde8 <_svfiprintf_r+0x1b0>
 800cda2:	2207      	movs	r2, #7
 800cda4:	9b07      	ldr	r3, [sp, #28]
 800cda6:	3307      	adds	r3, #7
 800cda8:	4393      	bics	r3, r2
 800cdaa:	3308      	adds	r3, #8
 800cdac:	9307      	str	r3, [sp, #28]
 800cdae:	6963      	ldr	r3, [r4, #20]
 800cdb0:	9a04      	ldr	r2, [sp, #16]
 800cdb2:	189b      	adds	r3, r3, r2
 800cdb4:	6163      	str	r3, [r4, #20]
 800cdb6:	e762      	b.n	800cc7e <_svfiprintf_r+0x46>
 800cdb8:	4343      	muls	r3, r0
 800cdba:	0035      	movs	r5, r6
 800cdbc:	2101      	movs	r1, #1
 800cdbe:	189b      	adds	r3, r3, r2
 800cdc0:	e7a4      	b.n	800cd0c <_svfiprintf_r+0xd4>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	200a      	movs	r0, #10
 800cdc6:	0019      	movs	r1, r3
 800cdc8:	3501      	adds	r5, #1
 800cdca:	6063      	str	r3, [r4, #4]
 800cdcc:	782a      	ldrb	r2, [r5, #0]
 800cdce:	1c6e      	adds	r6, r5, #1
 800cdd0:	3a30      	subs	r2, #48	@ 0x30
 800cdd2:	2a09      	cmp	r2, #9
 800cdd4:	d903      	bls.n	800cdde <_svfiprintf_r+0x1a6>
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d0c8      	beq.n	800cd6c <_svfiprintf_r+0x134>
 800cdda:	9109      	str	r1, [sp, #36]	@ 0x24
 800cddc:	e7c6      	b.n	800cd6c <_svfiprintf_r+0x134>
 800cdde:	4341      	muls	r1, r0
 800cde0:	0035      	movs	r5, r6
 800cde2:	2301      	movs	r3, #1
 800cde4:	1889      	adds	r1, r1, r2
 800cde6:	e7f1      	b.n	800cdcc <_svfiprintf_r+0x194>
 800cde8:	aa07      	add	r2, sp, #28
 800cdea:	9200      	str	r2, [sp, #0]
 800cdec:	0021      	movs	r1, r4
 800cdee:	003a      	movs	r2, r7
 800cdf0:	4b0f      	ldr	r3, [pc, #60]	@ (800ce30 <_svfiprintf_r+0x1f8>)
 800cdf2:	9803      	ldr	r0, [sp, #12]
 800cdf4:	f7fd fe84 	bl	800ab00 <_printf_float>
 800cdf8:	9004      	str	r0, [sp, #16]
 800cdfa:	9b04      	ldr	r3, [sp, #16]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	d1d6      	bne.n	800cdae <_svfiprintf_r+0x176>
 800ce00:	89bb      	ldrh	r3, [r7, #12]
 800ce02:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ce04:	065b      	lsls	r3, r3, #25
 800ce06:	d500      	bpl.n	800ce0a <_svfiprintf_r+0x1d2>
 800ce08:	e72c      	b.n	800cc64 <_svfiprintf_r+0x2c>
 800ce0a:	b021      	add	sp, #132	@ 0x84
 800ce0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce0e:	aa07      	add	r2, sp, #28
 800ce10:	9200      	str	r2, [sp, #0]
 800ce12:	0021      	movs	r1, r4
 800ce14:	003a      	movs	r2, r7
 800ce16:	4b06      	ldr	r3, [pc, #24]	@ (800ce30 <_svfiprintf_r+0x1f8>)
 800ce18:	9803      	ldr	r0, [sp, #12]
 800ce1a:	f7fe f91f 	bl	800b05c <_printf_i>
 800ce1e:	e7eb      	b.n	800cdf8 <_svfiprintf_r+0x1c0>
 800ce20:	0800db28 	.word	0x0800db28
 800ce24:	0800db2e 	.word	0x0800db2e
 800ce28:	0800db32 	.word	0x0800db32
 800ce2c:	0800ab01 	.word	0x0800ab01
 800ce30:	0800cb79 	.word	0x0800cb79

0800ce34 <__sflush_r>:
 800ce34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce36:	220c      	movs	r2, #12
 800ce38:	5e8b      	ldrsh	r3, [r1, r2]
 800ce3a:	0005      	movs	r5, r0
 800ce3c:	000c      	movs	r4, r1
 800ce3e:	071a      	lsls	r2, r3, #28
 800ce40:	d456      	bmi.n	800cef0 <__sflush_r+0xbc>
 800ce42:	684a      	ldr	r2, [r1, #4]
 800ce44:	2a00      	cmp	r2, #0
 800ce46:	dc02      	bgt.n	800ce4e <__sflush_r+0x1a>
 800ce48:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800ce4a:	2a00      	cmp	r2, #0
 800ce4c:	dd4e      	ble.n	800ceec <__sflush_r+0xb8>
 800ce4e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ce50:	2f00      	cmp	r7, #0
 800ce52:	d04b      	beq.n	800ceec <__sflush_r+0xb8>
 800ce54:	2200      	movs	r2, #0
 800ce56:	2080      	movs	r0, #128	@ 0x80
 800ce58:	682e      	ldr	r6, [r5, #0]
 800ce5a:	602a      	str	r2, [r5, #0]
 800ce5c:	001a      	movs	r2, r3
 800ce5e:	0140      	lsls	r0, r0, #5
 800ce60:	6a21      	ldr	r1, [r4, #32]
 800ce62:	4002      	ands	r2, r0
 800ce64:	4203      	tst	r3, r0
 800ce66:	d033      	beq.n	800ced0 <__sflush_r+0x9c>
 800ce68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce6a:	89a3      	ldrh	r3, [r4, #12]
 800ce6c:	075b      	lsls	r3, r3, #29
 800ce6e:	d506      	bpl.n	800ce7e <__sflush_r+0x4a>
 800ce70:	6863      	ldr	r3, [r4, #4]
 800ce72:	1ad2      	subs	r2, r2, r3
 800ce74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d001      	beq.n	800ce7e <__sflush_r+0x4a>
 800ce7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce7c:	1ad2      	subs	r2, r2, r3
 800ce7e:	2300      	movs	r3, #0
 800ce80:	0028      	movs	r0, r5
 800ce82:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800ce84:	6a21      	ldr	r1, [r4, #32]
 800ce86:	47b8      	blx	r7
 800ce88:	89a2      	ldrh	r2, [r4, #12]
 800ce8a:	1c43      	adds	r3, r0, #1
 800ce8c:	d106      	bne.n	800ce9c <__sflush_r+0x68>
 800ce8e:	6829      	ldr	r1, [r5, #0]
 800ce90:	291d      	cmp	r1, #29
 800ce92:	d846      	bhi.n	800cf22 <__sflush_r+0xee>
 800ce94:	4b29      	ldr	r3, [pc, #164]	@ (800cf3c <__sflush_r+0x108>)
 800ce96:	410b      	asrs	r3, r1
 800ce98:	07db      	lsls	r3, r3, #31
 800ce9a:	d442      	bmi.n	800cf22 <__sflush_r+0xee>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	6063      	str	r3, [r4, #4]
 800cea0:	6923      	ldr	r3, [r4, #16]
 800cea2:	6023      	str	r3, [r4, #0]
 800cea4:	04d2      	lsls	r2, r2, #19
 800cea6:	d505      	bpl.n	800ceb4 <__sflush_r+0x80>
 800cea8:	1c43      	adds	r3, r0, #1
 800ceaa:	d102      	bne.n	800ceb2 <__sflush_r+0x7e>
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d100      	bne.n	800ceb4 <__sflush_r+0x80>
 800ceb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800ceb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ceb6:	602e      	str	r6, [r5, #0]
 800ceb8:	2900      	cmp	r1, #0
 800ceba:	d017      	beq.n	800ceec <__sflush_r+0xb8>
 800cebc:	0023      	movs	r3, r4
 800cebe:	3344      	adds	r3, #68	@ 0x44
 800cec0:	4299      	cmp	r1, r3
 800cec2:	d002      	beq.n	800ceca <__sflush_r+0x96>
 800cec4:	0028      	movs	r0, r5
 800cec6:	f7ff fa69 	bl	800c39c <_free_r>
 800ceca:	2300      	movs	r3, #0
 800cecc:	6363      	str	r3, [r4, #52]	@ 0x34
 800cece:	e00d      	b.n	800ceec <__sflush_r+0xb8>
 800ced0:	2301      	movs	r3, #1
 800ced2:	0028      	movs	r0, r5
 800ced4:	47b8      	blx	r7
 800ced6:	0002      	movs	r2, r0
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	d1c6      	bne.n	800ce6a <__sflush_r+0x36>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d0c3      	beq.n	800ce6a <__sflush_r+0x36>
 800cee2:	2b1d      	cmp	r3, #29
 800cee4:	d001      	beq.n	800ceea <__sflush_r+0xb6>
 800cee6:	2b16      	cmp	r3, #22
 800cee8:	d11a      	bne.n	800cf20 <__sflush_r+0xec>
 800ceea:	602e      	str	r6, [r5, #0]
 800ceec:	2000      	movs	r0, #0
 800ceee:	e01e      	b.n	800cf2e <__sflush_r+0xfa>
 800cef0:	690e      	ldr	r6, [r1, #16]
 800cef2:	2e00      	cmp	r6, #0
 800cef4:	d0fa      	beq.n	800ceec <__sflush_r+0xb8>
 800cef6:	680f      	ldr	r7, [r1, #0]
 800cef8:	600e      	str	r6, [r1, #0]
 800cefa:	1bba      	subs	r2, r7, r6
 800cefc:	9201      	str	r2, [sp, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	079b      	lsls	r3, r3, #30
 800cf02:	d100      	bne.n	800cf06 <__sflush_r+0xd2>
 800cf04:	694a      	ldr	r2, [r1, #20]
 800cf06:	60a2      	str	r2, [r4, #8]
 800cf08:	9b01      	ldr	r3, [sp, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	ddee      	ble.n	800ceec <__sflush_r+0xb8>
 800cf0e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cf10:	0032      	movs	r2, r6
 800cf12:	001f      	movs	r7, r3
 800cf14:	0028      	movs	r0, r5
 800cf16:	9b01      	ldr	r3, [sp, #4]
 800cf18:	6a21      	ldr	r1, [r4, #32]
 800cf1a:	47b8      	blx	r7
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	dc07      	bgt.n	800cf30 <__sflush_r+0xfc>
 800cf20:	89a2      	ldrh	r2, [r4, #12]
 800cf22:	2340      	movs	r3, #64	@ 0x40
 800cf24:	2001      	movs	r0, #1
 800cf26:	4313      	orrs	r3, r2
 800cf28:	b21b      	sxth	r3, r3
 800cf2a:	81a3      	strh	r3, [r4, #12]
 800cf2c:	4240      	negs	r0, r0
 800cf2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf30:	9b01      	ldr	r3, [sp, #4]
 800cf32:	1836      	adds	r6, r6, r0
 800cf34:	1a1b      	subs	r3, r3, r0
 800cf36:	9301      	str	r3, [sp, #4]
 800cf38:	e7e6      	b.n	800cf08 <__sflush_r+0xd4>
 800cf3a:	46c0      	nop			@ (mov r8, r8)
 800cf3c:	dfbffffe 	.word	0xdfbffffe

0800cf40 <_fflush_r>:
 800cf40:	690b      	ldr	r3, [r1, #16]
 800cf42:	b570      	push	{r4, r5, r6, lr}
 800cf44:	0005      	movs	r5, r0
 800cf46:	000c      	movs	r4, r1
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d102      	bne.n	800cf52 <_fflush_r+0x12>
 800cf4c:	2500      	movs	r5, #0
 800cf4e:	0028      	movs	r0, r5
 800cf50:	bd70      	pop	{r4, r5, r6, pc}
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d004      	beq.n	800cf60 <_fflush_r+0x20>
 800cf56:	6a03      	ldr	r3, [r0, #32]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d101      	bne.n	800cf60 <_fflush_r+0x20>
 800cf5c:	f7fe fa1c 	bl	800b398 <__sinit>
 800cf60:	220c      	movs	r2, #12
 800cf62:	5ea3      	ldrsh	r3, [r4, r2]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d0f1      	beq.n	800cf4c <_fflush_r+0xc>
 800cf68:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf6a:	07d2      	lsls	r2, r2, #31
 800cf6c:	d404      	bmi.n	800cf78 <_fflush_r+0x38>
 800cf6e:	059b      	lsls	r3, r3, #22
 800cf70:	d402      	bmi.n	800cf78 <_fflush_r+0x38>
 800cf72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf74:	f7fe fb7b 	bl	800b66e <__retarget_lock_acquire_recursive>
 800cf78:	0028      	movs	r0, r5
 800cf7a:	0021      	movs	r1, r4
 800cf7c:	f7ff ff5a 	bl	800ce34 <__sflush_r>
 800cf80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf82:	0005      	movs	r5, r0
 800cf84:	07db      	lsls	r3, r3, #31
 800cf86:	d4e2      	bmi.n	800cf4e <_fflush_r+0xe>
 800cf88:	89a3      	ldrh	r3, [r4, #12]
 800cf8a:	059b      	lsls	r3, r3, #22
 800cf8c:	d4df      	bmi.n	800cf4e <_fflush_r+0xe>
 800cf8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf90:	f7fe fb6e 	bl	800b670 <__retarget_lock_release_recursive>
 800cf94:	e7db      	b.n	800cf4e <_fflush_r+0xe>

0800cf96 <memmove>:
 800cf96:	b510      	push	{r4, lr}
 800cf98:	4288      	cmp	r0, r1
 800cf9a:	d806      	bhi.n	800cfaa <memmove+0x14>
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d008      	beq.n	800cfb4 <memmove+0x1e>
 800cfa2:	5ccc      	ldrb	r4, [r1, r3]
 800cfa4:	54c4      	strb	r4, [r0, r3]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	e7f9      	b.n	800cf9e <memmove+0x8>
 800cfaa:	188b      	adds	r3, r1, r2
 800cfac:	4298      	cmp	r0, r3
 800cfae:	d2f5      	bcs.n	800cf9c <memmove+0x6>
 800cfb0:	3a01      	subs	r2, #1
 800cfb2:	d200      	bcs.n	800cfb6 <memmove+0x20>
 800cfb4:	bd10      	pop	{r4, pc}
 800cfb6:	5c8b      	ldrb	r3, [r1, r2]
 800cfb8:	5483      	strb	r3, [r0, r2]
 800cfba:	e7f9      	b.n	800cfb0 <memmove+0x1a>

0800cfbc <memcpy>:
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	b510      	push	{r4, lr}
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d100      	bne.n	800cfc6 <memcpy+0xa>
 800cfc4:	bd10      	pop	{r4, pc}
 800cfc6:	5ccc      	ldrb	r4, [r1, r3]
 800cfc8:	54c4      	strb	r4, [r0, r3]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	e7f8      	b.n	800cfc0 <memcpy+0x4>
	...

0800cfd0 <__assert_func>:
 800cfd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cfd2:	0014      	movs	r4, r2
 800cfd4:	001a      	movs	r2, r3
 800cfd6:	4b09      	ldr	r3, [pc, #36]	@ (800cffc <__assert_func+0x2c>)
 800cfd8:	0005      	movs	r5, r0
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	000e      	movs	r6, r1
 800cfde:	68d8      	ldr	r0, [r3, #12]
 800cfe0:	4b07      	ldr	r3, [pc, #28]	@ (800d000 <__assert_func+0x30>)
 800cfe2:	2c00      	cmp	r4, #0
 800cfe4:	d101      	bne.n	800cfea <__assert_func+0x1a>
 800cfe6:	4b07      	ldr	r3, [pc, #28]	@ (800d004 <__assert_func+0x34>)
 800cfe8:	001c      	movs	r4, r3
 800cfea:	4907      	ldr	r1, [pc, #28]	@ (800d008 <__assert_func+0x38>)
 800cfec:	9301      	str	r3, [sp, #4]
 800cfee:	9402      	str	r4, [sp, #8]
 800cff0:	002b      	movs	r3, r5
 800cff2:	9600      	str	r6, [sp, #0]
 800cff4:	f000 f886 	bl	800d104 <fiprintf>
 800cff8:	f000 f894 	bl	800d124 <abort>
 800cffc:	2000002c 	.word	0x2000002c
 800d000:	0800db43 	.word	0x0800db43
 800d004:	0800db7e 	.word	0x0800db7e
 800d008:	0800db50 	.word	0x0800db50

0800d00c <_calloc_r>:
 800d00c:	b570      	push	{r4, r5, r6, lr}
 800d00e:	0c0b      	lsrs	r3, r1, #16
 800d010:	0c15      	lsrs	r5, r2, #16
 800d012:	2b00      	cmp	r3, #0
 800d014:	d11e      	bne.n	800d054 <_calloc_r+0x48>
 800d016:	2d00      	cmp	r5, #0
 800d018:	d10c      	bne.n	800d034 <_calloc_r+0x28>
 800d01a:	b289      	uxth	r1, r1
 800d01c:	b294      	uxth	r4, r2
 800d01e:	434c      	muls	r4, r1
 800d020:	0021      	movs	r1, r4
 800d022:	f7fd fc37 	bl	800a894 <_malloc_r>
 800d026:	1e05      	subs	r5, r0, #0
 800d028:	d01a      	beq.n	800d060 <_calloc_r+0x54>
 800d02a:	0022      	movs	r2, r4
 800d02c:	2100      	movs	r1, #0
 800d02e:	f7fe fa87 	bl	800b540 <memset>
 800d032:	e016      	b.n	800d062 <_calloc_r+0x56>
 800d034:	1c2b      	adds	r3, r5, #0
 800d036:	1c0c      	adds	r4, r1, #0
 800d038:	b289      	uxth	r1, r1
 800d03a:	b292      	uxth	r2, r2
 800d03c:	434a      	muls	r2, r1
 800d03e:	b29b      	uxth	r3, r3
 800d040:	b2a1      	uxth	r1, r4
 800d042:	4359      	muls	r1, r3
 800d044:	0c14      	lsrs	r4, r2, #16
 800d046:	190c      	adds	r4, r1, r4
 800d048:	0c23      	lsrs	r3, r4, #16
 800d04a:	d107      	bne.n	800d05c <_calloc_r+0x50>
 800d04c:	0424      	lsls	r4, r4, #16
 800d04e:	b292      	uxth	r2, r2
 800d050:	4314      	orrs	r4, r2
 800d052:	e7e5      	b.n	800d020 <_calloc_r+0x14>
 800d054:	2d00      	cmp	r5, #0
 800d056:	d101      	bne.n	800d05c <_calloc_r+0x50>
 800d058:	1c14      	adds	r4, r2, #0
 800d05a:	e7ed      	b.n	800d038 <_calloc_r+0x2c>
 800d05c:	230c      	movs	r3, #12
 800d05e:	6003      	str	r3, [r0, #0]
 800d060:	2500      	movs	r5, #0
 800d062:	0028      	movs	r0, r5
 800d064:	bd70      	pop	{r4, r5, r6, pc}

0800d066 <__ascii_mbtowc>:
 800d066:	b082      	sub	sp, #8
 800d068:	2900      	cmp	r1, #0
 800d06a:	d100      	bne.n	800d06e <__ascii_mbtowc+0x8>
 800d06c:	a901      	add	r1, sp, #4
 800d06e:	1e10      	subs	r0, r2, #0
 800d070:	d006      	beq.n	800d080 <__ascii_mbtowc+0x1a>
 800d072:	2b00      	cmp	r3, #0
 800d074:	d006      	beq.n	800d084 <__ascii_mbtowc+0x1e>
 800d076:	7813      	ldrb	r3, [r2, #0]
 800d078:	600b      	str	r3, [r1, #0]
 800d07a:	7810      	ldrb	r0, [r2, #0]
 800d07c:	1e43      	subs	r3, r0, #1
 800d07e:	4198      	sbcs	r0, r3
 800d080:	b002      	add	sp, #8
 800d082:	4770      	bx	lr
 800d084:	2002      	movs	r0, #2
 800d086:	4240      	negs	r0, r0
 800d088:	e7fa      	b.n	800d080 <__ascii_mbtowc+0x1a>

0800d08a <_realloc_r>:
 800d08a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d08c:	0006      	movs	r6, r0
 800d08e:	000c      	movs	r4, r1
 800d090:	0015      	movs	r5, r2
 800d092:	2900      	cmp	r1, #0
 800d094:	d105      	bne.n	800d0a2 <_realloc_r+0x18>
 800d096:	0011      	movs	r1, r2
 800d098:	f7fd fbfc 	bl	800a894 <_malloc_r>
 800d09c:	0004      	movs	r4, r0
 800d09e:	0020      	movs	r0, r4
 800d0a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d0a2:	2a00      	cmp	r2, #0
 800d0a4:	d103      	bne.n	800d0ae <_realloc_r+0x24>
 800d0a6:	f7ff f979 	bl	800c39c <_free_r>
 800d0aa:	2400      	movs	r4, #0
 800d0ac:	e7f7      	b.n	800d09e <_realloc_r+0x14>
 800d0ae:	f000 f840 	bl	800d132 <_malloc_usable_size_r>
 800d0b2:	0007      	movs	r7, r0
 800d0b4:	4285      	cmp	r5, r0
 800d0b6:	d802      	bhi.n	800d0be <_realloc_r+0x34>
 800d0b8:	0843      	lsrs	r3, r0, #1
 800d0ba:	42ab      	cmp	r3, r5
 800d0bc:	d3ef      	bcc.n	800d09e <_realloc_r+0x14>
 800d0be:	0029      	movs	r1, r5
 800d0c0:	0030      	movs	r0, r6
 800d0c2:	f7fd fbe7 	bl	800a894 <_malloc_r>
 800d0c6:	9001      	str	r0, [sp, #4]
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d0ee      	beq.n	800d0aa <_realloc_r+0x20>
 800d0cc:	002a      	movs	r2, r5
 800d0ce:	42bd      	cmp	r5, r7
 800d0d0:	d900      	bls.n	800d0d4 <_realloc_r+0x4a>
 800d0d2:	003a      	movs	r2, r7
 800d0d4:	0021      	movs	r1, r4
 800d0d6:	9801      	ldr	r0, [sp, #4]
 800d0d8:	f7ff ff70 	bl	800cfbc <memcpy>
 800d0dc:	0021      	movs	r1, r4
 800d0de:	0030      	movs	r0, r6
 800d0e0:	f7ff f95c 	bl	800c39c <_free_r>
 800d0e4:	9c01      	ldr	r4, [sp, #4]
 800d0e6:	e7da      	b.n	800d09e <_realloc_r+0x14>

0800d0e8 <__ascii_wctomb>:
 800d0e8:	0003      	movs	r3, r0
 800d0ea:	1e08      	subs	r0, r1, #0
 800d0ec:	d005      	beq.n	800d0fa <__ascii_wctomb+0x12>
 800d0ee:	2aff      	cmp	r2, #255	@ 0xff
 800d0f0:	d904      	bls.n	800d0fc <__ascii_wctomb+0x14>
 800d0f2:	228a      	movs	r2, #138	@ 0x8a
 800d0f4:	2001      	movs	r0, #1
 800d0f6:	601a      	str	r2, [r3, #0]
 800d0f8:	4240      	negs	r0, r0
 800d0fa:	4770      	bx	lr
 800d0fc:	2001      	movs	r0, #1
 800d0fe:	700a      	strb	r2, [r1, #0]
 800d100:	e7fb      	b.n	800d0fa <__ascii_wctomb+0x12>
	...

0800d104 <fiprintf>:
 800d104:	b40e      	push	{r1, r2, r3}
 800d106:	b517      	push	{r0, r1, r2, r4, lr}
 800d108:	4c05      	ldr	r4, [pc, #20]	@ (800d120 <fiprintf+0x1c>)
 800d10a:	ab05      	add	r3, sp, #20
 800d10c:	cb04      	ldmia	r3!, {r2}
 800d10e:	0001      	movs	r1, r0
 800d110:	6820      	ldr	r0, [r4, #0]
 800d112:	9301      	str	r3, [sp, #4]
 800d114:	f000 f83c 	bl	800d190 <_vfiprintf_r>
 800d118:	bc1e      	pop	{r1, r2, r3, r4}
 800d11a:	bc08      	pop	{r3}
 800d11c:	b003      	add	sp, #12
 800d11e:	4718      	bx	r3
 800d120:	2000002c 	.word	0x2000002c

0800d124 <abort>:
 800d124:	2006      	movs	r0, #6
 800d126:	b510      	push	{r4, lr}
 800d128:	f000 fa18 	bl	800d55c <raise>
 800d12c:	2001      	movs	r0, #1
 800d12e:	f7f7 f90d 	bl	800434c <_exit>

0800d132 <_malloc_usable_size_r>:
 800d132:	1f0b      	subs	r3, r1, #4
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	1f18      	subs	r0, r3, #4
 800d138:	2b00      	cmp	r3, #0
 800d13a:	da01      	bge.n	800d140 <_malloc_usable_size_r+0xe>
 800d13c:	580b      	ldr	r3, [r1, r0]
 800d13e:	18c0      	adds	r0, r0, r3
 800d140:	4770      	bx	lr

0800d142 <__sfputc_r>:
 800d142:	6893      	ldr	r3, [r2, #8]
 800d144:	b510      	push	{r4, lr}
 800d146:	3b01      	subs	r3, #1
 800d148:	6093      	str	r3, [r2, #8]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	da04      	bge.n	800d158 <__sfputc_r+0x16>
 800d14e:	6994      	ldr	r4, [r2, #24]
 800d150:	42a3      	cmp	r3, r4
 800d152:	db07      	blt.n	800d164 <__sfputc_r+0x22>
 800d154:	290a      	cmp	r1, #10
 800d156:	d005      	beq.n	800d164 <__sfputc_r+0x22>
 800d158:	6813      	ldr	r3, [r2, #0]
 800d15a:	1c58      	adds	r0, r3, #1
 800d15c:	6010      	str	r0, [r2, #0]
 800d15e:	7019      	strb	r1, [r3, #0]
 800d160:	0008      	movs	r0, r1
 800d162:	bd10      	pop	{r4, pc}
 800d164:	f000 f930 	bl	800d3c8 <__swbuf_r>
 800d168:	0001      	movs	r1, r0
 800d16a:	e7f9      	b.n	800d160 <__sfputc_r+0x1e>

0800d16c <__sfputs_r>:
 800d16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d16e:	0006      	movs	r6, r0
 800d170:	000f      	movs	r7, r1
 800d172:	0014      	movs	r4, r2
 800d174:	18d5      	adds	r5, r2, r3
 800d176:	42ac      	cmp	r4, r5
 800d178:	d101      	bne.n	800d17e <__sfputs_r+0x12>
 800d17a:	2000      	movs	r0, #0
 800d17c:	e007      	b.n	800d18e <__sfputs_r+0x22>
 800d17e:	7821      	ldrb	r1, [r4, #0]
 800d180:	003a      	movs	r2, r7
 800d182:	0030      	movs	r0, r6
 800d184:	f7ff ffdd 	bl	800d142 <__sfputc_r>
 800d188:	3401      	adds	r4, #1
 800d18a:	1c43      	adds	r3, r0, #1
 800d18c:	d1f3      	bne.n	800d176 <__sfputs_r+0xa>
 800d18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d190 <_vfiprintf_r>:
 800d190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d192:	b0a1      	sub	sp, #132	@ 0x84
 800d194:	000f      	movs	r7, r1
 800d196:	0015      	movs	r5, r2
 800d198:	001e      	movs	r6, r3
 800d19a:	9003      	str	r0, [sp, #12]
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d004      	beq.n	800d1aa <_vfiprintf_r+0x1a>
 800d1a0:	6a03      	ldr	r3, [r0, #32]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <_vfiprintf_r+0x1a>
 800d1a6:	f7fe f8f7 	bl	800b398 <__sinit>
 800d1aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d1ac:	07db      	lsls	r3, r3, #31
 800d1ae:	d405      	bmi.n	800d1bc <_vfiprintf_r+0x2c>
 800d1b0:	89bb      	ldrh	r3, [r7, #12]
 800d1b2:	059b      	lsls	r3, r3, #22
 800d1b4:	d402      	bmi.n	800d1bc <_vfiprintf_r+0x2c>
 800d1b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d1b8:	f7fe fa59 	bl	800b66e <__retarget_lock_acquire_recursive>
 800d1bc:	89bb      	ldrh	r3, [r7, #12]
 800d1be:	071b      	lsls	r3, r3, #28
 800d1c0:	d502      	bpl.n	800d1c8 <_vfiprintf_r+0x38>
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d113      	bne.n	800d1f0 <_vfiprintf_r+0x60>
 800d1c8:	0039      	movs	r1, r7
 800d1ca:	9803      	ldr	r0, [sp, #12]
 800d1cc:	f000 f93e 	bl	800d44c <__swsetup_r>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d00d      	beq.n	800d1f0 <_vfiprintf_r+0x60>
 800d1d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d1d6:	07db      	lsls	r3, r3, #31
 800d1d8:	d503      	bpl.n	800d1e2 <_vfiprintf_r+0x52>
 800d1da:	2001      	movs	r0, #1
 800d1dc:	4240      	negs	r0, r0
 800d1de:	b021      	add	sp, #132	@ 0x84
 800d1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1e2:	89bb      	ldrh	r3, [r7, #12]
 800d1e4:	059b      	lsls	r3, r3, #22
 800d1e6:	d4f8      	bmi.n	800d1da <_vfiprintf_r+0x4a>
 800d1e8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d1ea:	f7fe fa41 	bl	800b670 <__retarget_lock_release_recursive>
 800d1ee:	e7f4      	b.n	800d1da <_vfiprintf_r+0x4a>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	ac08      	add	r4, sp, #32
 800d1f4:	6163      	str	r3, [r4, #20]
 800d1f6:	3320      	adds	r3, #32
 800d1f8:	7663      	strb	r3, [r4, #25]
 800d1fa:	3310      	adds	r3, #16
 800d1fc:	76a3      	strb	r3, [r4, #26]
 800d1fe:	9607      	str	r6, [sp, #28]
 800d200:	002e      	movs	r6, r5
 800d202:	7833      	ldrb	r3, [r6, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d001      	beq.n	800d20c <_vfiprintf_r+0x7c>
 800d208:	2b25      	cmp	r3, #37	@ 0x25
 800d20a:	d148      	bne.n	800d29e <_vfiprintf_r+0x10e>
 800d20c:	1b73      	subs	r3, r6, r5
 800d20e:	9305      	str	r3, [sp, #20]
 800d210:	42ae      	cmp	r6, r5
 800d212:	d00b      	beq.n	800d22c <_vfiprintf_r+0x9c>
 800d214:	002a      	movs	r2, r5
 800d216:	0039      	movs	r1, r7
 800d218:	9803      	ldr	r0, [sp, #12]
 800d21a:	f7ff ffa7 	bl	800d16c <__sfputs_r>
 800d21e:	3001      	adds	r0, #1
 800d220:	d100      	bne.n	800d224 <_vfiprintf_r+0x94>
 800d222:	e0ae      	b.n	800d382 <_vfiprintf_r+0x1f2>
 800d224:	6963      	ldr	r3, [r4, #20]
 800d226:	9a05      	ldr	r2, [sp, #20]
 800d228:	189b      	adds	r3, r3, r2
 800d22a:	6163      	str	r3, [r4, #20]
 800d22c:	7833      	ldrb	r3, [r6, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d100      	bne.n	800d234 <_vfiprintf_r+0xa4>
 800d232:	e0a6      	b.n	800d382 <_vfiprintf_r+0x1f2>
 800d234:	2201      	movs	r2, #1
 800d236:	2300      	movs	r3, #0
 800d238:	4252      	negs	r2, r2
 800d23a:	6062      	str	r2, [r4, #4]
 800d23c:	a904      	add	r1, sp, #16
 800d23e:	3254      	adds	r2, #84	@ 0x54
 800d240:	1852      	adds	r2, r2, r1
 800d242:	1c75      	adds	r5, r6, #1
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	60e3      	str	r3, [r4, #12]
 800d248:	60a3      	str	r3, [r4, #8]
 800d24a:	7013      	strb	r3, [r2, #0]
 800d24c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d24e:	4b59      	ldr	r3, [pc, #356]	@ (800d3b4 <_vfiprintf_r+0x224>)
 800d250:	2205      	movs	r2, #5
 800d252:	0018      	movs	r0, r3
 800d254:	7829      	ldrb	r1, [r5, #0]
 800d256:	9305      	str	r3, [sp, #20]
 800d258:	f7fe fa13 	bl	800b682 <memchr>
 800d25c:	1c6e      	adds	r6, r5, #1
 800d25e:	2800      	cmp	r0, #0
 800d260:	d11f      	bne.n	800d2a2 <_vfiprintf_r+0x112>
 800d262:	6822      	ldr	r2, [r4, #0]
 800d264:	06d3      	lsls	r3, r2, #27
 800d266:	d504      	bpl.n	800d272 <_vfiprintf_r+0xe2>
 800d268:	2353      	movs	r3, #83	@ 0x53
 800d26a:	a904      	add	r1, sp, #16
 800d26c:	185b      	adds	r3, r3, r1
 800d26e:	2120      	movs	r1, #32
 800d270:	7019      	strb	r1, [r3, #0]
 800d272:	0713      	lsls	r3, r2, #28
 800d274:	d504      	bpl.n	800d280 <_vfiprintf_r+0xf0>
 800d276:	2353      	movs	r3, #83	@ 0x53
 800d278:	a904      	add	r1, sp, #16
 800d27a:	185b      	adds	r3, r3, r1
 800d27c:	212b      	movs	r1, #43	@ 0x2b
 800d27e:	7019      	strb	r1, [r3, #0]
 800d280:	782b      	ldrb	r3, [r5, #0]
 800d282:	2b2a      	cmp	r3, #42	@ 0x2a
 800d284:	d016      	beq.n	800d2b4 <_vfiprintf_r+0x124>
 800d286:	002e      	movs	r6, r5
 800d288:	2100      	movs	r1, #0
 800d28a:	200a      	movs	r0, #10
 800d28c:	68e3      	ldr	r3, [r4, #12]
 800d28e:	7832      	ldrb	r2, [r6, #0]
 800d290:	1c75      	adds	r5, r6, #1
 800d292:	3a30      	subs	r2, #48	@ 0x30
 800d294:	2a09      	cmp	r2, #9
 800d296:	d950      	bls.n	800d33a <_vfiprintf_r+0x1aa>
 800d298:	2900      	cmp	r1, #0
 800d29a:	d111      	bne.n	800d2c0 <_vfiprintf_r+0x130>
 800d29c:	e017      	b.n	800d2ce <_vfiprintf_r+0x13e>
 800d29e:	3601      	adds	r6, #1
 800d2a0:	e7af      	b.n	800d202 <_vfiprintf_r+0x72>
 800d2a2:	9b05      	ldr	r3, [sp, #20]
 800d2a4:	6822      	ldr	r2, [r4, #0]
 800d2a6:	1ac0      	subs	r0, r0, r3
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	4083      	lsls	r3, r0
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	0035      	movs	r5, r6
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	e7cc      	b.n	800d24e <_vfiprintf_r+0xbe>
 800d2b4:	9b07      	ldr	r3, [sp, #28]
 800d2b6:	1d19      	adds	r1, r3, #4
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	9107      	str	r1, [sp, #28]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	db01      	blt.n	800d2c4 <_vfiprintf_r+0x134>
 800d2c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2c2:	e004      	b.n	800d2ce <_vfiprintf_r+0x13e>
 800d2c4:	425b      	negs	r3, r3
 800d2c6:	60e3      	str	r3, [r4, #12]
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	7833      	ldrb	r3, [r6, #0]
 800d2d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2d2:	d10c      	bne.n	800d2ee <_vfiprintf_r+0x15e>
 800d2d4:	7873      	ldrb	r3, [r6, #1]
 800d2d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2d8:	d134      	bne.n	800d344 <_vfiprintf_r+0x1b4>
 800d2da:	9b07      	ldr	r3, [sp, #28]
 800d2dc:	3602      	adds	r6, #2
 800d2de:	1d1a      	adds	r2, r3, #4
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	9207      	str	r2, [sp, #28]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	da01      	bge.n	800d2ec <_vfiprintf_r+0x15c>
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	425b      	negs	r3, r3
 800d2ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2ee:	4d32      	ldr	r5, [pc, #200]	@ (800d3b8 <_vfiprintf_r+0x228>)
 800d2f0:	2203      	movs	r2, #3
 800d2f2:	0028      	movs	r0, r5
 800d2f4:	7831      	ldrb	r1, [r6, #0]
 800d2f6:	f7fe f9c4 	bl	800b682 <memchr>
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	d006      	beq.n	800d30c <_vfiprintf_r+0x17c>
 800d2fe:	2340      	movs	r3, #64	@ 0x40
 800d300:	1b40      	subs	r0, r0, r5
 800d302:	4083      	lsls	r3, r0
 800d304:	6822      	ldr	r2, [r4, #0]
 800d306:	3601      	adds	r6, #1
 800d308:	4313      	orrs	r3, r2
 800d30a:	6023      	str	r3, [r4, #0]
 800d30c:	7831      	ldrb	r1, [r6, #0]
 800d30e:	2206      	movs	r2, #6
 800d310:	482a      	ldr	r0, [pc, #168]	@ (800d3bc <_vfiprintf_r+0x22c>)
 800d312:	1c75      	adds	r5, r6, #1
 800d314:	7621      	strb	r1, [r4, #24]
 800d316:	f7fe f9b4 	bl	800b682 <memchr>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d040      	beq.n	800d3a0 <_vfiprintf_r+0x210>
 800d31e:	4b28      	ldr	r3, [pc, #160]	@ (800d3c0 <_vfiprintf_r+0x230>)
 800d320:	2b00      	cmp	r3, #0
 800d322:	d122      	bne.n	800d36a <_vfiprintf_r+0x1da>
 800d324:	2207      	movs	r2, #7
 800d326:	9b07      	ldr	r3, [sp, #28]
 800d328:	3307      	adds	r3, #7
 800d32a:	4393      	bics	r3, r2
 800d32c:	3308      	adds	r3, #8
 800d32e:	9307      	str	r3, [sp, #28]
 800d330:	6963      	ldr	r3, [r4, #20]
 800d332:	9a04      	ldr	r2, [sp, #16]
 800d334:	189b      	adds	r3, r3, r2
 800d336:	6163      	str	r3, [r4, #20]
 800d338:	e762      	b.n	800d200 <_vfiprintf_r+0x70>
 800d33a:	4343      	muls	r3, r0
 800d33c:	002e      	movs	r6, r5
 800d33e:	2101      	movs	r1, #1
 800d340:	189b      	adds	r3, r3, r2
 800d342:	e7a4      	b.n	800d28e <_vfiprintf_r+0xfe>
 800d344:	2300      	movs	r3, #0
 800d346:	200a      	movs	r0, #10
 800d348:	0019      	movs	r1, r3
 800d34a:	3601      	adds	r6, #1
 800d34c:	6063      	str	r3, [r4, #4]
 800d34e:	7832      	ldrb	r2, [r6, #0]
 800d350:	1c75      	adds	r5, r6, #1
 800d352:	3a30      	subs	r2, #48	@ 0x30
 800d354:	2a09      	cmp	r2, #9
 800d356:	d903      	bls.n	800d360 <_vfiprintf_r+0x1d0>
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d0c8      	beq.n	800d2ee <_vfiprintf_r+0x15e>
 800d35c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d35e:	e7c6      	b.n	800d2ee <_vfiprintf_r+0x15e>
 800d360:	4341      	muls	r1, r0
 800d362:	002e      	movs	r6, r5
 800d364:	2301      	movs	r3, #1
 800d366:	1889      	adds	r1, r1, r2
 800d368:	e7f1      	b.n	800d34e <_vfiprintf_r+0x1be>
 800d36a:	aa07      	add	r2, sp, #28
 800d36c:	9200      	str	r2, [sp, #0]
 800d36e:	0021      	movs	r1, r4
 800d370:	003a      	movs	r2, r7
 800d372:	4b14      	ldr	r3, [pc, #80]	@ (800d3c4 <_vfiprintf_r+0x234>)
 800d374:	9803      	ldr	r0, [sp, #12]
 800d376:	f7fd fbc3 	bl	800ab00 <_printf_float>
 800d37a:	9004      	str	r0, [sp, #16]
 800d37c:	9b04      	ldr	r3, [sp, #16]
 800d37e:	3301      	adds	r3, #1
 800d380:	d1d6      	bne.n	800d330 <_vfiprintf_r+0x1a0>
 800d382:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d384:	07db      	lsls	r3, r3, #31
 800d386:	d405      	bmi.n	800d394 <_vfiprintf_r+0x204>
 800d388:	89bb      	ldrh	r3, [r7, #12]
 800d38a:	059b      	lsls	r3, r3, #22
 800d38c:	d402      	bmi.n	800d394 <_vfiprintf_r+0x204>
 800d38e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d390:	f7fe f96e 	bl	800b670 <__retarget_lock_release_recursive>
 800d394:	89bb      	ldrh	r3, [r7, #12]
 800d396:	065b      	lsls	r3, r3, #25
 800d398:	d500      	bpl.n	800d39c <_vfiprintf_r+0x20c>
 800d39a:	e71e      	b.n	800d1da <_vfiprintf_r+0x4a>
 800d39c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d39e:	e71e      	b.n	800d1de <_vfiprintf_r+0x4e>
 800d3a0:	aa07      	add	r2, sp, #28
 800d3a2:	9200      	str	r2, [sp, #0]
 800d3a4:	0021      	movs	r1, r4
 800d3a6:	003a      	movs	r2, r7
 800d3a8:	4b06      	ldr	r3, [pc, #24]	@ (800d3c4 <_vfiprintf_r+0x234>)
 800d3aa:	9803      	ldr	r0, [sp, #12]
 800d3ac:	f7fd fe56 	bl	800b05c <_printf_i>
 800d3b0:	e7e3      	b.n	800d37a <_vfiprintf_r+0x1ea>
 800d3b2:	46c0      	nop			@ (mov r8, r8)
 800d3b4:	0800db28 	.word	0x0800db28
 800d3b8:	0800db2e 	.word	0x0800db2e
 800d3bc:	0800db32 	.word	0x0800db32
 800d3c0:	0800ab01 	.word	0x0800ab01
 800d3c4:	0800d16d 	.word	0x0800d16d

0800d3c8 <__swbuf_r>:
 800d3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ca:	0006      	movs	r6, r0
 800d3cc:	000d      	movs	r5, r1
 800d3ce:	0014      	movs	r4, r2
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d004      	beq.n	800d3de <__swbuf_r+0x16>
 800d3d4:	6a03      	ldr	r3, [r0, #32]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d101      	bne.n	800d3de <__swbuf_r+0x16>
 800d3da:	f7fd ffdd 	bl	800b398 <__sinit>
 800d3de:	69a3      	ldr	r3, [r4, #24]
 800d3e0:	60a3      	str	r3, [r4, #8]
 800d3e2:	89a3      	ldrh	r3, [r4, #12]
 800d3e4:	071b      	lsls	r3, r3, #28
 800d3e6:	d502      	bpl.n	800d3ee <__swbuf_r+0x26>
 800d3e8:	6923      	ldr	r3, [r4, #16]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d109      	bne.n	800d402 <__swbuf_r+0x3a>
 800d3ee:	0021      	movs	r1, r4
 800d3f0:	0030      	movs	r0, r6
 800d3f2:	f000 f82b 	bl	800d44c <__swsetup_r>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d003      	beq.n	800d402 <__swbuf_r+0x3a>
 800d3fa:	2501      	movs	r5, #1
 800d3fc:	426d      	negs	r5, r5
 800d3fe:	0028      	movs	r0, r5
 800d400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d402:	6923      	ldr	r3, [r4, #16]
 800d404:	6820      	ldr	r0, [r4, #0]
 800d406:	b2ef      	uxtb	r7, r5
 800d408:	1ac0      	subs	r0, r0, r3
 800d40a:	6963      	ldr	r3, [r4, #20]
 800d40c:	b2ed      	uxtb	r5, r5
 800d40e:	4283      	cmp	r3, r0
 800d410:	dc05      	bgt.n	800d41e <__swbuf_r+0x56>
 800d412:	0021      	movs	r1, r4
 800d414:	0030      	movs	r0, r6
 800d416:	f7ff fd93 	bl	800cf40 <_fflush_r>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d1ed      	bne.n	800d3fa <__swbuf_r+0x32>
 800d41e:	68a3      	ldr	r3, [r4, #8]
 800d420:	3001      	adds	r0, #1
 800d422:	3b01      	subs	r3, #1
 800d424:	60a3      	str	r3, [r4, #8]
 800d426:	6823      	ldr	r3, [r4, #0]
 800d428:	1c5a      	adds	r2, r3, #1
 800d42a:	6022      	str	r2, [r4, #0]
 800d42c:	701f      	strb	r7, [r3, #0]
 800d42e:	6963      	ldr	r3, [r4, #20]
 800d430:	4283      	cmp	r3, r0
 800d432:	d004      	beq.n	800d43e <__swbuf_r+0x76>
 800d434:	89a3      	ldrh	r3, [r4, #12]
 800d436:	07db      	lsls	r3, r3, #31
 800d438:	d5e1      	bpl.n	800d3fe <__swbuf_r+0x36>
 800d43a:	2d0a      	cmp	r5, #10
 800d43c:	d1df      	bne.n	800d3fe <__swbuf_r+0x36>
 800d43e:	0021      	movs	r1, r4
 800d440:	0030      	movs	r0, r6
 800d442:	f7ff fd7d 	bl	800cf40 <_fflush_r>
 800d446:	2800      	cmp	r0, #0
 800d448:	d0d9      	beq.n	800d3fe <__swbuf_r+0x36>
 800d44a:	e7d6      	b.n	800d3fa <__swbuf_r+0x32>

0800d44c <__swsetup_r>:
 800d44c:	4b2d      	ldr	r3, [pc, #180]	@ (800d504 <__swsetup_r+0xb8>)
 800d44e:	b570      	push	{r4, r5, r6, lr}
 800d450:	0005      	movs	r5, r0
 800d452:	6818      	ldr	r0, [r3, #0]
 800d454:	000c      	movs	r4, r1
 800d456:	2800      	cmp	r0, #0
 800d458:	d004      	beq.n	800d464 <__swsetup_r+0x18>
 800d45a:	6a03      	ldr	r3, [r0, #32]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d101      	bne.n	800d464 <__swsetup_r+0x18>
 800d460:	f7fd ff9a 	bl	800b398 <__sinit>
 800d464:	230c      	movs	r3, #12
 800d466:	5ee2      	ldrsh	r2, [r4, r3]
 800d468:	0713      	lsls	r3, r2, #28
 800d46a:	d423      	bmi.n	800d4b4 <__swsetup_r+0x68>
 800d46c:	06d3      	lsls	r3, r2, #27
 800d46e:	d407      	bmi.n	800d480 <__swsetup_r+0x34>
 800d470:	2309      	movs	r3, #9
 800d472:	602b      	str	r3, [r5, #0]
 800d474:	2340      	movs	r3, #64	@ 0x40
 800d476:	2001      	movs	r0, #1
 800d478:	4313      	orrs	r3, r2
 800d47a:	81a3      	strh	r3, [r4, #12]
 800d47c:	4240      	negs	r0, r0
 800d47e:	e03a      	b.n	800d4f6 <__swsetup_r+0xaa>
 800d480:	0752      	lsls	r2, r2, #29
 800d482:	d513      	bpl.n	800d4ac <__swsetup_r+0x60>
 800d484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d486:	2900      	cmp	r1, #0
 800d488:	d008      	beq.n	800d49c <__swsetup_r+0x50>
 800d48a:	0023      	movs	r3, r4
 800d48c:	3344      	adds	r3, #68	@ 0x44
 800d48e:	4299      	cmp	r1, r3
 800d490:	d002      	beq.n	800d498 <__swsetup_r+0x4c>
 800d492:	0028      	movs	r0, r5
 800d494:	f7fe ff82 	bl	800c39c <_free_r>
 800d498:	2300      	movs	r3, #0
 800d49a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d49c:	2224      	movs	r2, #36	@ 0x24
 800d49e:	89a3      	ldrh	r3, [r4, #12]
 800d4a0:	4393      	bics	r3, r2
 800d4a2:	81a3      	strh	r3, [r4, #12]
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	6063      	str	r3, [r4, #4]
 800d4a8:	6923      	ldr	r3, [r4, #16]
 800d4aa:	6023      	str	r3, [r4, #0]
 800d4ac:	2308      	movs	r3, #8
 800d4ae:	89a2      	ldrh	r2, [r4, #12]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	81a3      	strh	r3, [r4, #12]
 800d4b4:	6923      	ldr	r3, [r4, #16]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d10b      	bne.n	800d4d2 <__swsetup_r+0x86>
 800d4ba:	21a0      	movs	r1, #160	@ 0xa0
 800d4bc:	2280      	movs	r2, #128	@ 0x80
 800d4be:	89a3      	ldrh	r3, [r4, #12]
 800d4c0:	0089      	lsls	r1, r1, #2
 800d4c2:	0092      	lsls	r2, r2, #2
 800d4c4:	400b      	ands	r3, r1
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d003      	beq.n	800d4d2 <__swsetup_r+0x86>
 800d4ca:	0021      	movs	r1, r4
 800d4cc:	0028      	movs	r0, r5
 800d4ce:	f000 f88f 	bl	800d5f0 <__smakebuf_r>
 800d4d2:	230c      	movs	r3, #12
 800d4d4:	5ee2      	ldrsh	r2, [r4, r3]
 800d4d6:	2101      	movs	r1, #1
 800d4d8:	0013      	movs	r3, r2
 800d4da:	400b      	ands	r3, r1
 800d4dc:	420a      	tst	r2, r1
 800d4de:	d00b      	beq.n	800d4f8 <__swsetup_r+0xac>
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	60a3      	str	r3, [r4, #8]
 800d4e4:	6963      	ldr	r3, [r4, #20]
 800d4e6:	425b      	negs	r3, r3
 800d4e8:	61a3      	str	r3, [r4, #24]
 800d4ea:	2000      	movs	r0, #0
 800d4ec:	6923      	ldr	r3, [r4, #16]
 800d4ee:	4283      	cmp	r3, r0
 800d4f0:	d101      	bne.n	800d4f6 <__swsetup_r+0xaa>
 800d4f2:	0613      	lsls	r3, r2, #24
 800d4f4:	d4be      	bmi.n	800d474 <__swsetup_r+0x28>
 800d4f6:	bd70      	pop	{r4, r5, r6, pc}
 800d4f8:	0791      	lsls	r1, r2, #30
 800d4fa:	d400      	bmi.n	800d4fe <__swsetup_r+0xb2>
 800d4fc:	6963      	ldr	r3, [r4, #20]
 800d4fe:	60a3      	str	r3, [r4, #8]
 800d500:	e7f3      	b.n	800d4ea <__swsetup_r+0x9e>
 800d502:	46c0      	nop			@ (mov r8, r8)
 800d504:	2000002c 	.word	0x2000002c

0800d508 <_raise_r>:
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	0004      	movs	r4, r0
 800d50c:	000d      	movs	r5, r1
 800d50e:	291f      	cmp	r1, #31
 800d510:	d904      	bls.n	800d51c <_raise_r+0x14>
 800d512:	2316      	movs	r3, #22
 800d514:	6003      	str	r3, [r0, #0]
 800d516:	2001      	movs	r0, #1
 800d518:	4240      	negs	r0, r0
 800d51a:	bd70      	pop	{r4, r5, r6, pc}
 800d51c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d004      	beq.n	800d52c <_raise_r+0x24>
 800d522:	008a      	lsls	r2, r1, #2
 800d524:	189b      	adds	r3, r3, r2
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	2a00      	cmp	r2, #0
 800d52a:	d108      	bne.n	800d53e <_raise_r+0x36>
 800d52c:	0020      	movs	r0, r4
 800d52e:	f000 f831 	bl	800d594 <_getpid_r>
 800d532:	002a      	movs	r2, r5
 800d534:	0001      	movs	r1, r0
 800d536:	0020      	movs	r0, r4
 800d538:	f000 f81a 	bl	800d570 <_kill_r>
 800d53c:	e7ed      	b.n	800d51a <_raise_r+0x12>
 800d53e:	2a01      	cmp	r2, #1
 800d540:	d009      	beq.n	800d556 <_raise_r+0x4e>
 800d542:	1c51      	adds	r1, r2, #1
 800d544:	d103      	bne.n	800d54e <_raise_r+0x46>
 800d546:	2316      	movs	r3, #22
 800d548:	6003      	str	r3, [r0, #0]
 800d54a:	2001      	movs	r0, #1
 800d54c:	e7e5      	b.n	800d51a <_raise_r+0x12>
 800d54e:	2100      	movs	r1, #0
 800d550:	0028      	movs	r0, r5
 800d552:	6019      	str	r1, [r3, #0]
 800d554:	4790      	blx	r2
 800d556:	2000      	movs	r0, #0
 800d558:	e7df      	b.n	800d51a <_raise_r+0x12>
	...

0800d55c <raise>:
 800d55c:	b510      	push	{r4, lr}
 800d55e:	4b03      	ldr	r3, [pc, #12]	@ (800d56c <raise+0x10>)
 800d560:	0001      	movs	r1, r0
 800d562:	6818      	ldr	r0, [r3, #0]
 800d564:	f7ff ffd0 	bl	800d508 <_raise_r>
 800d568:	bd10      	pop	{r4, pc}
 800d56a:	46c0      	nop			@ (mov r8, r8)
 800d56c:	2000002c 	.word	0x2000002c

0800d570 <_kill_r>:
 800d570:	2300      	movs	r3, #0
 800d572:	b570      	push	{r4, r5, r6, lr}
 800d574:	4d06      	ldr	r5, [pc, #24]	@ (800d590 <_kill_r+0x20>)
 800d576:	0004      	movs	r4, r0
 800d578:	0008      	movs	r0, r1
 800d57a:	0011      	movs	r1, r2
 800d57c:	602b      	str	r3, [r5, #0]
 800d57e:	f7f6 fed5 	bl	800432c <_kill>
 800d582:	1c43      	adds	r3, r0, #1
 800d584:	d103      	bne.n	800d58e <_kill_r+0x1e>
 800d586:	682b      	ldr	r3, [r5, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d000      	beq.n	800d58e <_kill_r+0x1e>
 800d58c:	6023      	str	r3, [r4, #0]
 800d58e:	bd70      	pop	{r4, r5, r6, pc}
 800d590:	200008c4 	.word	0x200008c4

0800d594 <_getpid_r>:
 800d594:	b510      	push	{r4, lr}
 800d596:	f7f6 fec3 	bl	8004320 <_getpid>
 800d59a:	bd10      	pop	{r4, pc}

0800d59c <__swhatbuf_r>:
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	000e      	movs	r6, r1
 800d5a0:	001d      	movs	r5, r3
 800d5a2:	230e      	movs	r3, #14
 800d5a4:	5ec9      	ldrsh	r1, [r1, r3]
 800d5a6:	0014      	movs	r4, r2
 800d5a8:	b096      	sub	sp, #88	@ 0x58
 800d5aa:	2900      	cmp	r1, #0
 800d5ac:	da0c      	bge.n	800d5c8 <__swhatbuf_r+0x2c>
 800d5ae:	89b2      	ldrh	r2, [r6, #12]
 800d5b0:	2380      	movs	r3, #128	@ 0x80
 800d5b2:	0011      	movs	r1, r2
 800d5b4:	4019      	ands	r1, r3
 800d5b6:	421a      	tst	r2, r3
 800d5b8:	d114      	bne.n	800d5e4 <__swhatbuf_r+0x48>
 800d5ba:	2380      	movs	r3, #128	@ 0x80
 800d5bc:	00db      	lsls	r3, r3, #3
 800d5be:	2000      	movs	r0, #0
 800d5c0:	6029      	str	r1, [r5, #0]
 800d5c2:	6023      	str	r3, [r4, #0]
 800d5c4:	b016      	add	sp, #88	@ 0x58
 800d5c6:	bd70      	pop	{r4, r5, r6, pc}
 800d5c8:	466a      	mov	r2, sp
 800d5ca:	f000 f853 	bl	800d674 <_fstat_r>
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	dbed      	blt.n	800d5ae <__swhatbuf_r+0x12>
 800d5d2:	23f0      	movs	r3, #240	@ 0xf0
 800d5d4:	9901      	ldr	r1, [sp, #4]
 800d5d6:	021b      	lsls	r3, r3, #8
 800d5d8:	4019      	ands	r1, r3
 800d5da:	4b04      	ldr	r3, [pc, #16]	@ (800d5ec <__swhatbuf_r+0x50>)
 800d5dc:	18c9      	adds	r1, r1, r3
 800d5de:	424b      	negs	r3, r1
 800d5e0:	4159      	adcs	r1, r3
 800d5e2:	e7ea      	b.n	800d5ba <__swhatbuf_r+0x1e>
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	2340      	movs	r3, #64	@ 0x40
 800d5e8:	e7e9      	b.n	800d5be <__swhatbuf_r+0x22>
 800d5ea:	46c0      	nop			@ (mov r8, r8)
 800d5ec:	ffffe000 	.word	0xffffe000

0800d5f0 <__smakebuf_r>:
 800d5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5f2:	2602      	movs	r6, #2
 800d5f4:	898b      	ldrh	r3, [r1, #12]
 800d5f6:	0005      	movs	r5, r0
 800d5f8:	000c      	movs	r4, r1
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	4233      	tst	r3, r6
 800d5fe:	d007      	beq.n	800d610 <__smakebuf_r+0x20>
 800d600:	0023      	movs	r3, r4
 800d602:	3347      	adds	r3, #71	@ 0x47
 800d604:	6023      	str	r3, [r4, #0]
 800d606:	6123      	str	r3, [r4, #16]
 800d608:	2301      	movs	r3, #1
 800d60a:	6163      	str	r3, [r4, #20]
 800d60c:	b005      	add	sp, #20
 800d60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d610:	ab03      	add	r3, sp, #12
 800d612:	aa02      	add	r2, sp, #8
 800d614:	f7ff ffc2 	bl	800d59c <__swhatbuf_r>
 800d618:	9f02      	ldr	r7, [sp, #8]
 800d61a:	9001      	str	r0, [sp, #4]
 800d61c:	0039      	movs	r1, r7
 800d61e:	0028      	movs	r0, r5
 800d620:	f7fd f938 	bl	800a894 <_malloc_r>
 800d624:	2800      	cmp	r0, #0
 800d626:	d108      	bne.n	800d63a <__smakebuf_r+0x4a>
 800d628:	220c      	movs	r2, #12
 800d62a:	5ea3      	ldrsh	r3, [r4, r2]
 800d62c:	059a      	lsls	r2, r3, #22
 800d62e:	d4ed      	bmi.n	800d60c <__smakebuf_r+0x1c>
 800d630:	2203      	movs	r2, #3
 800d632:	4393      	bics	r3, r2
 800d634:	431e      	orrs	r6, r3
 800d636:	81a6      	strh	r6, [r4, #12]
 800d638:	e7e2      	b.n	800d600 <__smakebuf_r+0x10>
 800d63a:	2380      	movs	r3, #128	@ 0x80
 800d63c:	89a2      	ldrh	r2, [r4, #12]
 800d63e:	6020      	str	r0, [r4, #0]
 800d640:	4313      	orrs	r3, r2
 800d642:	81a3      	strh	r3, [r4, #12]
 800d644:	9b03      	ldr	r3, [sp, #12]
 800d646:	6120      	str	r0, [r4, #16]
 800d648:	6167      	str	r7, [r4, #20]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00c      	beq.n	800d668 <__smakebuf_r+0x78>
 800d64e:	0028      	movs	r0, r5
 800d650:	230e      	movs	r3, #14
 800d652:	5ee1      	ldrsh	r1, [r4, r3]
 800d654:	f000 f820 	bl	800d698 <_isatty_r>
 800d658:	2800      	cmp	r0, #0
 800d65a:	d005      	beq.n	800d668 <__smakebuf_r+0x78>
 800d65c:	2303      	movs	r3, #3
 800d65e:	89a2      	ldrh	r2, [r4, #12]
 800d660:	439a      	bics	r2, r3
 800d662:	3b02      	subs	r3, #2
 800d664:	4313      	orrs	r3, r2
 800d666:	81a3      	strh	r3, [r4, #12]
 800d668:	89a3      	ldrh	r3, [r4, #12]
 800d66a:	9a01      	ldr	r2, [sp, #4]
 800d66c:	4313      	orrs	r3, r2
 800d66e:	81a3      	strh	r3, [r4, #12]
 800d670:	e7cc      	b.n	800d60c <__smakebuf_r+0x1c>
	...

0800d674 <_fstat_r>:
 800d674:	2300      	movs	r3, #0
 800d676:	b570      	push	{r4, r5, r6, lr}
 800d678:	4d06      	ldr	r5, [pc, #24]	@ (800d694 <_fstat_r+0x20>)
 800d67a:	0004      	movs	r4, r0
 800d67c:	0008      	movs	r0, r1
 800d67e:	0011      	movs	r1, r2
 800d680:	602b      	str	r3, [r5, #0]
 800d682:	f7f6 feb3 	bl	80043ec <_fstat>
 800d686:	1c43      	adds	r3, r0, #1
 800d688:	d103      	bne.n	800d692 <_fstat_r+0x1e>
 800d68a:	682b      	ldr	r3, [r5, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d000      	beq.n	800d692 <_fstat_r+0x1e>
 800d690:	6023      	str	r3, [r4, #0]
 800d692:	bd70      	pop	{r4, r5, r6, pc}
 800d694:	200008c4 	.word	0x200008c4

0800d698 <_isatty_r>:
 800d698:	2300      	movs	r3, #0
 800d69a:	b570      	push	{r4, r5, r6, lr}
 800d69c:	4d06      	ldr	r5, [pc, #24]	@ (800d6b8 <_isatty_r+0x20>)
 800d69e:	0004      	movs	r4, r0
 800d6a0:	0008      	movs	r0, r1
 800d6a2:	602b      	str	r3, [r5, #0]
 800d6a4:	f7f6 feb0 	bl	8004408 <_isatty>
 800d6a8:	1c43      	adds	r3, r0, #1
 800d6aa:	d103      	bne.n	800d6b4 <_isatty_r+0x1c>
 800d6ac:	682b      	ldr	r3, [r5, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d000      	beq.n	800d6b4 <_isatty_r+0x1c>
 800d6b2:	6023      	str	r3, [r4, #0]
 800d6b4:	bd70      	pop	{r4, r5, r6, pc}
 800d6b6:	46c0      	nop			@ (mov r8, r8)
 800d6b8:	200008c4 	.word	0x200008c4

0800d6bc <_init>:
 800d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6be:	46c0      	nop			@ (mov r8, r8)
 800d6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6c2:	bc08      	pop	{r3}
 800d6c4:	469e      	mov	lr, r3
 800d6c6:	4770      	bx	lr

0800d6c8 <_fini>:
 800d6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ca:	46c0      	nop			@ (mov r8, r8)
 800d6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ce:	bc08      	pop	{r3}
 800d6d0:	469e      	mov	lr, r3
 800d6d2:	4770      	bx	lr
